// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32l4x6

// Package dac provides access to the registers of the DAC peripheral.
//
// Instances:
//  DAC  DAC_BASE  -  -  Digital-to-analog converter
// Registers:
//  0x000 32  CR       control register
//  0x004 32  SWTRIGR  software trigger register
//  0x008 32  DHR12R1  channel1 12-bit right-aligned data holding register
//  0x00C 32  DHR12L1  channel1 12-bit left-aligned data holding register
//  0x010 32  DHR8R1   channel1 8-bit right-aligned data holding register
//  0x014 32  DHR12R2  channel2 12-bit right aligned data holding register
//  0x018 32  DHR12L2  channel2 12-bit left aligned data holding register
//  0x01C 32  DHR8R2   channel2 8-bit right-aligned data holding register
//  0x020 32  DHR12RD  Dual DAC 12-bit right-aligned data holding register
//  0x024 32  DHR12LD  DUAL DAC 12-bit left aligned data holding register
//  0x028 32  DHR8RD   DUAL DAC 8-bit right aligned data holding register
//  0x02C 32  DOR1     channel1 data output register
//  0x030 32  DOR2     channel2 data output register
//  0x034 32  SR       status register
//  0x038 32  CCR      calibration control register
//  0x03C 32  MCR      mode control register
//  0x040 32  SHSR1    Sample and Hold sample time register 1
//  0x044 32  SHSR2    Sample and Hold sample time register 2
//  0x048 32  SHHR     Sample and Hold hold time register
//  0x04C 32  SHRR     Sample and Hold refresh time register
// Import:
//  github.com/embeddedgo/stm32/p/mmap
package dac

const (
	EN1       CR = 0x01 << 0  //+ DAC channel1 enable
	TEN1      CR = 0x01 << 2  //+ DAC channel1 trigger enable
	TSEL1     CR = 0x07 << 3  //+ DAC channel1 trigger selection
	WAVE1     CR = 0x03 << 6  //+ DAC channel1 noise/triangle wave generation enable
	MAMP1     CR = 0x0F << 8  //+ DAC channel1 mask/amplitude selector
	DMAEN1    CR = 0x01 << 12 //+ DAC channel1 DMA enable
	DMAUDRIE1 CR = 0x01 << 13 //+ DAC channel1 DMA Underrun Interrupt enable
	CEN1      CR = 0x01 << 14 //+ DAC Channel 1 calibration enable
	EN2       CR = 0x01 << 16 //+ DAC channel2 enable
	TEN2      CR = 0x01 << 18 //+ DAC channel2 trigger enable
	TSEL2     CR = 0x07 << 19 //+ DAC channel2 trigger selection
	WAVE2     CR = 0x03 << 22 //+ DAC channel2 noise/triangle wave generation enable
	MAMP2     CR = 0x0F << 24 //+ DAC channel2 mask/amplitude selector
	DMAEN2    CR = 0x01 << 28 //+ DAC channel2 DMA enable
	DMAUDRIE2 CR = 0x01 << 29 //+ DAC channel2 DMA underrun interrupt enable
	CEN2      CR = 0x01 << 30 //+ DAC Channel 2 calibration enable
)

const (
	EN1n       = 0
	TEN1n      = 2
	TSEL1n     = 3
	WAVE1n     = 6
	MAMP1n     = 8
	DMAEN1n    = 12
	DMAUDRIE1n = 13
	CEN1n      = 14
	EN2n       = 16
	TEN2n      = 18
	TSEL2n     = 19
	WAVE2n     = 22
	MAMP2n     = 24
	DMAEN2n    = 28
	DMAUDRIE2n = 29
	CEN2n      = 30
)

const (
	SWTRIG1 SWTRIGR = 0x01 << 0 //+ DAC channel1 software trigger
	SWTRIG2 SWTRIGR = 0x01 << 1 //+ DAC channel2 software trigger
)

const (
	SWTRIG1n = 0
	SWTRIG2n = 1
)

const (
	DACC1DHR DHR12R1 = 0xFFF << 0 //+ DAC channel1 12-bit right-aligned data
)

const (
	DACC1DHRn = 0
)

const (
	DACC1DHR DHR12L1 = 0xFFF << 4 //+ DAC channel1 12-bit left-aligned data
)

const (
	DACC1DHRn = 4
)

const (
	DACC1DHR DHR8R1 = 0xFF << 0 //+ DAC channel1 8-bit right-aligned data
)

const (
	DACC1DHRn = 0
)

const (
	DACC2DHR DHR12R2 = 0xFFF << 0 //+ DAC channel2 12-bit right-aligned data
)

const (
	DACC2DHRn = 0
)

const (
	DACC2DHR DHR12L2 = 0xFFF << 4 //+ DAC channel2 12-bit left-aligned data
)

const (
	DACC2DHRn = 4
)

const (
	DACC2DHR DHR8R2 = 0xFF << 0 //+ DAC channel2 8-bit right-aligned data
)

const (
	DACC2DHRn = 0
)

const (
	DACC1DHR DHR12RD = 0xFFF << 0  //+ DAC channel1 12-bit right-aligned data
	DACC2DHR DHR12RD = 0xFFF << 16 //+ DAC channel2 12-bit right-aligned data
)

const (
	DACC1DHRn = 0
	DACC2DHRn = 16
)

const (
	DACC1DHR DHR12LD = 0xFFF << 4  //+ DAC channel1 12-bit left-aligned data
	DACC2DHR DHR12LD = 0xFFF << 20 //+ DAC channel2 12-bit left-aligned data
)

const (
	DACC1DHRn = 4
	DACC2DHRn = 20
)

const (
	DACC1DHR DHR8RD = 0xFF << 0 //+ DAC channel1 8-bit right-aligned data
	DACC2DHR DHR8RD = 0xFF << 8 //+ DAC channel2 8-bit right-aligned data
)

const (
	DACC1DHRn = 0
	DACC2DHRn = 8
)

const (
	DACC1DOR DOR1 = 0xFFF << 0 //+ DAC channel1 data output
)

const (
	DACC1DORn = 0
)

const (
	DACC2DOR DOR2 = 0xFFF << 0 //+ DAC channel2 data output
)

const (
	DACC2DORn = 0
)

const (
	DMAUDR1   SR = 0x01 << 13 //+ DAC channel1 DMA underrun flag
	CAL_FLAG1 SR = 0x01 << 14 //+ DAC Channel 1 calibration offset status
	BWST1     SR = 0x01 << 15 //+ DAC Channel 1 busy writing sample time flag
	DMAUDR2   SR = 0x01 << 29 //+ DAC channel2 DMA underrun flag
	CAL_FLAG2 SR = 0x01 << 30 //+ DAC Channel 2 calibration offset status
	BWST2     SR = 0x01 << 31 //+ DAC Channel 2 busy writing sample time flag
)

const (
	DMAUDR1n   = 13
	CAL_FLAG1n = 14
	BWST1n     = 15
	DMAUDR2n   = 29
	CAL_FLAG2n = 30
	BWST2n     = 31
)

const (
	OTRIM1 CCR = 0x1F << 0  //+ DAC Channel 1 offset trimming value
	OTRIM2 CCR = 0x1F << 16 //+ DAC Channel 2 offset trimming value
)

const (
	OTRIM1n = 0
	OTRIM2n = 16
)

const (
	MODE1 MCR = 0x07 << 0  //+ DAC Channel 1 mode
	MODE2 MCR = 0x07 << 16 //+ DAC Channel 2 mode
)

const (
	MODE1n = 0
	MODE2n = 16
)

const (
	TSAMPLE1 SHSR1 = 0x3FF << 0 //+ DAC Channel 1 sample Time
)

const (
	TSAMPLE1n = 0
)

const (
	TSAMPLE2 SHSR2 = 0x3FF << 0 //+ DAC Channel 2 sample Time
)

const (
	TSAMPLE2n = 0
)

const (
	THOLD1 SHHR = 0x3FF << 0  //+ DAC Channel 1 hold Time
	THOLD2 SHHR = 0x3FF << 16 //+ DAC Channel 2 hold time
)

const (
	THOLD1n = 0
	THOLD2n = 16
)

const (
	TREFRESH1 SHRR = 0xFF << 0  //+ DAC Channel 1 refresh Time
	TREFRESH2 SHRR = 0xFF << 16 //+ DAC Channel 2 refresh Time
)

const (
	TREFRESH1n = 0
	TREFRESH2n = 16
)
