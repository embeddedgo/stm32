// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32f215

// Package dac provides access to the registers of the DAC peripheral.
//
// Instances:
//
//	DAC  DAC_BASE  APB1  TIM6_DAC*  Digital-to-analog converter
//
// Registers:
//
//	0x000 32  CR       control register
//	0x004 32  SWTRIGR  software trigger register
//	0x008 32  DHR12R1  channel1 12-bit right-aligned data holding register
//	0x00C 32  DHR12L1  channel1 12-bit left aligned data holding register
//	0x010 32  DHR8R1   channel1 8-bit right aligned data holding register
//	0x014 32  DHR12R2  channel2 12-bit right aligned data holding register
//	0x018 32  DHR12L2  channel2 12-bit left aligned data holding register
//	0x01C 32  DHR8R2   channel2 8-bit right-aligned data holding register
//	0x020 32  DHR12RD  Dual DAC 12-bit right-aligned data holding register
//	0x024 32  DHR12LD  DUAL DAC 12-bit left aligned data holding register
//	0x028 32  DHR8RD   DUAL DAC 8-bit right aligned data holding register
//	0x02C 32  DOR1     channel1 data output register
//	0x030 32  DOR2     channel2 data output register
//	0x034 32  SR       status register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/bus
//	github.com/embeddedgo/stm32/p/mmap
package dac

const (
	EN1       CR = 0x01 << 0  //+ DAC channel1 enable
	BOFF1     CR = 0x01 << 1  //+ DAC channel1 output buffer disable
	TEN1      CR = 0x01 << 2  //+ DAC channel1 trigger enable
	TSEL1     CR = 0x07 << 3  //+ DAC channel1 trigger selection
	WAVE1     CR = 0x03 << 6  //+ DAC channel1 noise/triangle wave generation enable
	MAMP1     CR = 0x0F << 8  //+ DAC channel1 mask/amplitude selector
	DMAEN1    CR = 0x01 << 12 //+ DAC channel1 DMA enable
	DMAUDRIE1 CR = 0x01 << 13 //+ DAC channel1 DMA Underrun Interrupt enable
	EN2       CR = 0x01 << 16 //+ DAC channel2 enable
	BOFF2     CR = 0x01 << 17 //+ DAC channel2 output buffer disable
	TEN2      CR = 0x01 << 18 //+ DAC channel2 trigger enable
	TSEL2     CR = 0x07 << 19 //+ DAC channel2 trigger selection
	WAVE2     CR = 0x03 << 22 //+ DAC channel2 noise/triangle wave generation enable
	MAMP2     CR = 0x0F << 24 //+ DAC channel2 mask/amplitude selector
	DMAEN2    CR = 0x01 << 28 //+ DAC channel2 DMA enable
	DMAUDRIE2 CR = 0x01 << 29 //+ DAC channel2 DMA underrun interrupt enable
)

const (
	EN1n       = 0
	BOFF1n     = 1
	TEN1n      = 2
	TSEL1n     = 3
	WAVE1n     = 6
	MAMP1n     = 8
	DMAEN1n    = 12
	DMAUDRIE1n = 13
	EN2n       = 16
	BOFF2n     = 17
	TEN2n      = 18
	TSEL2n     = 19
	WAVE2n     = 22
	MAMP2n     = 24
	DMAEN2n    = 28
	DMAUDRIE2n = 29
)

const (
	SWTRIG1 SWTRIGR = 0x01 << 0 //+ DAC channel1 software trigger
	SWTRIG2 SWTRIGR = 0x01 << 1 //+ DAC channel2 software trigger
)

const (
	SWTRIG1n = 0
	SWTRIG2n = 1
)

const (
	DACC1DHR DHR12R1 = 0xFFF << 0 //+ DAC channel1 12-bit right-aligned data
)

const (
	DACC1DHRn = 0
)

const (
	DACC1DHR DHR12L1 = 0xFFF << 4 //+ DAC channel1 12-bit left-aligned data
)

const (
	DACC1DHRn = 4
)

const (
	DACC1DHR DHR8R1 = 0xFF << 0 //+ DAC channel1 8-bit right-aligned data
)

const (
	DACC1DHRn = 0
)

const (
	DACC2DHR DHR12R2 = 0xFFF << 0 //+ DAC channel2 12-bit right-aligned data
)

const (
	DACC2DHRn = 0
)

const (
	DACC2DHR DHR12L2 = 0xFFF << 4 //+ DAC channel2 12-bit left-aligned data
)

const (
	DACC2DHRn = 4
)

const (
	DACC2DHR DHR8R2 = 0xFF << 0 //+ DAC channel2 8-bit right-aligned data
)

const (
	DACC2DHRn = 0
)

const (
	DACC1DHR DHR12RD = 0xFFF << 0  //+ DAC channel1 12-bit right-aligned data
	DACC2DHR DHR12RD = 0xFFF << 16 //+ DAC channel2 12-bit right-aligned data
)

const (
	DACC1DHRn = 0
	DACC2DHRn = 16
)

const (
	DACC1DHR DHR12LD = 0xFFF << 4  //+ DAC channel1 12-bit left-aligned data
	DACC2DHR DHR12LD = 0xFFF << 20 //+ DAC channel2 12-bit left-aligned data
)

const (
	DACC1DHRn = 4
	DACC2DHRn = 20
)

const (
	DACC1DHR DHR8RD = 0xFF << 0 //+ DAC channel1 8-bit right-aligned data
	DACC2DHR DHR8RD = 0xFF << 8 //+ DAC channel2 8-bit right-aligned data
)

const (
	DACC1DHRn = 0
	DACC2DHRn = 8
)

const (
	DACC1DOR DOR1 = 0xFFF << 0 //+ DAC channel1 data output
)

const (
	DACC1DORn = 0
)

const (
	DACC2DOR DOR2 = 0xFFF << 0 //+ DAC channel2 data output
)

const (
	DACC2DORn = 0
)

const (
	DMAUDR1 SR = 0x01 << 13 //+ DAC channel1 DMA underrun flag
	DMAUDR2 SR = 0x01 << 29 //+ DAC channel2 DMA underrun flag
)

const (
	DMAUDR1n = 13
	DMAUDR2n = 29
)
