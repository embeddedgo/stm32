// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32l4x6

package dma

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	ISR   mmio.R32[ISR]
	IFCR  mmio.R32[IFCR]
	C     [7]SC
	_     [5]uint32
	CSELR mmio.R32[CSELR]
}

func DMA1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA1_BASE))) }
func DMA2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB1
}

type ISR uint32

func GIF1_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF1} }
func TCIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF1} }
func HTIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF1} }
func TEIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF1} }
func GIF2_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF2} }
func TCIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF2} }
func HTIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF2} }
func TEIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF2} }
func GIF3_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF3} }
func TCIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF3} }
func HTIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF3} }
func TEIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF3} }
func GIF4_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF4} }
func TCIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF4} }
func HTIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF4} }
func TEIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF4} }
func GIF5_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF5} }
func TCIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF5} }
func HTIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF5} }
func TEIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF5} }
func GIF6_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF6} }
func TCIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF6} }
func HTIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF6} }
func TEIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF6} }
func GIF7_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF7} }
func TCIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF7} }
func HTIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF7} }
func TEIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF7} }

type IFCR uint32

func CGIF1_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF1} }
func CTCIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF1} }
func CHTIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF1} }
func CTEIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF1} }
func CGIF2_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF2} }
func CTCIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF2} }
func CHTIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF2} }
func CTEIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF2} }
func CGIF3_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF3} }
func CTCIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF3} }
func CHTIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF3} }
func CTEIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF3} }
func CGIF4_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF4} }
func CTCIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF4} }
func CHTIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF4} }
func CTEIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF4} }
func CGIF5_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF5} }
func CTCIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF5} }
func CHTIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF5} }
func CTEIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF5} }
func CGIF6_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF6} }
func CTCIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF6} }
func CHTIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF6} }
func CTEIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF6} }
func CGIF7_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CGIF7} }
func CTCIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTCIF7} }
func CHTIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CHTIF7} }
func CTEIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: CTEIF7} }

type SC struct {
	CR   mmio.R32[CR]
	NDTR mmio.R32[NDTR]
	PAR  mmio.R32[PAR]
	MAR  mmio.R32[MAR]
	_    uint32
}

type CR uint32

func EN_(p *Periph, i int) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: EN} }
func TCIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: TCIE} }
func HTIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: HTIE} }
func TEIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: TEIE} }
func DIR_(p *Periph, i int) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: DIR} }
func CIRC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: CIRC} }
func PINC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: PINC} }
func MINC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: MINC} }
func PSIZE_(p *Periph, i int) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: PSIZE} }
func MSIZE_(p *Periph, i int) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: MSIZE} }
func PL_(p *Periph, i int) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: PL} }
func MEM2MEM_(p *Periph, i int) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: MEM2MEM} }

type NDTR uint32

func NDT_(p *Periph, i int) mmio.RM32[NDTR] { return mmio.RM32[NDTR]{R: &p.C[i].NDTR, Mask: NDT} }

type PAR uint32

func PA_(p *Periph, i int) mmio.RM32[PAR] { return mmio.RM32[PAR]{R: &p.C[i].PAR, Mask: PA} }

type MAR uint32

func MA_(p *Periph, i int) mmio.RM32[MAR] { return mmio.RM32[MAR]{R: &p.C[i].MAR, Mask: MA} }

type CSELR uint32

func C1S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C1S} }
func C2S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C2S} }
func C3S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C3S} }
func C4S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C4S} }
func C5S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C5S} }
func C6S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C6S} }
func C7S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{R: &p.CSELR, Mask: C7S} }
