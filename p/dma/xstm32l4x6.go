// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32l4x6

package dma

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	ISR   mmio.R32[ISR]
	IFCR  mmio.R32[IFCR]
	C     [7]SC
	_     [5]uint32
	CSELR mmio.R32[CSELR]
}

func DMA1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA1_BASE))) }
func DMA2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB1
}

type ISR uint32

func GIF1_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF1} }
func TCIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF1} }
func HTIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF1} }
func TEIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF1} }
func GIF2_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF2} }
func TCIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF2} }
func HTIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF2} }
func TEIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF2} }
func GIF3_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF3} }
func TCIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF3} }
func HTIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF3} }
func TEIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF3} }
func GIF4_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF4} }
func TCIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF4} }
func HTIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF4} }
func TEIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF4} }
func GIF5_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF5} }
func TCIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF5} }
func HTIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF5} }
func TEIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF5} }
func GIF6_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF6} }
func TCIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF6} }
func HTIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF6} }
func TEIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF6} }
func GIF7_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, GIF7} }
func TCIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TCIF7} }
func HTIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, HTIF7} }
func TEIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TEIF7} }

type IFCR uint32

func CGIF1_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF1} }
func CTCIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF1} }
func CHTIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF1} }
func CTEIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF1} }
func CGIF2_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF2} }
func CTCIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF2} }
func CHTIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF2} }
func CTEIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF2} }
func CGIF3_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF3} }
func CTCIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF3} }
func CHTIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF3} }
func CTEIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF3} }
func CGIF4_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF4} }
func CTCIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF4} }
func CHTIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF4} }
func CTEIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF4} }
func CGIF5_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF5} }
func CTCIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF5} }
func CHTIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF5} }
func CTEIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF5} }
func CGIF6_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF6} }
func CTCIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF6} }
func CHTIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF6} }
func CTEIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF6} }
func CGIF7_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{&p.IFCR, CGIF7} }
func CTCIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTCIF7} }
func CHTIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CHTIF7} }
func CTEIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{&p.IFCR, CTEIF7} }

type SC struct {
	CR   mmio.R32[CR]
	NDTR mmio.R32[NDTR]
	PAR  mmio.R32[PAR]
	MAR  mmio.R32[MAR]
	_    uint32
}

type CR uint32

func EN_(p *Periph, i int) mmio.RM32[CR]      { return mmio.RM32[CR]{&p.C[i].CR, EN} }
func TCIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.C[i].CR, TCIE} }
func HTIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.C[i].CR, HTIE} }
func TEIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.C[i].CR, TEIE} }
func DIR_(p *Periph, i int) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.C[i].CR, DIR} }
func CIRC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.C[i].CR, CIRC} }
func PINC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.C[i].CR, PINC} }
func MINC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.C[i].CR, MINC} }
func PSIZE_(p *Periph, i int) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.C[i].CR, PSIZE} }
func MSIZE_(p *Periph, i int) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.C[i].CR, MSIZE} }
func PL_(p *Periph, i int) mmio.RM32[CR]      { return mmio.RM32[CR]{&p.C[i].CR, PL} }
func MEM2MEM_(p *Periph, i int) mmio.RM32[CR] { return mmio.RM32[CR]{&p.C[i].CR, MEM2MEM} }

type NDTR uint32

func NDT_(p *Periph, i int) mmio.RM32[NDTR] { return mmio.RM32[NDTR]{&p.C[i].NDTR, NDT} }

type PAR uint32

func PA_(p *Periph, i int) mmio.RM32[PAR] { return mmio.RM32[PAR]{&p.C[i].PAR, PA} }

type MAR uint32

func MA_(p *Periph, i int) mmio.RM32[MAR] { return mmio.RM32[MAR]{&p.C[i].MAR, MA} }

type CSELR uint32

func C1S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C1S} }
func C2S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C2S} }
func C3S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C3S} }
func C4S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C4S} }
func C5S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C5S} }
func C6S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C6S} }
func C7S_(p *Periph) mmio.RM32[CSELR] { return mmio.RM32[CSELR]{&p.CSELR, C7S} }
