// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32g471xx

package dma

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	ISR  mmio.R32[ISR]
	IFCR mmio.R32[IFCR]
	C    [8]SC
}

func DMA1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA1_BASE))) }
func DMA2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB1
}

type ISR uint32

func GIF1_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF1} }
func TCIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF1} }
func HTIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF1} }
func TEIF1_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF1} }
func GIF2_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF2} }
func TCIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF2} }
func HTIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF2} }
func TEIF2_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF2} }
func GIF3_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF3} }
func TCIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF3} }
func HTIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF3} }
func TEIF3_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF3} }
func GIF4_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF4} }
func TCIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF4} }
func HTIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF4} }
func TEIF4_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF4} }
func GIF5_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF5} }
func TCIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF5} }
func HTIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF5} }
func TEIF5_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF5} }
func GIF6_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF6} }
func TCIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF6} }
func HTIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF6} }
func TEIF6_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF6} }
func GIF7_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF7} }
func TCIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF7} }
func HTIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF7} }
func TEIF7_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF7} }
func GIF8_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{R: &p.ISR, Mask: GIF8} }
func TCIF8_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TCIF8} }
func HTIF8_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: HTIF8} }
func TEIF8_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{R: &p.ISR, Mask: TEIF8} }

type IFCR uint32

func GIF1_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF1} }
func TCIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF1} }
func HTIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF1} }
func TEIF1_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF1} }
func GIF2_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF2} }
func TCIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF2} }
func HTIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF2} }
func TEIF2_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF2} }
func GIF3_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF3} }
func TCIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF3} }
func HTIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF3} }
func TEIF3_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF3} }
func GIF4_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF4} }
func TCIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF4} }
func HTIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF4} }
func TEIF4_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF4} }
func GIF5_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF5} }
func TCIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF5} }
func HTIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF5} }
func TEIF5_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF5} }
func GIF6_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF6} }
func TCIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF6} }
func HTIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF6} }
func TEIF6_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF6} }
func GIF7_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF7} }
func TCIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF7} }
func HTIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF7} }
func TEIF7_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF7} }
func GIF8_(p *Periph) mmio.RM32[IFCR]  { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: GIF8} }
func TCIF8_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TCIF8} }
func HTIF8_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: HTIF8} }
func TEIF8_(p *Periph) mmio.RM32[IFCR] { return mmio.RM32[IFCR]{R: &p.IFCR, Mask: TEIF8} }

type SC struct {
	CR   mmio.R32[CR]
	NDTR mmio.R32[NDTR]
	PAR  mmio.R32[PAR]
	MAR  mmio.R32[MAR]
	_    uint32
}

type CR uint32

func EN_(p *Periph, i int) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: EN} }
func TCIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: TCIE} }
func HTIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: HTIE} }
func TEIE_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: TEIE} }
func DIR_(p *Periph, i int) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: DIR} }
func CIRC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: CIRC} }
func PINC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: PINC} }
func MINC_(p *Periph, i int) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: MINC} }
func PSIZE_(p *Periph, i int) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: PSIZE} }
func MSIZE_(p *Periph, i int) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: MSIZE} }
func PL_(p *Periph, i int) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: PL} }
func MEM2MEM_(p *Periph, i int) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.C[i].CR, Mask: MEM2MEM} }

type NDTR uint32

func NDT_(p *Periph, i int) mmio.RM32[NDTR] { return mmio.RM32[NDTR]{R: &p.C[i].NDTR, Mask: NDT} }

type PAR uint32

func PA_(p *Periph, i int) mmio.RM32[PAR] { return mmio.RM32[PAR]{R: &p.C[i].PAR, Mask: PA} }

type MAR uint32

func MA_(p *Periph, i int) mmio.RM32[MAR] { return mmio.RM32[MAR]{R: &p.C[i].MAR, Mask: MA} }
