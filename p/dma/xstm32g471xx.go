// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32g471xx

package dma

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	ISR  RISR
	IFCR RIFCR
	C    [8]RC
}

func DMA1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA1_BASE))) }
func DMA2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMA2_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB1
}

type ISR uint32

type RISR struct{ mmio.U32 }

func (r *RISR) LoadBits(mask ISR) ISR { return ISR(r.U32.LoadBits(uint32(mask))) }
func (r *RISR) StoreBits(mask, b ISR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RISR) SetBits(mask ISR)      { r.U32.SetBits(uint32(mask)) }
func (r *RISR) ClearBits(mask ISR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RISR) Load() ISR             { return ISR(r.U32.Load()) }
func (r *RISR) Store(b ISR)           { r.U32.Store(uint32(b)) }

type RMISR struct{ mmio.UM32 }

func (rm RMISR) Load() ISR   { return ISR(rm.UM32.Load()) }
func (rm RMISR) Store(b ISR) { rm.UM32.Store(uint32(b)) }

func GIF1_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF1)}}
}

func TCIF1_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF1)}}
}

func HTIF1_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF1)}}
}

func TEIF1_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF1)}}
}

func GIF2_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF2)}}
}

func TCIF2_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF2)}}
}

func HTIF2_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF2)}}
}

func TEIF2_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF2)}}
}

func GIF3_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF3)}}
}

func TCIF3_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF3)}}
}

func HTIF3_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF3)}}
}

func TEIF3_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF3)}}
}

func GIF4_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF4)}}
}

func TCIF4_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF4)}}
}

func HTIF4_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF4)}}
}

func TEIF4_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF4)}}
}

func GIF5_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF5)}}
}

func TCIF5_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF5)}}
}

func HTIF5_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF5)}}
}

func TEIF5_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF5)}}
}

func GIF6_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF6)}}
}

func TCIF6_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF6)}}
}

func HTIF6_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF6)}}
}

func TEIF6_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF6)}}
}

func GIF7_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF7)}}
}

func TCIF7_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF7)}}
}

func HTIF7_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF7)}}
}

func TEIF7_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF7)}}
}

func GIF8_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(GIF8)}}
}

func TCIF8_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TCIF8)}}
}

func HTIF8_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(HTIF8)}}
}

func TEIF8_(p *Periph) RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(TEIF8)}}
}

type IFCR uint32

type RIFCR struct{ mmio.U32 }

func (r *RIFCR) LoadBits(mask IFCR) IFCR { return IFCR(r.U32.LoadBits(uint32(mask))) }
func (r *RIFCR) StoreBits(mask, b IFCR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIFCR) SetBits(mask IFCR)       { r.U32.SetBits(uint32(mask)) }
func (r *RIFCR) ClearBits(mask IFCR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RIFCR) Load() IFCR              { return IFCR(r.U32.Load()) }
func (r *RIFCR) Store(b IFCR)            { r.U32.Store(uint32(b)) }

type RMIFCR struct{ mmio.UM32 }

func (rm RMIFCR) Load() IFCR   { return IFCR(rm.UM32.Load()) }
func (rm RMIFCR) Store(b IFCR) { rm.UM32.Store(uint32(b)) }

func GIF1_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF1)}}
}

func TCIF1_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF1)}}
}

func HTIF1_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF1)}}
}

func TEIF1_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF1)}}
}

func GIF2_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF2)}}
}

func TCIF2_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF2)}}
}

func HTIF2_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF2)}}
}

func TEIF2_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF2)}}
}

func GIF3_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF3)}}
}

func TCIF3_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF3)}}
}

func HTIF3_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF3)}}
}

func TEIF3_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF3)}}
}

func GIF4_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF4)}}
}

func TCIF4_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF4)}}
}

func HTIF4_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF4)}}
}

func TEIF4_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF4)}}
}

func GIF5_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF5)}}
}

func TCIF5_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF5)}}
}

func HTIF5_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF5)}}
}

func TEIF5_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF5)}}
}

func GIF6_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF6)}}
}

func TCIF6_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF6)}}
}

func HTIF6_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF6)}}
}

func TEIF6_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF6)}}
}

func GIF7_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF7)}}
}

func TCIF7_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF7)}}
}

func HTIF7_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF7)}}
}

func TEIF7_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF7)}}
}

func GIF8_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(GIF8)}}
}

func TCIF8_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TCIF8)}}
}

func HTIF8_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(HTIF8)}}
}

func TEIF8_(p *Periph) RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(TEIF8)}}
}

type RC struct {
	CR   RCR
	NDTR RNDTR
	PAR  RPAR
	MAR  RMAR
	_    uint32
}

type CR uint32

type RCR struct{ mmio.U32 }

func (r *RCR) LoadBits(mask CR) CR  { return CR(r.U32.LoadBits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func EN_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(EN)}}
}

func TCIE_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(TCIE)}}
}

func HTIE_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(HTIE)}}
}

func TEIE_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(TEIE)}}
}

func DIR_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(DIR)}}
}

func CIRC_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(CIRC)}}
}

func PINC_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(PINC)}}
}

func MINC_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(MINC)}}
}

func PSIZE_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(PSIZE)}}
}

func MSIZE_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(MSIZE)}}
}

func PL_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(PL)}}
}

func MEM2MEM_(p *Periph, n int) RMCR {
	return RMCR{mmio.UM32{&p.C[n].CR.U32, uint32(MEM2MEM)}}
}

type NDTR uint32

type RNDTR struct{ mmio.U32 }

func (r *RNDTR) LoadBits(mask NDTR) NDTR { return NDTR(r.U32.LoadBits(uint32(mask))) }
func (r *RNDTR) StoreBits(mask, b NDTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNDTR) SetBits(mask NDTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RNDTR) ClearBits(mask NDTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RNDTR) Load() NDTR              { return NDTR(r.U32.Load()) }
func (r *RNDTR) Store(b NDTR)            { r.U32.Store(uint32(b)) }

type RMNDTR struct{ mmio.UM32 }

func (rm RMNDTR) Load() NDTR   { return NDTR(rm.UM32.Load()) }
func (rm RMNDTR) Store(b NDTR) { rm.UM32.Store(uint32(b)) }

func NDT_(p *Periph, n int) RMNDTR {
	return RMNDTR{mmio.UM32{&p.C[n].NDTR.U32, uint32(NDT)}}
}

type PAR uint32

type RPAR struct{ mmio.U32 }

func (r *RPAR) LoadBits(mask PAR) PAR { return PAR(r.U32.LoadBits(uint32(mask))) }
func (r *RPAR) StoreBits(mask, b PAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPAR) SetBits(mask PAR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPAR) ClearBits(mask PAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPAR) Load() PAR             { return PAR(r.U32.Load()) }
func (r *RPAR) Store(b PAR)           { r.U32.Store(uint32(b)) }

type RMPAR struct{ mmio.UM32 }

func (rm RMPAR) Load() PAR   { return PAR(rm.UM32.Load()) }
func (rm RMPAR) Store(b PAR) { rm.UM32.Store(uint32(b)) }

func PA_(p *Periph, n int) RMPAR {
	return RMPAR{mmio.UM32{&p.C[n].PAR.U32, uint32(PA)}}
}

type MAR uint32

type RMAR struct{ mmio.U32 }

func (r *RMAR) LoadBits(mask MAR) MAR { return MAR(r.U32.LoadBits(uint32(mask))) }
func (r *RMAR) StoreBits(mask, b MAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMAR) SetBits(mask MAR)      { r.U32.SetBits(uint32(mask)) }
func (r *RMAR) ClearBits(mask MAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMAR) Load() MAR             { return MAR(r.U32.Load()) }
func (r *RMAR) Store(b MAR)           { r.U32.Store(uint32(b)) }

type RMMAR struct{ mmio.UM32 }

func (rm RMMAR) Load() MAR   { return MAR(rm.UM32.Load()) }
func (rm RMMAR) Store(b MAR) { rm.UM32.Store(uint32(b)) }

func MA_(p *Periph, n int) RMMAR {
	return RMMAR{mmio.UM32{&p.C[n].MAR.U32, uint32(MA)}}
}
