// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32l4x6

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR          mmio.R32[CR]
	ICSCR       mmio.R32[ICSCR]
	CFGR        mmio.R32[CFGR]
	PLLCFGR     mmio.R32[PLLCFGR]
	PLLSAI1CFGR mmio.R32[PLLSAI1CFGR]
	PLLSAI2CFGR mmio.R32[PLLSAI2CFGR]
	CIER        mmio.R32[CIER]
	CIFR        mmio.R32[CIFR]
	CICR        mmio.R32[CICR]
	_           uint32
	AHB1RSTR    mmio.R32[AHB1RSTR]
	AHB2RSTR    mmio.R32[AHB2RSTR]
	AHB3RSTR    mmio.R32[AHB3RSTR]
	_           uint32
	APB1RSTR1   mmio.R32[APB1RSTR1]
	APB1RSTR2   mmio.R32[APB1RSTR2]
	APB2RSTR    mmio.R32[APB2RSTR]
	_           uint32
	AHB1ENR     mmio.R32[AHB1ENR]
	AHB2ENR     mmio.R32[AHB2ENR]
	AHB3ENR     mmio.R32[AHB3ENR]
	_           uint32
	APB1ENR1    mmio.R32[APB1ENR1]
	APB1ENR2    mmio.R32[APB1ENR2]
	APB2ENR     mmio.R32[APB2ENR]
	_           uint32
	AHB1SMENR   mmio.R32[AHB1SMENR]
	AHB2SMENR   mmio.R32[AHB2SMENR]
	AHB3SMENR   mmio.R32[AHB3SMENR]
	_           uint32
	APB1SMENR1  mmio.R32[APB1SMENR1]
	APB1SMENR2  mmio.R32[APB1SMENR2]
	APB2SMENR   mmio.R32[APB2SMENR]
	_           uint32
	CCIPR       mmio.R32[CCIPR]
	_           uint32
	BDCR        mmio.R32[BDCR]
	CSR         mmio.R32[CSR]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func MSION_(p *Periph) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.CR, Mask: MSION} }
func MSIRDY_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: MSIRDY} }
func MSIPLLEN_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: MSIPLLEN} }
func MSIRGSEL_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: MSIRGSEL} }
func MSIRANGE_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: MSIRANGE} }
func HSION_(p *Periph) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.CR, Mask: HSION} }
func HSIKERON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: HSIKERON} }
func HSIRDY_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSIRDY} }
func HSIASFS_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSIASFS} }
func HSEON_(p *Periph) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.CR, Mask: HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSEBYP} }
func CSSON_(p *Periph) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.CR, Mask: CSSON} }
func PLLON_(p *Periph) mmio.RM32[CR]      { return mmio.RM32[CR]{R: &p.CR, Mask: PLLON} }
func PLLRDY_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: PLLRDY} }
func PLLSAI1ON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLLSAI1ON} }
func PLLSAI1RDY_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: PLLSAI1RDY} }
func PLLSAI2ON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLLSAI2ON} }
func PLLSAI2RDY_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: PLLSAI2RDY} }

type ICSCR uint32

func MSICAL_(p *Periph) mmio.RM32[ICSCR]  { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: MSICAL} }
func MSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: MSITRIM} }
func HSICAL_(p *Periph) mmio.RM32[ICSCR]  { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: HSICAL} }
func HSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: HSITRIM} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]       { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SWS} }
func HPRE_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: HPRE} }
func PPRE1_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: PPRE1} }
func PPRE2_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: PPRE2} }
func STOPWUCK_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: STOPWUCK} }
func MCOSEL_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCOSEL} }
func MCOPRE_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCOPRE} }

type PLLCFGR uint32

func PLLSRC_(p *Periph) mmio.RM32[PLLCFGR]  { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLSRC} }
func PLLM_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLM} }
func PLLN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLN} }
func PLLPEN_(p *Periph) mmio.RM32[PLLCFGR]  { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLPEN} }
func PLLP_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLP} }
func PLLQEN_(p *Periph) mmio.RM32[PLLCFGR]  { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLQEN} }
func PLLQ_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLQ} }
func PLLREN_(p *Periph) mmio.RM32[PLLCFGR]  { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLREN} }
func PLLR_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLR} }
func PLLPDIV_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLPDIV} }

type PLLSAI1CFGR uint32

func PLLSAI1N_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1N}
}
func PLLSAI1PEN_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1PEN}
}
func PLLSAI1P_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1P}
}
func PLLSAI1QEN_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1QEN}
}
func PLLSAI1Q_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1Q}
}
func PLLSAI1REN_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1REN}
}
func PLLSAI1R_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1R}
}
func PLLSAI1PDIV_(p *Periph) mmio.RM32[PLLSAI1CFGR] {
	return mmio.RM32[PLLSAI1CFGR]{R: &p.PLLSAI1CFGR, Mask: PLLSAI1PDIV}
}

type PLLSAI2CFGR uint32

func PLLSAI2N_(p *Periph) mmio.RM32[PLLSAI2CFGR] {
	return mmio.RM32[PLLSAI2CFGR]{R: &p.PLLSAI2CFGR, Mask: PLLSAI2N}
}
func PLLSAI2PEN_(p *Periph) mmio.RM32[PLLSAI2CFGR] {
	return mmio.RM32[PLLSAI2CFGR]{R: &p.PLLSAI2CFGR, Mask: PLLSAI2PEN}
}
func PLLSAI2P_(p *Periph) mmio.RM32[PLLSAI2CFGR] {
	return mmio.RM32[PLLSAI2CFGR]{R: &p.PLLSAI2CFGR, Mask: PLLSAI2P}
}
func PLLSAI2REN_(p *Periph) mmio.RM32[PLLSAI2CFGR] {
	return mmio.RM32[PLLSAI2CFGR]{R: &p.PLLSAI2CFGR, Mask: PLLSAI2REN}
}
func PLLSAI2R_(p *Periph) mmio.RM32[PLLSAI2CFGR] {
	return mmio.RM32[PLLSAI2CFGR]{R: &p.PLLSAI2CFGR, Mask: PLLSAI2R}
}
func PLLSAI2PDIV_(p *Periph) mmio.RM32[PLLSAI2CFGR] {
	return mmio.RM32[PLLSAI2CFGR]{R: &p.PLLSAI2CFGR, Mask: PLLSAI2PDIV}
}

type CIER uint32

func LSIRDYIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSERDYIE} }
func MSIRDYIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: MSIRDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSERDYIE} }
func PLLRDYIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLLRDYIE} }
func PLLSAI1RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLLSAI1RDYIE} }
func PLLSAI2RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLLSAI2RDYIE} }
func LSECSSIE_(p *Periph) mmio.RM32[CIER]     { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSECSSIE} }
func HSI48RDYIE_(p *Periph) mmio.RM32[CIER]   { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSI48RDYIE} }

type CIFR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSERDYF} }
func MSIRDYF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: MSIRDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSERDYF} }
func PLLRDYF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLLRDYF} }
func PLLSAI1RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLLSAI1RDYF} }
func PLLSAI2RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLLSAI2RDYF} }
func CSSF_(p *Periph) mmio.RM32[CIFR]        { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: CSSF} }
func LSECSSF_(p *Periph) mmio.RM32[CIFR]     { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSECSSF} }
func HSI48RDYF_(p *Periph) mmio.RM32[CIFR]   { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSI48RDYF} }

type CICR uint32

func LSIRDYC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSERDYC} }
func MSIRDYC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: MSIRDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSERDYC} }
func PLLRDYC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLLRDYC} }
func PLLSAI1RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLLSAI1RDYC} }
func PLLSAI2RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLLSAI2RDYC} }
func CSSC_(p *Periph) mmio.RM32[CICR]        { return mmio.RM32[CICR]{R: &p.CICR, Mask: CSSC} }
func LSECSSC_(p *Periph) mmio.RM32[CICR]     { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSECSSC} }
func HSI48RDYC_(p *Periph) mmio.RM32[CICR]   { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSI48RDYC} }

type AHB1RSTR uint32

func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA1RST}
}
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA2RST}
}
func FLASHRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: FLASHRST}
}
func CRCRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: CRCRST} }
func TSCRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: TSCRST} }
func DMA2DRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA2DRST}
}

type AHB2RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOARST}
}
func GPIOBRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOBRST}
}
func GPIOCRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOCRST}
}
func GPIODRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIODRST}
}
func GPIOERST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOERST}
}
func GPIOFRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOFRST}
}
func GPIOGRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOGRST}
}
func GPIOHRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOHRST}
}
func GPIOIRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOIRST}
}
func OTGFSRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: OTGFSRST}
}
func ADCRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: ADCRST} }
func DCMIRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: DCMIRST}
}
func AESRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: AESRST} }
func HASH1RST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: HASH1RST}
}
func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: RNGRST} }

type AHB3RSTR uint32

func FMCRST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: FMCRST} }
func QSPIRST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: QSPIRST}
}

type APB1RSTR1 uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM2RST}
}
func TIM3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM3RST}
}
func TIM4RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM4RST}
}
func TIM5RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM5RST}
}
func TIM6RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM6RST}
}
func TIM7RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM7RST}
}
func LCDRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: LCDRST}
}
func SPI2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: SPI2RST}
}
func SPI3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: SPI3RST}
}
func USART2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: USART2RST}
}
func USART3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: USART3RST}
}
func UART4RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: UART4RST}
}
func UART5RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: UART5RST}
}
func I2C1RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: I2C1RST}
}
func I2C2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: I2C2RST}
}
func I2C3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: I2C3RST}
}
func CRSRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: CRSRST}
}
func CAN1RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: CAN1RST}
}
func CAN2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: CAN2RST}
}
func PWRRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: PWRRST}
}
func DAC1RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: DAC1RST}
}
func OPAMPRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: OPAMPRST}
}
func LPTIM1RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: LPTIM1RST}
}

type APB1RSTR2 uint32

func LPUART1RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: LPUART1RST}
}
func I2C4RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: I2C4RST}
}
func SWPMI1RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: SWPMI1RST}
}
func LPTIM2RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: LPTIM2RST}
}

type APB2RSTR uint32

func SYSCFGRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SYSCFGRST}
}
func SDMMCRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SDMMCRST}
}
func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM1RST}
}
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI1RST}
}
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM8RST}
}
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: USART1RST}
}
func TIM15RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM15RST}
}
func TIM16RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM16RST}
}
func TIM17RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM17RST}
}
func SAI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SAI1RST}
}
func SAI2RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SAI2RST}
}
func DFSDMRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: DFSDMRST}
}

type AHB1ENR uint32

func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA2EN} }
func FLASHEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: FLASHEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: CRCEN} }
func TSCEN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: TSCEN} }
func DMA2DEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA2DEN} }

type AHB2ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOGEN} }
func GPIOHEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOHEN} }
func GPIOIEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOIEN} }
func OTGFSEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: OTGFSEN} }
func ADCEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: ADCEN} }
func DCMIEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: DCMIEN} }
func AESEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: AESEN} }
func HASH1EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: HASH1EN} }
func RNGEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: RNGEN} }

type AHB3ENR uint32

func FMCEN_(p *Periph) mmio.RM32[AHB3ENR]  { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: FMCEN} }
func QSPIEN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: QSPIEN} }

type APB1ENR1 uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM7EN} }
func LCDEN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: LCDEN} }
func RTCAPBEN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: RTCAPBEN}
}
func WWDGEN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: WWDGEN} }
func SPI2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: SPI3EN} }
func USART2EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: USART2EN}
}
func USART3EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: USART3EN}
}
func UART4EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: UART4EN}
}
func UART5EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: UART5EN}
}
func I2C1EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: I2C2EN} }
func I2C3EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: I2C3EN} }
func CRSEN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: CRSEN} }
func CAN1EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: CAN1EN} }
func CAN2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: CAN2EN} }
func PWREN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: PWREN} }
func DAC1EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: DAC1EN} }
func OPAMPEN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: OPAMPEN}
}
func LPTIM1EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: LPTIM1EN}
}

type APB1ENR2 uint32

func LPUART1EN_(p *Periph) mmio.RM32[APB1ENR2] {
	return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: LPUART1EN}
}
func I2C4EN_(p *Periph) mmio.RM32[APB1ENR2] { return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: I2C4EN} }
func SWPMI1EN_(p *Periph) mmio.RM32[APB1ENR2] {
	return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: SWPMI1EN}
}
func LPTIM2EN_(p *Periph) mmio.RM32[APB1ENR2] {
	return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: LPTIM2EN}
}

type APB2ENR uint32

func SYSCFGEN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SYSCFGEN}
}
func FIREWALLEN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: FIREWALLEN}
}
func SDMMCEN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SDMMCEN} }
func TIM1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM1EN} }
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: USART1EN}
}
func TIM15EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM15EN} }
func TIM16EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM16EN} }
func TIM17EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM17EN} }
func SAI1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SAI1EN} }
func SAI2EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SAI2EN} }
func DFSDMEN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: DFSDMEN} }

type AHB1SMENR uint32

func DMA1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: DMA1SMEN}
}
func DMA2SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: DMA2SMEN}
}
func FLASHSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: FLASHSMEN}
}
func SRAM1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: SRAM1SMEN}
}
func CRCSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: CRCSMEN}
}
func TSCSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: TSCSMEN}
}
func DMA2DSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: DMA2DSMEN}
}

type AHB2SMENR uint32

func GPIOASMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOASMEN}
}
func GPIOBSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOBSMEN}
}
func GPIOCSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOCSMEN}
}
func GPIODSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIODSMEN}
}
func GPIOESMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOESMEN}
}
func GPIOFSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOFSMEN}
}
func GPIOGSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOGSMEN}
}
func GPIOHSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOHSMEN}
}
func GPIOISMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOISMEN}
}
func SRAM2SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: SRAM2SMEN}
}
func OTGFSSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: OTGFSSMEN}
}
func ADCFSSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: ADCFSSMEN}
}
func DCMISMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: DCMISMEN}
}
func AESSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: AESSMEN}
}
func HASH1SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: HASH1SMEN}
}
func RNGSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: RNGSMEN}
}

type AHB3SMENR uint32

func FMCSMEN_(p *Periph) mmio.RM32[AHB3SMENR] {
	return mmio.RM32[AHB3SMENR]{R: &p.AHB3SMENR, Mask: FMCSMEN}
}
func QSPISMEN_(p *Periph) mmio.RM32[AHB3SMENR] {
	return mmio.RM32[AHB3SMENR]{R: &p.AHB3SMENR, Mask: QSPISMEN}
}

type APB1SMENR1 uint32

func TIM2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM2SMEN}
}
func TIM3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM3SMEN}
}
func TIM4SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM4SMEN}
}
func TIM5SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM5SMEN}
}
func TIM6SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM6SMEN}
}
func TIM7SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM7SMEN}
}
func LCDSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: LCDSMEN}
}
func RTCAPBSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: RTCAPBSMEN}
}
func WWDGSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: WWDGSMEN}
}
func SPI2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: SPI2SMEN}
}
func SPI3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: SPI3SMEN}
}
func USART2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: USART2SMEN}
}
func USART3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: USART3SMEN}
}
func UART4SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: UART4SMEN}
}
func UART5SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: UART5SMEN}
}
func I2C1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C1SMEN}
}
func I2C2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C2SMEN}
}
func I2C3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C3SMEN}
}
func CAN1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: CAN1SMEN}
}
func CAN2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: CAN2SMEN}
}
func PWRSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: PWRSMEN}
}
func DAC1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: DAC1SMEN}
}
func OPAMPSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: OPAMPSMEN}
}
func LPTIM1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: LPTIM1SMEN}
}

type APB1SMENR2 uint32

func LPUART1SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: LPUART1SMEN}
}
func I2C4SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: I2C4SMEN}
}
func SWPMI1SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: SWPMI1SMEN}
}
func LPTIM2SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: LPTIM2SMEN}
}

type APB2SMENR uint32

func SYSCFGSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SYSCFGSMEN}
}
func SDMMCSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SDMMCSMEN}
}
func TIM1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM1SMEN}
}
func SPI1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SPI1SMEN}
}
func TIM8SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM8SMEN}
}
func USART1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: USART1SMEN}
}
func TIM15SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM15SMEN}
}
func TIM16SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM16SMEN}
}
func TIM17SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM17SMEN}
}
func SAI1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SAI1SMEN}
}
func SAI2SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SAI2SMEN}
}
func DFSDMSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: DFSDMSMEN}
}

type CCIPR uint32

func USART1SEL_(p *Periph) mmio.RM32[CCIPR]  { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: USART1SEL} }
func USART2SEL_(p *Periph) mmio.RM32[CCIPR]  { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: USART2SEL} }
func USART3SEL_(p *Periph) mmio.RM32[CCIPR]  { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: USART3SEL} }
func UART4SEL_(p *Periph) mmio.RM32[CCIPR]   { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: UART4SEL} }
func UART5SEL_(p *Periph) mmio.RM32[CCIPR]   { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: UART5SEL} }
func LPUART1SEL_(p *Periph) mmio.RM32[CCIPR] { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: LPUART1SEL} }
func I2C1SEL_(p *Periph) mmio.RM32[CCIPR]    { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: I2C1SEL} }
func I2C2SEL_(p *Periph) mmio.RM32[CCIPR]    { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: I2C2SEL} }
func I2C3SEL_(p *Periph) mmio.RM32[CCIPR]    { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: I2C3SEL} }
func LPTIM1SEL_(p *Periph) mmio.RM32[CCIPR]  { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: LPTIM1SEL} }
func LPTIM2SEL_(p *Periph) mmio.RM32[CCIPR]  { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: LPTIM2SEL} }
func SAI1SEL_(p *Periph) mmio.RM32[CCIPR]    { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: SAI1SEL} }
func SAI2SEL_(p *Periph) mmio.RM32[CCIPR]    { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: SAI2SEL} }
func CLK48SEL_(p *Periph) mmio.RM32[CCIPR]   { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: CLK48SEL} }
func ADCSEL_(p *Periph) mmio.RM32[CCIPR]     { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: ADCSEL} }
func SWPMI1SEL_(p *Periph) mmio.RM32[CCIPR]  { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: SWPMI1SEL} }
func DFSDMSEL_(p *Periph) mmio.RM32[CCIPR]   { return mmio.RM32[CCIPR]{R: &p.CCIPR, Mask: DFSDMSEL} }

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEBYP} }
func LSEDRV_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEDRV} }
func LSECSSON_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSECSSON} }
func LSECSSD_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSECSSD} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCEN} }
func BDRST_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: BDRST} }
func LSCOEN_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSCOEN} }
func LSCOSEL_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSCOSEL} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]        { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR]       { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSIRDY} }
func MSISRANGE_(p *Periph) mmio.RM32[CSR]    { return mmio.RM32[CSR]{R: &p.CSR, Mask: MSISRANGE} }
func RMVF_(p *Periph) mmio.RM32[CSR]         { return mmio.RM32[CSR]{R: &p.CSR, Mask: RMVF} }
func FIREWALLRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{R: &p.CSR, Mask: FIREWALLRSTF} }
func OBLRSTF_(p *Periph) mmio.RM32[CSR]      { return mmio.RM32[CSR]{R: &p.CSR, Mask: OBLRSTF} }
func PINRSTF_(p *Periph) mmio.RM32[CSR]      { return mmio.RM32[CSR]{R: &p.CSR, Mask: PINRSTF} }
func BORRSTF_(p *Periph) mmio.RM32[CSR]      { return mmio.RM32[CSR]{R: &p.CSR, Mask: BORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[CSR]      { return mmio.RM32[CSR]{R: &p.CSR, Mask: SFTRSTF} }
func IWDGRSTF_(p *Periph) mmio.RM32[CSR]     { return mmio.RM32[CSR]{R: &p.CSR, Mask: IWDGRSTF} }
func WWDGRSTF_(p *Periph) mmio.RM32[CSR]     { return mmio.RM32[CSR]{R: &p.CSR, Mask: WWDGRSTF} }
func LPWRSTF_(p *Periph) mmio.RM32[CSR]      { return mmio.RM32[CSR]{R: &p.CSR, Mask: LPWRSTF} }
