// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32f412

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         mmio.R32[CR]
	PLLCFGR    mmio.R32[PLLCFGR]
	CFGR       mmio.R32[CFGR]
	CIR        mmio.R32[CIR]
	AHB1RSTR   mmio.R32[AHB1RSTR]
	AHB2RSTR   mmio.R32[AHB2RSTR]
	_          [2]uint32
	APB1RSTR   mmio.R32[APB1RSTR]
	APB2RSTR   mmio.R32[APB2RSTR]
	_          [2]uint32
	AHB1ENR    mmio.R32[AHB1ENR]
	AHB2ENR    mmio.R32[AHB2ENR]
	_          [2]uint32
	APB1ENR    mmio.R32[APB1ENR]
	APB2ENR    mmio.R32[APB2ENR]
	_          [2]uint32
	AHB1LPENR  mmio.R32[AHB1LPENR]
	AHB2LPENR  mmio.R32[AHB2LPENR]
	_          [2]uint32
	APB1LPENR  mmio.R32[APB1LPENR]
	APB2LPENR  mmio.R32[APB2LPENR]
	_          [2]uint32
	BDCR       mmio.R32[BDCR]
	CSR        mmio.R32[CSR]
	_          [2]uint32
	SSCGR      mmio.R32[SSCGR]
	PLLI2SCFGR mmio.R32[PLLI2SCFGR]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func HSION_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSION} }
func HSIRDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSIRDY} }
func HSITRIM_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: HSITRIM} }
func HSICAL_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSICAL} }
func HSEON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSEBYP} }
func CSSON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: CSSON} }
func PLLON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: PLLON} }
func PLLRDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: PLLRDY} }
func PLLI2SON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLLI2SON} }
func PLLI2SRDY_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: PLLI2SRDY} }

type PLLCFGR uint32

func PLLM_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLM} }
func PLLN_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLN} }
func PLLP_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLP} }
func PLLSRC_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLSRC} }
func PLLQ_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLLQ} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SWS} }
func HPRE_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: HPRE} }
func PPRE1_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: PPRE1} }
func PPRE2_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: PPRE2} }
func RTCPRE_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: RTCPRE} }
func MCO1_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO1} }
func I2SSRC_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: I2SSRC} }
func MCO1PRE_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO1PRE} }
func MCO2PRE_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO2PRE} }
func MCO2_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO2} }

type CIR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: LSERDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: HSERDYF} }
func PLLRDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: PLLRDYF} }
func PLLI2SRDYF_(p *Periph) mmio.RM32[CIR]  { return mmio.RM32[CIR]{R: &p.CIR, Mask: PLLI2SRDYF} }
func CSSF_(p *Periph) mmio.RM32[CIR]        { return mmio.RM32[CIR]{R: &p.CIR, Mask: CSSF} }
func LSIRDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{R: &p.CIR, Mask: LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{R: &p.CIR, Mask: LSERDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{R: &p.CIR, Mask: HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{R: &p.CIR, Mask: HSERDYIE} }
func PLLRDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{R: &p.CIR, Mask: PLLRDYIE} }
func PLLI2SRDYIE_(p *Periph) mmio.RM32[CIR] { return mmio.RM32[CIR]{R: &p.CIR, Mask: PLLI2SRDYIE} }
func LSIRDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: LSERDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: HSERDYC} }
func PLLRDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{R: &p.CIR, Mask: PLLRDYC} }
func PLLI2SRDYC_(p *Periph) mmio.RM32[CIR]  { return mmio.RM32[CIR]{R: &p.CIR, Mask: PLLI2SRDYC} }
func CSSC_(p *Periph) mmio.RM32[CIR]        { return mmio.RM32[CIR]{R: &p.CIR, Mask: CSSC} }

type AHB1RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOARST}
}
func GPIOBRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOBRST}
}
func GPIOCRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOCRST}
}
func GPIODRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIODRST}
}
func GPIOERST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOERST}
}
func GPIOFRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOFRST}
}
func GPIOGRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOGRST}
}
func GPIOHRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: GPIOHRST}
}
func CRCRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: CRCRST} }
func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA1RST}
}
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA2RST}
}

type AHB2RSTR uint32

func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: RNGRST} }
func OTGFSRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: OTGFSRST}
}

type APB1RSTR uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM2RST}
}
func TIM3RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM3RST}
}
func TIM4RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM4RST}
}
func TIM5RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM5RST}
}
func TIM6RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM6RST}
}
func TIM7RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM7RST}
}
func TIM12RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM12RST}
}
func TIM13RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM13RST}
}
func TIM14RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: TIM14RST}
}
func WWDGRST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: WWDGRST}
}
func SPI2RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: SPI2RST}
}
func SPI3RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: SPI3RST}
}
func UART2RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: UART2RST}
}
func USART3RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: USART3RST}
}
func I2C1RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: I2C1RST}
}
func I2C2RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: I2C2RST}
}
func I2C3RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: I2C3RST}
}
func I2C4RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: I2C4RST}
}
func CAN1RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: CAN1RST}
}
func CAN2RST_(p *Periph) mmio.RM32[APB1RSTR] {
	return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: CAN2RST}
}
func PWRRST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{R: &p.APB1RSTR, Mask: PWRRST} }

type APB2RSTR uint32

func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM1RST}
}
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM8RST}
}
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: USART1RST}
}
func USART6RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: USART6RST}
}
func ADCRST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: ADCRST} }
func SDIORST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SDIORST}
}
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI1RST}
}
func SYSCFGRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SYSCFGRST}
}
func TIM9RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM9RST}
}
func TIM10RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM10RST}
}
func TIM11RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM11RST}
}
func DFSDMRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: DFSDMRST}
}

type AHB1ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOGEN} }
func GPIOHEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: GPIOHEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: CRCEN} }
func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA2EN} }

type AHB2ENR uint32

func RNGEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: RNGEN} }
func OTGFSEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: OTGFSEN} }

type APB1ENR uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM7EN} }
func TIM12EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM12EN} }
func TIM13EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM13EN} }
func TIM14EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: TIM14EN} }
func WWDGEN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: WWDGEN} }
func SPI2EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: SPI3EN} }
func USART2EN_(p *Periph) mmio.RM32[APB1ENR] {
	return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: USART2EN}
}
func USART3EN_(p *Periph) mmio.RM32[APB1ENR] {
	return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: USART3EN}
}
func I2C1EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: I2C2EN} }
func I2C3EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: I2C3EN} }
func I2C4EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: I2C4EN} }
func CAN1EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: CAN1EN} }
func CAN2EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: CAN2EN} }
func PWREN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{R: &p.APB1ENR, Mask: PWREN} }

type APB2ENR uint32

func TIM1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: USART1EN}
}
func USART6EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: USART6EN}
}
func ADC1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: ADC1EN} }
func SDIOEN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SDIOEN} }
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI1EN} }
func SPI4EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI4EN} }
func SYSCFGEN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SYSCFGEN}
}
func TIM9EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM9EN} }
func TIM10EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM10EN} }
func TIM11EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM11EN} }
func DFSDMEN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: DFSDMEN} }

type AHB1LPENR uint32

func GPIOALPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOALPEN}
}
func GPIOBLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOBLPEN}
}
func GPIOCLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOCLPEN}
}
func GPIODLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIODLPEN}
}
func GPIOELPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOELPEN}
}
func GPIOFLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOFLPEN}
}
func GPIOGLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOGLPEN}
}
func GPIOHLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: GPIOHLPEN}
}
func CRCLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: CRCLPEN}
}
func FLITFLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: FLITFLPEN}
}
func SRAM1LPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: SRAM1LPEN}
}
func DMA1LPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: DMA1LPEN}
}
func DMA2LPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: DMA2LPEN}
}

type AHB2LPENR uint32

func RNGLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: RNGLPEN}
}
func OTGFSLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: OTGFSLPEN}
}

type APB1LPENR uint32

func TIM2LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM2LPEN}
}
func TIM3LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM3LPEN}
}
func TIM4LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM4LPEN}
}
func TIM5LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM5LPEN}
}
func TIM6LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM6LPEN}
}
func TIM7LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM7LPEN}
}
func TIM12LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM12LPEN}
}
func TIM13LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM13LPEN}
}
func TIM14LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: TIM14LPEN}
}
func WWDGLPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: WWDGLPEN}
}
func SPI2LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: SPI2LPEN}
}
func SPI3LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: SPI3LPEN}
}
func USART2LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: USART2LPEN}
}
func USART3LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: USART3LPEN}
}
func I2C1LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: I2C1LPEN}
}
func I2C2LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: I2C2LPEN}
}
func I2C3LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: I2C3LPEN}
}
func I2C4LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: I2C4LPEN}
}
func CAN1LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: CAN1LPEN}
}
func CAN2LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: CAN2LPEN}
}
func PWRLPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{R: &p.APB1LPENR, Mask: PWRLPEN}
}

type APB2LPENR uint32

func TIM1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM1LPEN}
}
func TIM8LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM8LPEN}
}
func USART1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: USART1LPEN}
}
func USART6LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: USART6LPEN}
}
func ADC1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: ADC1LPEN}
}
func SDIOLPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SDIOLPEN}
}
func SPI1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SPI1LPEN}
}
func SPI4LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SPI4LPEN}
}
func SYSCFGLPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SYSCFGLPEN}
}
func TIM9LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM9LPEN}
}
func TIM10LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM10LPEN}
}
func TIM11LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM11LPEN}
}
func DFSDMLPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: DFSDMLPEN}
}

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEBYP} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCEN} }
func BDRST_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: BDRST} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]    { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR]   { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSIRDY} }
func RMVF_(p *Periph) mmio.RM32[CSR]     { return mmio.RM32[CSR]{R: &p.CSR, Mask: RMVF} }
func BORRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: BORRSTF} }
func PADRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: PADRSTF} }
func PORRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: PORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: SFTRSTF} }
func WDGRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: WDGRSTF} }
func WWDGRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{R: &p.CSR, Mask: WWDGRSTF} }
func LPWRRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{R: &p.CSR, Mask: LPWRRSTF} }

type SSCGR uint32

func MODPER_(p *Periph) mmio.RM32[SSCGR]    { return mmio.RM32[SSCGR]{R: &p.SSCGR, Mask: MODPER} }
func INCSTEP_(p *Periph) mmio.RM32[SSCGR]   { return mmio.RM32[SSCGR]{R: &p.SSCGR, Mask: INCSTEP} }
func SPREADSEL_(p *Periph) mmio.RM32[SSCGR] { return mmio.RM32[SSCGR]{R: &p.SSCGR, Mask: SPREADSEL} }
func SSCGEN_(p *Periph) mmio.RM32[SSCGR]    { return mmio.RM32[SSCGR]{R: &p.SSCGR, Mask: SSCGEN} }

type PLLI2SCFGR uint32

func PLLI2SNx_(p *Periph) mmio.RM32[PLLI2SCFGR] {
	return mmio.RM32[PLLI2SCFGR]{R: &p.PLLI2SCFGR, Mask: PLLI2SNx}
}
func PLLI2SRx_(p *Periph) mmio.RM32[PLLI2SCFGR] {
	return mmio.RM32[PLLI2SCFGR]{R: &p.PLLI2SCFGR, Mask: PLLI2SRx}
}
