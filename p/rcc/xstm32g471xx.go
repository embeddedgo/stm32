// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32g471xx

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         RCR
	ICSCR      RICSCR
	CFGR       RCFGR
	PLLSYSCFGR RPLLSYSCFGR
	_          [2]uint32
	CIER       RCIER
	CIFR       RCIFR
	CICR       RCICR
	_          uint32
	AHB1RSTR   RAHB1RSTR
	AHB2RSTR   RAHB2RSTR
	AHB3RSTR   RAHB3RSTR
	_          uint32
	APB1RSTR1  RAPB1RSTR1
	APB1RSTR2  RAPB1RSTR2
	APB2RSTR   RAPB2RSTR
	_          uint32
	AHB1ENR    RAHB1ENR
	AHB2ENR    RAHB2ENR
	AHB3ENR    RAHB3ENR
	_          uint32
	APB1ENR1   RAPB1ENR1
	APB1ENR2   RAPB1ENR2
	APB2ENR    RAPB2ENR
	_          uint32
	AHB1SMENR  RAHB1SMENR
	AHB2SMENR  RAHB2SMENR
	AHB3SMENR  RAHB3SMENR
	_          uint32
	APB1SMENR1 RAPB1SMENR1
	APB1SMENR2 RAPB1SMENR2
	APB2SMENR  RAPB2SMENR
	_          uint32
	CCIPR1     RCCIPR1
	_          uint32
	BDCR       RBDCR
	CSR        RCSR
	CRRCR      RCRRCR
	CCIPR2     RCCIPR2
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

type CR uint32

type RCR struct{ mmio.U32 }

func (r *RCR) LoadBits(mask CR) CR  { return CR(r.U32.LoadBits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) HSION() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSION)}}
}

func (p *Periph) HSIKERON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIKERON)}}
}

func (p *Periph) HSIRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIRDY)}}
}

func (p *Periph) HSEON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSEON)}}
}

func (p *Periph) HSERDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSERDY)}}
}

func (p *Periph) HSEBYP() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSEBYP)}}
}

func (p *Periph) HSECSSON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSECSSON)}}
}

func (p *Periph) PLLSYSON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLSYSON)}}
}

func (p *Periph) PLLSYSRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLSYSRDY)}}
}

type ICSCR uint32

type RICSCR struct{ mmio.U32 }

func (r *RICSCR) LoadBits(mask ICSCR) ICSCR { return ICSCR(r.U32.LoadBits(uint32(mask))) }
func (r *RICSCR) StoreBits(mask, b ICSCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICSCR) SetBits(mask ICSCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RICSCR) ClearBits(mask ICSCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RICSCR) Load() ICSCR               { return ICSCR(r.U32.Load()) }
func (r *RICSCR) Store(b ICSCR)             { r.U32.Store(uint32(b)) }

type RMICSCR struct{ mmio.UM32 }

func (rm RMICSCR) Load() ICSCR   { return ICSCR(rm.UM32.Load()) }
func (rm RMICSCR) Store(b ICSCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) HSICAL0() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(HSICAL0)}}
}

func (p *Periph) HSITRIM() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(HSITRIM)}}
}

type CFGR uint32

type RCFGR struct{ mmio.U32 }

func (r *RCFGR) LoadBits(mask CFGR) CFGR { return CFGR(r.U32.LoadBits(uint32(mask))) }
func (r *RCFGR) StoreBits(mask, b CFGR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) SetBits(mask CFGR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR) ClearBits(mask CFGR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR) Load() CFGR              { return CFGR(r.U32.Load()) }
func (r *RCFGR) Store(b CFGR)            { r.U32.Store(uint32(b)) }

type RMCFGR struct{ mmio.UM32 }

func (rm RMCFGR) Load() CFGR   { return CFGR(rm.UM32.Load()) }
func (rm RMCFGR) Store(b CFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SW() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(SW)}}
}

func (p *Periph) SWS() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(SWS)}}
}

func (p *Periph) HPRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(HPRE)}}
}

func (p *Periph) PPRE1() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PPRE1)}}
}

func (p *Periph) PPRE2() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PPRE2)}}
}

func (p *Periph) MCOSEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCOSEL)}}
}

func (p *Periph) MCOPRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCOPRE)}}
}

type PLLSYSCFGR uint32

type RPLLSYSCFGR struct{ mmio.U32 }

func (r *RPLLSYSCFGR) LoadBits(mask PLLSYSCFGR) PLLSYSCFGR {
	return PLLSYSCFGR(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLLSYSCFGR) StoreBits(mask, b PLLSYSCFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLLSYSCFGR) SetBits(mask PLLSYSCFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLLSYSCFGR) ClearBits(mask PLLSYSCFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLLSYSCFGR) Load() PLLSYSCFGR             { return PLLSYSCFGR(r.U32.Load()) }
func (r *RPLLSYSCFGR) Store(b PLLSYSCFGR)           { r.U32.Store(uint32(b)) }

type RMPLLSYSCFGR struct{ mmio.UM32 }

func (rm RMPLLSYSCFGR) Load() PLLSYSCFGR   { return PLLSYSCFGR(rm.UM32.Load()) }
func (rm RMPLLSYSCFGR) Store(b PLLSYSCFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PLLSRC() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSRC)}}
}

func (p *Periph) PLLSYSM() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSM)}}
}

func (p *Periph) PLLSYSN() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSN)}}
}

func (p *Periph) PLLPEN() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLPEN)}}
}

func (p *Periph) PLLSYSP() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSP)}}
}

func (p *Periph) PLLSYSQEN() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSQEN)}}
}

func (p *Periph) PLLSYSQ() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSQ)}}
}

func (p *Periph) PLLSYSREN() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSREN)}}
}

func (p *Periph) PLLSYSR() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSR)}}
}

func (p *Periph) PLLSYSPDIV() RMPLLSYSCFGR {
	return RMPLLSYSCFGR{mmio.UM32{&p.PLLSYSCFGR.U32, uint32(PLLSYSPDIV)}}
}

type CIER uint32

type RCIER struct{ mmio.U32 }

func (r *RCIER) LoadBits(mask CIER) CIER { return CIER(r.U32.LoadBits(uint32(mask))) }
func (r *RCIER) StoreBits(mask, b CIER)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIER) SetBits(mask CIER)       { r.U32.SetBits(uint32(mask)) }
func (r *RCIER) ClearBits(mask CIER)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCIER) Load() CIER              { return CIER(r.U32.Load()) }
func (r *RCIER) Store(b CIER)            { r.U32.Store(uint32(b)) }

type RMCIER struct{ mmio.UM32 }

func (rm RMCIER) Load() CIER   { return CIER(rm.UM32.Load()) }
func (rm RMCIER) Store(b CIER) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSIRDYIE)}}
}

func (p *Periph) LSERDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSERDYIE)}}
}

func (p *Periph) HSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(HSIRDYIE)}}
}

func (p *Periph) HSERDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(HSERDYIE)}}
}

func (p *Periph) PLLSYSRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLLSYSRDYIE)}}
}

func (p *Periph) LSECSSIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSECSSIE)}}
}

func (p *Periph) RC48RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(RC48RDYIE)}}
}

type CIFR uint32

type RCIFR struct{ mmio.U32 }

func (r *RCIFR) LoadBits(mask CIFR) CIFR { return CIFR(r.U32.LoadBits(uint32(mask))) }
func (r *RCIFR) StoreBits(mask, b CIFR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIFR) SetBits(mask CIFR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCIFR) ClearBits(mask CIFR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCIFR) Load() CIFR              { return CIFR(r.U32.Load()) }
func (r *RCIFR) Store(b CIFR)            { r.U32.Store(uint32(b)) }

type RMCIFR struct{ mmio.UM32 }

func (rm RMCIFR) Load() CIFR   { return CIFR(rm.UM32.Load()) }
func (rm RMCIFR) Store(b CIFR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSIRDYF)}}
}

func (p *Periph) LSERDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSERDYF)}}
}

func (p *Periph) HSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSIRDYF)}}
}

func (p *Periph) HSERDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSERDYF)}}
}

func (p *Periph) PLLSYSRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLLSYSRDYF)}}
}

func (p *Periph) HSECSSF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSECSSF)}}
}

func (p *Periph) LSECSSF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSECSSF)}}
}

func (p *Periph) RC48RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(RC48RDYF)}}
}

type CICR uint32

type RCICR struct{ mmio.U32 }

func (r *RCICR) LoadBits(mask CICR) CICR { return CICR(r.U32.LoadBits(uint32(mask))) }
func (r *RCICR) StoreBits(mask, b CICR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR) SetBits(mask CICR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCICR) ClearBits(mask CICR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR) Load() CICR              { return CICR(r.U32.Load()) }
func (r *RCICR) Store(b CICR)            { r.U32.Store(uint32(b)) }

type RMCICR struct{ mmio.UM32 }

func (rm RMCICR) Load() CICR   { return CICR(rm.UM32.Load()) }
func (rm RMCICR) Store(b CICR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSIRDYC)}}
}

func (p *Periph) LSERDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSERDYC)}}
}

func (p *Periph) HSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSIRDYC)}}
}

func (p *Periph) HSERDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSERDYC)}}
}

func (p *Periph) PLLSYSRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLLSYSRDYC)}}
}

func (p *Periph) HSECSSC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSECSSC)}}
}

func (p *Periph) LSECSSC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSECSSC)}}
}

func (p *Periph) RC48RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(RC48RDYC)}}
}

type AHB1RSTR uint32

type RAHB1RSTR struct{ mmio.U32 }

func (r *RAHB1RSTR) LoadBits(mask AHB1RSTR) AHB1RSTR { return AHB1RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB1RSTR) StoreBits(mask, b AHB1RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1RSTR) SetBits(mask AHB1RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1RSTR) ClearBits(mask AHB1RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1RSTR) Load() AHB1RSTR                  { return AHB1RSTR(r.U32.Load()) }
func (r *RAHB1RSTR) Store(b AHB1RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB1RSTR struct{ mmio.UM32 }

func (rm RMAHB1RSTR) Load() AHB1RSTR   { return AHB1RSTR(rm.UM32.Load()) }
func (rm RMAHB1RSTR) Store(b AHB1RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DMA1RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA1RST)}}
}

func (p *Periph) DMA2RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA2RST)}}
}

func (p *Periph) DMAMUX1RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMAMUX1RST)}}
}

func (p *Periph) CORDICRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(CORDICRST)}}
}

func (p *Periph) MATRIXRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(MATRIXRST)}}
}

func (p *Periph) FLITFRST_() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(FLITFRST_)}}
}

func (p *Periph) CRCRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(CRCRST)}}
}

type AHB2RSTR uint32

type RAHB2RSTR struct{ mmio.U32 }

func (r *RAHB2RSTR) LoadBits(mask AHB2RSTR) AHB2RSTR { return AHB2RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB2RSTR) StoreBits(mask, b AHB2RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2RSTR) SetBits(mask AHB2RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2RSTR) ClearBits(mask AHB2RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2RSTR) Load() AHB2RSTR                  { return AHB2RSTR(r.U32.Load()) }
func (r *RAHB2RSTR) Store(b AHB2RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB2RSTR struct{ mmio.UM32 }

func (rm RMAHB2RSTR) Load() AHB2RSTR   { return AHB2RSTR(rm.UM32.Load()) }
func (rm RMAHB2RSTR) Store(b AHB2RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) GPIOARST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOARST)}}
}

func (p *Periph) GPIOBRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOBRST)}}
}

func (p *Periph) GPIOCRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOCRST)}}
}

func (p *Periph) GPIODRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIODRST)}}
}

func (p *Periph) GPIOERST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOERST)}}
}

func (p *Periph) GPIOFRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOFRST)}}
}

func (p *Periph) GPIOGRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOGRST)}}
}

func (p *Periph) ADC12RST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(ADC12RST)}}
}

func (p *Periph) ADC345RST_() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(ADC345RST_)}}
}

func (p *Periph) DAC1RST_() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(DAC1RST_)}}
}

func (p *Periph) DAC2RST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(DAC2RST)}}
}

func (p *Periph) DAC3RST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(DAC3RST)}}
}

func (p *Periph) DAC4RST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(DAC4RST)}}
}

func (p *Periph) CRYPTRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(CRYPTRST)}}
}

func (p *Periph) RNGRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(RNGRST)}}
}

type AHB3RSTR uint32

type RAHB3RSTR struct{ mmio.U32 }

func (r *RAHB3RSTR) LoadBits(mask AHB3RSTR) AHB3RSTR { return AHB3RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB3RSTR) StoreBits(mask, b AHB3RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3RSTR) SetBits(mask AHB3RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3RSTR) ClearBits(mask AHB3RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3RSTR) Load() AHB3RSTR                  { return AHB3RSTR(r.U32.Load()) }
func (r *RAHB3RSTR) Store(b AHB3RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB3RSTR struct{ mmio.UM32 }

func (rm RMAHB3RSTR) Load() AHB3RSTR   { return AHB3RSTR(rm.UM32.Load()) }
func (rm RMAHB3RSTR) Store(b AHB3RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FMCRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(FMCRST)}}
}

func (p *Periph) QUADSPI1RST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(QUADSPI1RST)}}
}

type APB1RSTR1 uint32

type RAPB1RSTR1 struct{ mmio.U32 }

func (r *RAPB1RSTR1) LoadBits(mask APB1RSTR1) APB1RSTR1 {
	return APB1RSTR1(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1RSTR1) StoreBits(mask, b APB1RSTR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1RSTR1) SetBits(mask APB1RSTR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1RSTR1) ClearBits(mask APB1RSTR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1RSTR1) Load() APB1RSTR1             { return APB1RSTR1(r.U32.Load()) }
func (r *RAPB1RSTR1) Store(b APB1RSTR1)           { r.U32.Store(uint32(b)) }

type RMAPB1RSTR1 struct{ mmio.UM32 }

func (rm RMAPB1RSTR1) Load() APB1RSTR1   { return APB1RSTR1(rm.UM32.Load()) }
func (rm RMAPB1RSTR1) Store(b APB1RSTR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM2RST)}}
}

func (p *Periph) TIM3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM3RST)}}
}

func (p *Periph) TIM4RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM4RST)}}
}

func (p *Periph) TIM5RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM5RST)}}
}

func (p *Periph) TIM6RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM6RST)}}
}

func (p *Periph) TIM7RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM7RST)}}
}

func (p *Periph) CRSRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(CRSRST)}}
}

func (p *Periph) SPI2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(SPI2RST)}}
}

func (p *Periph) SPI3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(SPI3RST)}}
}

func (p *Periph) USART2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(USART2RST)}}
}

func (p *Periph) USART3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(USART3RST)}}
}

func (p *Periph) UART4RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(UART4RST)}}
}

func (p *Periph) UART5RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(UART5RST)}}
}

func (p *Periph) I2C1RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C1RST)}}
}

func (p *Periph) I2C2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C2RST)}}
}

func (p *Periph) USBDRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(USBDRST)}}
}

func (p *Periph) FDCANRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(FDCANRST)}}
}

func (p *Periph) PWRRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(PWRRST)}}
}

func (p *Periph) I2C3() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C3)}}
}

func (p *Periph) LPTIM1RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(LPTIM1RST)}}
}

type APB1RSTR2 uint32

type RAPB1RSTR2 struct{ mmio.U32 }

func (r *RAPB1RSTR2) LoadBits(mask APB1RSTR2) APB1RSTR2 {
	return APB1RSTR2(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1RSTR2) StoreBits(mask, b APB1RSTR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1RSTR2) SetBits(mask APB1RSTR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1RSTR2) ClearBits(mask APB1RSTR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1RSTR2) Load() APB1RSTR2             { return APB1RSTR2(r.U32.Load()) }
func (r *RAPB1RSTR2) Store(b APB1RSTR2)           { r.U32.Store(uint32(b)) }

type RMAPB1RSTR2 struct{ mmio.UM32 }

func (rm RMAPB1RSTR2) Load() APB1RSTR2   { return APB1RSTR2(rm.UM32.Load()) }
func (rm RMAPB1RSTR2) Store(b APB1RSTR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LPUART1RST() RMAPB1RSTR2 {
	return RMAPB1RSTR2{mmio.UM32{&p.APB1RSTR2.U32, uint32(LPUART1RST)}}
}

func (p *Periph) I2C4RST() RMAPB1RSTR2 {
	return RMAPB1RSTR2{mmio.UM32{&p.APB1RSTR2.U32, uint32(I2C4RST)}}
}

func (p *Periph) USBPDRST() RMAPB1RSTR2 {
	return RMAPB1RSTR2{mmio.UM32{&p.APB1RSTR2.U32, uint32(USBPDRST)}}
}

type APB2RSTR uint32

type RAPB2RSTR struct{ mmio.U32 }

func (r *RAPB2RSTR) LoadBits(mask APB2RSTR) APB2RSTR { return APB2RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB2RSTR) StoreBits(mask, b APB2RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2RSTR) SetBits(mask APB2RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2RSTR) ClearBits(mask APB2RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2RSTR) Load() APB2RSTR                  { return APB2RSTR(r.U32.Load()) }
func (r *RAPB2RSTR) Store(b APB2RSTR)                { r.U32.Store(uint32(b)) }

type RMAPB2RSTR struct{ mmio.UM32 }

func (rm RMAPB2RSTR) Load() APB2RSTR   { return APB2RSTR(rm.UM32.Load()) }
func (rm RMAPB2RSTR) Store(b APB2RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SYSCFGRST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SYSCFGRST)}}
}

func (p *Periph) TIM1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM1RST)}}
}

func (p *Periph) SPI1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI1RST)}}
}

func (p *Periph) TIM8RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM8RST)}}
}

func (p *Periph) USART1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(USART1RST)}}
}

func (p *Periph) SPI4RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI4RST)}}
}

func (p *Periph) TIM15RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM15RST)}}
}

func (p *Periph) TIM16RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM16RST)}}
}

func (p *Periph) TIM17RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM17RST)}}
}

func (p *Periph) TIM20RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM20RST)}}
}

func (p *Periph) SAI1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI1RST)}}
}

func (p *Periph) HRTIM1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(HRTIM1RST)}}
}

type AHB1ENR uint32

type RAHB1ENR struct{ mmio.U32 }

func (r *RAHB1ENR) LoadBits(mask AHB1ENR) AHB1ENR { return AHB1ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB1ENR) StoreBits(mask, b AHB1ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1ENR) SetBits(mask AHB1ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1ENR) ClearBits(mask AHB1ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1ENR) Load() AHB1ENR                 { return AHB1ENR(r.U32.Load()) }
func (r *RAHB1ENR) Store(b AHB1ENR)               { r.U32.Store(uint32(b)) }

type RMAHB1ENR struct{ mmio.UM32 }

func (rm RMAHB1ENR) Load() AHB1ENR   { return AHB1ENR(rm.UM32.Load()) }
func (rm RMAHB1ENR) Store(b AHB1ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DMA1EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA1EN)}}
}

func (p *Periph) DMA2EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA2EN)}}
}

func (p *Periph) DMAMUXEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMAMUXEN)}}
}

func (p *Periph) CORDICEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(CORDICEN)}}
}

func (p *Periph) FMACEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(FMACEN)}}
}

func (p *Periph) FLITFEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(FLITFEN)}}
}

func (p *Periph) CRCEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(CRCEN)}}
}

type AHB2ENR uint32

type RAHB2ENR struct{ mmio.U32 }

func (r *RAHB2ENR) LoadBits(mask AHB2ENR) AHB2ENR { return AHB2ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB2ENR) StoreBits(mask, b AHB2ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2ENR) SetBits(mask AHB2ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2ENR) ClearBits(mask AHB2ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2ENR) Load() AHB2ENR                 { return AHB2ENR(r.U32.Load()) }
func (r *RAHB2ENR) Store(b AHB2ENR)               { r.U32.Store(uint32(b)) }

type RMAHB2ENR struct{ mmio.UM32 }

func (rm RMAHB2ENR) Load() AHB2ENR   { return AHB2ENR(rm.UM32.Load()) }
func (rm RMAHB2ENR) Store(b AHB2ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) GPIOAEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOAEN)}}
}

func (p *Periph) GPIOBEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOBEN)}}
}

func (p *Periph) GPIOCEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOCEN)}}
}

func (p *Periph) GPIODEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIODEN)}}
}

func (p *Periph) GPIOEEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOEEN)}}
}

func (p *Periph) GPIOFEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOFEN)}}
}

func (p *Periph) GPIOGEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOGEN)}}
}

func (p *Periph) ADC12EN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(ADC12EN)}}
}

func (p *Periph) ADC345EN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(ADC345EN)}}
}

func (p *Periph) DAC1() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(DAC1)}}
}

func (p *Periph) DAC2() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(DAC2)}}
}

func (p *Periph) DAC3() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(DAC3)}}
}

func (p *Periph) DAC4() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(DAC4)}}
}

func (p *Periph) AESEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(AESEN)}}
}

func (p *Periph) RNGEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(RNGEN)}}
}

type AHB3ENR uint32

type RAHB3ENR struct{ mmio.U32 }

func (r *RAHB3ENR) LoadBits(mask AHB3ENR) AHB3ENR { return AHB3ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB3ENR) StoreBits(mask, b AHB3ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3ENR) SetBits(mask AHB3ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3ENR) ClearBits(mask AHB3ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3ENR) Load() AHB3ENR                 { return AHB3ENR(r.U32.Load()) }
func (r *RAHB3ENR) Store(b AHB3ENR)               { r.U32.Store(uint32(b)) }

type RMAHB3ENR struct{ mmio.UM32 }

func (rm RMAHB3ENR) Load() AHB3ENR   { return AHB3ENR(rm.UM32.Load()) }
func (rm RMAHB3ENR) Store(b AHB3ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FMCEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(FMCEN)}}
}

func (p *Periph) QUADSPI1EN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(QUADSPI1EN)}}
}

type APB1ENR1 uint32

type RAPB1ENR1 struct{ mmio.U32 }

func (r *RAPB1ENR1) LoadBits(mask APB1ENR1) APB1ENR1 { return APB1ENR1(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB1ENR1) StoreBits(mask, b APB1ENR1)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1ENR1) SetBits(mask APB1ENR1)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1ENR1) ClearBits(mask APB1ENR1)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1ENR1) Load() APB1ENR1                  { return APB1ENR1(r.U32.Load()) }
func (r *RAPB1ENR1) Store(b APB1ENR1)                { r.U32.Store(uint32(b)) }

type RMAPB1ENR1 struct{ mmio.UM32 }

func (rm RMAPB1ENR1) Load() APB1ENR1   { return APB1ENR1(rm.UM32.Load()) }
func (rm RMAPB1ENR1) Store(b APB1ENR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM2EN)}}
}

func (p *Periph) TIM3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM3EN)}}
}

func (p *Periph) TIM4EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM4EN)}}
}

func (p *Periph) TIM5EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM5EN)}}
}

func (p *Periph) TIM6EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM6EN)}}
}

func (p *Periph) TIM7EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM7EN)}}
}

func (p *Periph) CRSEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(CRSEN)}}
}

func (p *Periph) RTCAPBEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(RTCAPBEN)}}
}

func (p *Periph) WWDGEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(WWDGEN)}}
}

func (p *Periph) SPI2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(SPI2EN)}}
}

func (p *Periph) SP3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(SP3EN)}}
}

func (p *Periph) USART2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(USART2EN)}}
}

func (p *Periph) USART3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(USART3EN)}}
}

func (p *Periph) UART4EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(UART4EN)}}
}

func (p *Periph) UART5EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(UART5EN)}}
}

func (p *Periph) I2C1EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C1EN)}}
}

func (p *Periph) I2C2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C2EN)}}
}

func (p *Periph) USBDEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(USBDEN)}}
}

func (p *Periph) FDCANEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(FDCANEN)}}
}

func (p *Periph) PWREN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(PWREN)}}
}

func (p *Periph) I2C3() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C3)}}
}

func (p *Periph) LPTIM1EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(LPTIM1EN)}}
}

type APB1ENR2 uint32

type RAPB1ENR2 struct{ mmio.U32 }

func (r *RAPB1ENR2) LoadBits(mask APB1ENR2) APB1ENR2 { return APB1ENR2(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB1ENR2) StoreBits(mask, b APB1ENR2)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1ENR2) SetBits(mask APB1ENR2)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1ENR2) ClearBits(mask APB1ENR2)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1ENR2) Load() APB1ENR2                  { return APB1ENR2(r.U32.Load()) }
func (r *RAPB1ENR2) Store(b APB1ENR2)                { r.U32.Store(uint32(b)) }

type RMAPB1ENR2 struct{ mmio.UM32 }

func (rm RMAPB1ENR2) Load() APB1ENR2   { return APB1ENR2(rm.UM32.Load()) }
func (rm RMAPB1ENR2) Store(b APB1ENR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LPUART1EN() RMAPB1ENR2 {
	return RMAPB1ENR2{mmio.UM32{&p.APB1ENR2.U32, uint32(LPUART1EN)}}
}

func (p *Periph) I2C4EN() RMAPB1ENR2 {
	return RMAPB1ENR2{mmio.UM32{&p.APB1ENR2.U32, uint32(I2C4EN)}}
}

func (p *Periph) USBPDEN() RMAPB1ENR2 {
	return RMAPB1ENR2{mmio.UM32{&p.APB1ENR2.U32, uint32(USBPDEN)}}
}

type APB2ENR uint32

type RAPB2ENR struct{ mmio.U32 }

func (r *RAPB2ENR) LoadBits(mask APB2ENR) APB2ENR { return APB2ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB2ENR) StoreBits(mask, b APB2ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2ENR) SetBits(mask APB2ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2ENR) ClearBits(mask APB2ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2ENR) Load() APB2ENR                 { return APB2ENR(r.U32.Load()) }
func (r *RAPB2ENR) Store(b APB2ENR)               { r.U32.Store(uint32(b)) }

type RMAPB2ENR struct{ mmio.UM32 }

func (rm RMAPB2ENR) Load() APB2ENR   { return APB2ENR(rm.UM32.Load()) }
func (rm RMAPB2ENR) Store(b APB2ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SYSCFGEN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SYSCFGEN)}}
}

func (p *Periph) TIM1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM1EN)}}
}

func (p *Periph) SPI1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SPI1EN)}}
}

func (p *Periph) TIM8EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM8EN)}}
}

func (p *Periph) USART1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(USART1EN)}}
}

func (p *Periph) SPI4EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SPI4EN)}}
}

func (p *Periph) TIM15EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM15EN)}}
}

func (p *Periph) TIM16EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM16EN)}}
}

func (p *Periph) TIM17EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM17EN)}}
}

func (p *Periph) TIM20EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM20EN)}}
}

func (p *Periph) SAI1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SAI1EN)}}
}

func (p *Periph) HRTIMEREN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(HRTIMEREN)}}
}

type AHB1SMENR uint32

type RAHB1SMENR struct{ mmio.U32 }

func (r *RAHB1SMENR) LoadBits(mask AHB1SMENR) AHB1SMENR {
	return AHB1SMENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB1SMENR) StoreBits(mask, b AHB1SMENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1SMENR) SetBits(mask AHB1SMENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1SMENR) ClearBits(mask AHB1SMENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1SMENR) Load() AHB1SMENR             { return AHB1SMENR(r.U32.Load()) }
func (r *RAHB1SMENR) Store(b AHB1SMENR)           { r.U32.Store(uint32(b)) }

type RMAHB1SMENR struct{ mmio.UM32 }

func (rm RMAHB1SMENR) Load() AHB1SMENR   { return AHB1SMENR(rm.UM32.Load()) }
func (rm RMAHB1SMENR) Store(b AHB1SMENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DMA1SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMA1SMEN)}}
}

func (p *Periph) DMA2SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMA2SMEN)}}
}

func (p *Periph) DMAMUX1SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMAMUX1SMEN)}}
}

func (p *Periph) CORDICSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(CORDICSMEN)}}
}

func (p *Periph) FMACSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(FMACSMEN)}}
}

func (p *Periph) FLASHSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(FLASHSMEN)}}
}

func (p *Periph) SRAM1SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(SRAM1SMEN)}}
}

func (p *Periph) CRCSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(CRCSMEN)}}
}

type AHB2SMENR uint32

type RAHB2SMENR struct{ mmio.U32 }

func (r *RAHB2SMENR) LoadBits(mask AHB2SMENR) AHB2SMENR {
	return AHB2SMENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB2SMENR) StoreBits(mask, b AHB2SMENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2SMENR) SetBits(mask AHB2SMENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2SMENR) ClearBits(mask AHB2SMENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2SMENR) Load() AHB2SMENR             { return AHB2SMENR(r.U32.Load()) }
func (r *RAHB2SMENR) Store(b AHB2SMENR)           { r.U32.Store(uint32(b)) }

type RMAHB2SMENR struct{ mmio.UM32 }

func (rm RMAHB2SMENR) Load() AHB2SMENR   { return AHB2SMENR(rm.UM32.Load()) }
func (rm RMAHB2SMENR) Store(b AHB2SMENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) GPIOASMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOASMEN)}}
}

func (p *Periph) GPIOBSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOBSMEN)}}
}

func (p *Periph) GPIOCSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOCSMEN)}}
}

func (p *Periph) GPIODSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIODSMEN)}}
}

func (p *Periph) GPIOESMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOESMEN)}}
}

func (p *Periph) GPIOFSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOFSMEN)}}
}

func (p *Periph) GPIOGSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOGSMEN)}}
}

func (p *Periph) SRAM2SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(SRAM2SMEN)}}
}

func (p *Periph) SRAM3SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(SRAM3SMEN)}}
}

func (p *Periph) AD12CSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(AD12CSMEN)}}
}

func (p *Periph) ADC345SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(ADC345SMEN)}}
}

func (p *Periph) DAC1SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(DAC1SMEN)}}
}

func (p *Periph) DAC2SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(DAC2SMEN)}}
}

func (p *Periph) DAC3SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(DAC3SMEN)}}
}

func (p *Periph) DAC4SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(DAC4SMEN)}}
}

func (p *Periph) CRYPTSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(CRYPTSMEN)}}
}

func (p *Periph) RNGSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(RNGSMEN)}}
}

type AHB3SMENR uint32

type RAHB3SMENR struct{ mmio.U32 }

func (r *RAHB3SMENR) LoadBits(mask AHB3SMENR) AHB3SMENR {
	return AHB3SMENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB3SMENR) StoreBits(mask, b AHB3SMENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3SMENR) SetBits(mask AHB3SMENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3SMENR) ClearBits(mask AHB3SMENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3SMENR) Load() AHB3SMENR             { return AHB3SMENR(r.U32.Load()) }
func (r *RAHB3SMENR) Store(b AHB3SMENR)           { r.U32.Store(uint32(b)) }

type RMAHB3SMENR struct{ mmio.UM32 }

func (rm RMAHB3SMENR) Load() AHB3SMENR   { return AHB3SMENR(rm.UM32.Load()) }
func (rm RMAHB3SMENR) Store(b AHB3SMENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FMCSMEN() RMAHB3SMENR {
	return RMAHB3SMENR{mmio.UM32{&p.AHB3SMENR.U32, uint32(FMCSMEN)}}
}

func (p *Periph) QUADSPI1SMEN() RMAHB3SMENR {
	return RMAHB3SMENR{mmio.UM32{&p.AHB3SMENR.U32, uint32(QUADSPI1SMEN)}}
}

type APB1SMENR1 uint32

type RAPB1SMENR1 struct{ mmio.U32 }

func (r *RAPB1SMENR1) LoadBits(mask APB1SMENR1) APB1SMENR1 {
	return APB1SMENR1(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1SMENR1) StoreBits(mask, b APB1SMENR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1SMENR1) SetBits(mask APB1SMENR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1SMENR1) ClearBits(mask APB1SMENR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1SMENR1) Load() APB1SMENR1             { return APB1SMENR1(r.U32.Load()) }
func (r *RAPB1SMENR1) Store(b APB1SMENR1)           { r.U32.Store(uint32(b)) }

type RMAPB1SMENR1 struct{ mmio.UM32 }

func (rm RMAPB1SMENR1) Load() APB1SMENR1   { return APB1SMENR1(rm.UM32.Load()) }
func (rm RMAPB1SMENR1) Store(b APB1SMENR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM2SMEN)}}
}

func (p *Periph) TIM3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM3SMEN)}}
}

func (p *Periph) TIM4SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM4SMEN)}}
}

func (p *Periph) TIM5SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM5SMEN)}}
}

func (p *Periph) TIM6SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM6SMEN)}}
}

func (p *Periph) TIM7SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM7SMEN)}}
}

func (p *Periph) CRSSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(CRSSMEN)}}
}

func (p *Periph) RTCAPBSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(RTCAPBSMEN)}}
}

func (p *Periph) WWDGSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(WWDGSMEN)}}
}

func (p *Periph) SPI2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(SPI2SMEN)}}
}

func (p *Periph) SP3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(SP3SMEN)}}
}

func (p *Periph) USART2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(USART2SMEN)}}
}

func (p *Periph) USART3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(USART3SMEN)}}
}

func (p *Periph) UART4SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(UART4SMEN)}}
}

func (p *Periph) UART5SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(UART5SMEN)}}
}

func (p *Periph) I2C1SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C1SMEN)}}
}

func (p *Periph) I2C2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C2SMEN)}}
}

func (p *Periph) I2C3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C3SMEN)}}
}

func (p *Periph) FDCANSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(FDCANSMEN)}}
}

func (p *Periph) PWRSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(PWRSMEN)}}
}

func (p *Periph) I2C3SMEN_3() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C3SMEN_3)}}
}

func (p *Periph) LPTIM1SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(LPTIM1SMEN)}}
}

type APB1SMENR2 uint32

type RAPB1SMENR2 struct{ mmio.U32 }

func (r *RAPB1SMENR2) LoadBits(mask APB1SMENR2) APB1SMENR2 {
	return APB1SMENR2(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1SMENR2) StoreBits(mask, b APB1SMENR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1SMENR2) SetBits(mask APB1SMENR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1SMENR2) ClearBits(mask APB1SMENR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1SMENR2) Load() APB1SMENR2             { return APB1SMENR2(r.U32.Load()) }
func (r *RAPB1SMENR2) Store(b APB1SMENR2)           { r.U32.Store(uint32(b)) }

type RMAPB1SMENR2 struct{ mmio.UM32 }

func (rm RMAPB1SMENR2) Load() APB1SMENR2   { return APB1SMENR2(rm.UM32.Load()) }
func (rm RMAPB1SMENR2) Store(b APB1SMENR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LPUART1SMEN() RMAPB1SMENR2 {
	return RMAPB1SMENR2{mmio.UM32{&p.APB1SMENR2.U32, uint32(LPUART1SMEN)}}
}

func (p *Periph) I2C4SMEN() RMAPB1SMENR2 {
	return RMAPB1SMENR2{mmio.UM32{&p.APB1SMENR2.U32, uint32(I2C4SMEN)}}
}

func (p *Periph) USBPDSMEN() RMAPB1SMENR2 {
	return RMAPB1SMENR2{mmio.UM32{&p.APB1SMENR2.U32, uint32(USBPDSMEN)}}
}

type APB2SMENR uint32

type RAPB2SMENR struct{ mmio.U32 }

func (r *RAPB2SMENR) LoadBits(mask APB2SMENR) APB2SMENR {
	return APB2SMENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB2SMENR) StoreBits(mask, b APB2SMENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2SMENR) SetBits(mask APB2SMENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2SMENR) ClearBits(mask APB2SMENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2SMENR) Load() APB2SMENR             { return APB2SMENR(r.U32.Load()) }
func (r *RAPB2SMENR) Store(b APB2SMENR)           { r.U32.Store(uint32(b)) }

type RMAPB2SMENR struct{ mmio.UM32 }

func (rm RMAPB2SMENR) Load() APB2SMENR   { return APB2SMENR(rm.UM32.Load()) }
func (rm RMAPB2SMENR) Store(b APB2SMENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SYSCFGSMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SYSCFGSMEN)}}
}

func (p *Periph) TIM1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM1SMEN)}}
}

func (p *Periph) SPI1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SPI1SMEN)}}
}

func (p *Periph) TIM8SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM8SMEN)}}
}

func (p *Periph) USART1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(USART1SMEN)}}
}

func (p *Periph) SPI4SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SPI4SMEN)}}
}

func (p *Periph) TIM15SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM15SMEN)}}
}

func (p *Periph) TIM16SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM16SMEN)}}
}

func (p *Periph) TIM17SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM17SMEN)}}
}

func (p *Periph) TIM20SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM20SMEN)}}
}

func (p *Periph) SAI1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SAI1SMEN)}}
}

func (p *Periph) HRTIMERSMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(HRTIMERSMEN)}}
}

type CCIPR1 uint32

type RCCIPR1 struct{ mmio.U32 }

func (r *RCCIPR1) LoadBits(mask CCIPR1) CCIPR1 { return CCIPR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCCIPR1) StoreBits(mask, b CCIPR1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCIPR1) SetBits(mask CCIPR1)         { r.U32.SetBits(uint32(mask)) }
func (r *RCCIPR1) ClearBits(mask CCIPR1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCCIPR1) Load() CCIPR1                { return CCIPR1(r.U32.Load()) }
func (r *RCCIPR1) Store(b CCIPR1)              { r.U32.Store(uint32(b)) }

type RMCCIPR1 struct{ mmio.UM32 }

func (rm RMCCIPR1) Load() CCIPR1   { return CCIPR1(rm.UM32.Load()) }
func (rm RMCCIPR1) Store(b CCIPR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) USART1SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(USART1SEL)}}
}

func (p *Periph) USART2SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(USART2SEL)}}
}

func (p *Periph) USART3SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(USART3SEL)}}
}

func (p *Periph) UART4SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(UART4SEL)}}
}

func (p *Periph) UART5SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(UART5SEL)}}
}

func (p *Periph) LPUART1SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(LPUART1SEL)}}
}

func (p *Periph) I2C1SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(I2C1SEL)}}
}

func (p *Periph) I2C2SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(I2C2SEL)}}
}

func (p *Periph) I2C3SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(I2C3SEL)}}
}

func (p *Periph) LPTIM1SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(LPTIM1SEL)}}
}

func (p *Periph) SAISEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(SAISEL)}}
}

func (p *Periph) SPISEL_() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(SPISEL_)}}
}

func (p *Periph) FDCANSEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(FDCANSEL)}}
}

func (p *Periph) CLK48SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(CLK48SEL)}}
}

func (p *Periph) ADCSEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(ADCSEL)}}
}

func (p *Periph) ADC345SEL() RMCCIPR1 {
	return RMCCIPR1{mmio.UM32{&p.CCIPR1.U32, uint32(ADC345SEL)}}
}

type BDCR uint32

type RBDCR struct{ mmio.U32 }

func (r *RBDCR) LoadBits(mask BDCR) BDCR { return BDCR(r.U32.LoadBits(uint32(mask))) }
func (r *RBDCR) StoreBits(mask, b BDCR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBDCR) SetBits(mask BDCR)       { r.U32.SetBits(uint32(mask)) }
func (r *RBDCR) ClearBits(mask BDCR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RBDCR) Load() BDCR              { return BDCR(r.U32.Load()) }
func (r *RBDCR) Store(b BDCR)            { r.U32.Store(uint32(b)) }

type RMBDCR struct{ mmio.UM32 }

func (rm RMBDCR) Load() BDCR   { return BDCR(rm.UM32.Load()) }
func (rm RMBDCR) Store(b BDCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSEON() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEON)}}
}

func (p *Periph) LSERDY() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSERDY)}}
}

func (p *Periph) LSEBYP() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEBYP)}}
}

func (p *Periph) LSEDRV() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEDRV)}}
}

func (p *Periph) LSECSSON() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSECSSON)}}
}

func (p *Periph) LSECSSD() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSECSSD)}}
}

func (p *Periph) RTCSEL() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(RTCSEL)}}
}

func (p *Periph) RTCEN() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(RTCEN)}}
}

func (p *Periph) VSWRST() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(VSWRST)}}
}

func (p *Periph) LSCCOEN() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSCCOEN)}}
}

func (p *Periph) LSCOSEL() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSCOSEL)}}
}

type CSR uint32

type RCSR struct{ mmio.U32 }

func (r *RCSR) LoadBits(mask CSR) CSR { return CSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSION() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LSION)}}
}

func (p *Periph) LSIRDY() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LSIRDY)}}
}

func (p *Periph) RMVF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(RMVF)}}
}

func (p *Periph) OBLRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(OBLRSTF)}}
}

func (p *Periph) PADRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(PADRSTF)}}
}

func (p *Periph) BORRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(BORRSTF)}}
}

func (p *Periph) SFTRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(SFTRSTF)}}
}

func (p *Periph) WDGRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(WDGRSTF)}}
}

func (p *Periph) WWDGRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(WWDGRSTF)}}
}

func (p *Periph) LPWRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LPWRSTF)}}
}

type CRRCR uint32

type RCRRCR struct{ mmio.U32 }

func (r *RCRRCR) LoadBits(mask CRRCR) CRRCR { return CRRCR(r.U32.LoadBits(uint32(mask))) }
func (r *RCRRCR) StoreBits(mask, b CRRCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCRRCR) SetBits(mask CRRCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCRRCR) ClearBits(mask CRRCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCRRCR) Load() CRRCR               { return CRRCR(r.U32.Load()) }
func (r *RCRRCR) Store(b CRRCR)             { r.U32.Store(uint32(b)) }

type RMCRRCR struct{ mmio.UM32 }

func (rm RMCRRCR) Load() CRRCR   { return CRRCR(rm.UM32.Load()) }
func (rm RMCRRCR) Store(b CRRCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RC48ON() RMCRRCR {
	return RMCRRCR{mmio.UM32{&p.CRRCR.U32, uint32(RC48ON)}}
}

func (p *Periph) RC48RDY() RMCRRCR {
	return RMCRRCR{mmio.UM32{&p.CRRCR.U32, uint32(RC48RDY)}}
}

func (p *Periph) RC48CAL() RMCRRCR {
	return RMCRRCR{mmio.UM32{&p.CRRCR.U32, uint32(RC48CAL)}}
}

type CCIPR2 uint32

type RCCIPR2 struct{ mmio.U32 }

func (r *RCCIPR2) LoadBits(mask CCIPR2) CCIPR2 { return CCIPR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCCIPR2) StoreBits(mask, b CCIPR2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCIPR2) SetBits(mask CCIPR2)         { r.U32.SetBits(uint32(mask)) }
func (r *RCCIPR2) ClearBits(mask CCIPR2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCCIPR2) Load() CCIPR2                { return CCIPR2(r.U32.Load()) }
func (r *RCCIPR2) Store(b CCIPR2)              { r.U32.Store(uint32(b)) }

type RMCCIPR2 struct{ mmio.UM32 }

func (rm RMCCIPR2) Load() CCIPR2   { return CCIPR2(rm.UM32.Load()) }
func (rm RMCCIPR2) Store(b CCIPR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) I2C4SEL() RMCCIPR2 {
	return RMCCIPR2{mmio.UM32{&p.CCIPR2.U32, uint32(I2C4SEL)}}
}

func (p *Periph) QUADSPISEL() RMCCIPR2 {
	return RMCCIPR2{mmio.UM32{&p.CCIPR2.U32, uint32(QUADSPISEL)}}
}
