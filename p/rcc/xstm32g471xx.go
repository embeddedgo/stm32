// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32g471xx

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         mmio.R32[CR]
	ICSCR      mmio.R32[ICSCR]
	CFGR       mmio.R32[CFGR]
	PLLSYSCFGR mmio.R32[PLLSYSCFGR]
	_          [2]uint32
	CIER       mmio.R32[CIER]
	CIFR       mmio.R32[CIFR]
	CICR       mmio.R32[CICR]
	_          uint32
	AHB1RSTR   mmio.R32[AHB1RSTR]
	AHB2RSTR   mmio.R32[AHB2RSTR]
	AHB3RSTR   mmio.R32[AHB3RSTR]
	_          uint32
	APB1RSTR1  mmio.R32[APB1RSTR1]
	APB1RSTR2  mmio.R32[APB1RSTR2]
	APB2RSTR   mmio.R32[APB2RSTR]
	_          uint32
	AHB1ENR    mmio.R32[AHB1ENR]
	AHB2ENR    mmio.R32[AHB2ENR]
	AHB3ENR    mmio.R32[AHB3ENR]
	_          uint32
	APB1ENR1   mmio.R32[APB1ENR1]
	APB1ENR2   mmio.R32[APB1ENR2]
	APB2ENR    mmio.R32[APB2ENR]
	_          uint32
	AHB1SMENR  mmio.R32[AHB1SMENR]
	AHB2SMENR  mmio.R32[AHB2SMENR]
	AHB3SMENR  mmio.R32[AHB3SMENR]
	_          uint32
	APB1SMENR1 mmio.R32[APB1SMENR1]
	APB1SMENR2 mmio.R32[APB1SMENR2]
	APB2SMENR  mmio.R32[APB2SMENR]
	_          uint32
	CCIPR1     mmio.R32[CCIPR1]
	_          uint32
	BDCR       mmio.R32[BDCR]
	CSR        mmio.R32[CSR]
	CRRCR      mmio.R32[CRRCR]
	CCIPR2     mmio.R32[CCIPR2]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func HSION_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSION} }
func HSIKERON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: HSIKERON} }
func HSIRDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSIRDY} }
func HSEON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{R: &p.CR, Mask: HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSEBYP} }
func HSECSSON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: HSECSSON} }
func PLLSYSON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLLSYSON} }
func PLLSYSRDY_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: PLLSYSRDY} }

type ICSCR uint32

func HSICAL0_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: HSICAL0} }
func HSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: HSITRIM} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SWS} }
func HPRE_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: HPRE} }
func PPRE1_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: PPRE1} }
func PPRE2_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: PPRE2} }
func MCOSEL_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCOSEL} }
func MCOPRE_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCOPRE} }

type PLLSYSCFGR uint32

func PLLSRC_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSRC}
}
func PLLSYSM_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSM}
}
func PLLSYSN_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSN}
}
func PLLPEN_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLPEN}
}
func PLLSYSP_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSP}
}
func PLLSYSQEN_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSQEN}
}
func PLLSYSQ_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSQ}
}
func PLLSYSREN_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSREN}
}
func PLLSYSR_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSR}
}
func PLLSYSPDIV_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{R: &p.PLLSYSCFGR, Mask: PLLSYSPDIV}
}

type CIER uint32

func LSIRDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSERDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSERDYIE} }
func PLLSYSRDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLLSYSRDYIE} }
func LSECSSIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSECSSIE} }
func RC48RDYIE_(p *Periph) mmio.RM32[CIER]   { return mmio.RM32[CIER]{R: &p.CIER, Mask: RC48RDYIE} }

type CIFR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSERDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSERDYF} }
func PLLSYSRDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLLSYSRDYF} }
func HSECSSF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSECSSF} }
func LSECSSF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSECSSF} }
func RC48RDYF_(p *Periph) mmio.RM32[CIFR]   { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: RC48RDYF} }

type CICR uint32

func LSIRDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSERDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSERDYC} }
func PLLSYSRDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLLSYSRDYC} }
func HSECSSC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSECSSC} }
func LSECSSC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSECSSC} }
func RC48RDYC_(p *Periph) mmio.RM32[CICR]   { return mmio.RM32[CICR]{R: &p.CICR, Mask: RC48RDYC} }

type AHB1RSTR uint32

func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA1RST}
}
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA2RST}
}
func DMAMUX1RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMAMUX1RST}
}
func CORDICRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: CORDICRST}
}
func MATRIXRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: MATRIXRST}
}
func FLITFRST__(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: FLITFRST_}
}
func CRCRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: CRCRST} }

type AHB2RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOARST}
}
func GPIOBRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOBRST}
}
func GPIOCRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOCRST}
}
func GPIODRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIODRST}
}
func GPIOERST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOERST}
}
func GPIOFRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOFRST}
}
func GPIOGRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: GPIOGRST}
}
func ADC12RST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: ADC12RST}
}
func ADC345RST__(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: ADC345RST_}
}
func DAC1RST__(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: DAC1RST_}
}
func DAC2RST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: DAC2RST}
}
func DAC3RST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: DAC3RST}
}
func DAC4RST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: DAC4RST}
}
func CRYPTRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: CRYPTRST}
}
func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: RNGRST} }

type AHB3RSTR uint32

func FMCRST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: FMCRST} }
func QUADSPI1RST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: QUADSPI1RST}
}

type APB1RSTR1 uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM2RST}
}
func TIM3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM3RST}
}
func TIM4RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM4RST}
}
func TIM5RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM5RST}
}
func TIM6RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM6RST}
}
func TIM7RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: TIM7RST}
}
func CRSRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: CRSRST}
}
func SPI2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: SPI2RST}
}
func SPI3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: SPI3RST}
}
func USART2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: USART2RST}
}
func USART3RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: USART3RST}
}
func UART4RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: UART4RST}
}
func UART5RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: UART5RST}
}
func I2C1RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: I2C1RST}
}
func I2C2RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: I2C2RST}
}
func USBDRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: USBDRST}
}
func FDCANRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: FDCANRST}
}
func PWRRST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: PWRRST}
}
func I2C3_(p *Periph) mmio.RM32[APB1RSTR1] { return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: I2C3} }
func LPTIM1RST_(p *Periph) mmio.RM32[APB1RSTR1] {
	return mmio.RM32[APB1RSTR1]{R: &p.APB1RSTR1, Mask: LPTIM1RST}
}

type APB1RSTR2 uint32

func LPUART1RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: LPUART1RST}
}
func I2C4RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: I2C4RST}
}
func USBPDRST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{R: &p.APB1RSTR2, Mask: USBPDRST}
}

type APB2RSTR uint32

func SYSCFGRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SYSCFGRST}
}
func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM1RST}
}
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI1RST}
}
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM8RST}
}
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: USART1RST}
}
func SPI4RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI4RST}
}
func TIM15RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM15RST}
}
func TIM16RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM16RST}
}
func TIM17RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM17RST}
}
func TIM20RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM20RST}
}
func SAI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SAI1RST}
}
func HRTIM1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: HRTIM1RST}
}

type AHB1ENR uint32

func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA2EN} }
func DMAMUXEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMAMUXEN}
}
func CORDICEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: CORDICEN}
}
func FMACEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: FMACEN} }
func FLITFEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: FLITFEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: CRCEN} }

type AHB2ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: GPIOGEN} }
func ADC12EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: ADC12EN} }
func ADC345EN_(p *Periph) mmio.RM32[AHB2ENR] {
	return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: ADC345EN}
}
func DAC1_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: DAC1} }
func DAC2_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: DAC2} }
func DAC3_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: DAC3} }
func DAC4_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: DAC4} }
func AESEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: AESEN} }
func RNGEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: RNGEN} }

type AHB3ENR uint32

func FMCEN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: FMCEN} }
func QUADSPI1EN_(p *Periph) mmio.RM32[AHB3ENR] {
	return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: QUADSPI1EN}
}

type APB1ENR1 uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: TIM7EN} }
func CRSEN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: CRSEN} }
func RTCAPBEN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: RTCAPBEN}
}
func WWDGEN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: WWDGEN} }
func SPI2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: SPI3EN} }
func USART2EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: USART2EN}
}
func USART3EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: USART3EN}
}
func UART4EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: UART4EN}
}
func UART5EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: UART5EN}
}
func I2C1EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: I2C2EN} }
func USBDEN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: USBDEN} }
func FDCANEN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: FDCANEN}
}
func PWREN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: PWREN} }
func I2C3_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: I2C3} }
func LPTIM1EN_(p *Periph) mmio.RM32[APB1ENR1] {
	return mmio.RM32[APB1ENR1]{R: &p.APB1ENR1, Mask: LPTIM1EN}
}

type APB1ENR2 uint32

func LPUART1EN_(p *Periph) mmio.RM32[APB1ENR2] {
	return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: LPUART1EN}
}
func I2C4EN_(p *Periph) mmio.RM32[APB1ENR2] { return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: I2C4EN} }
func USBPDEN_(p *Periph) mmio.RM32[APB1ENR2] {
	return mmio.RM32[APB1ENR2]{R: &p.APB1ENR2, Mask: USBPDEN}
}

type APB2ENR uint32

func SYSCFGEN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SYSCFGEN}
}
func TIM1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM1EN} }
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: USART1EN}
}
func SPI4EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI4EN} }
func TIM15EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM15EN} }
func TIM16EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM16EN} }
func TIM17EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM17EN} }
func TIM20EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM20EN} }
func SAI1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SAI1EN} }
func HRTIMEREN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: HRTIMEREN}
}

type AHB1SMENR uint32

func DMA1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: DMA1SMEN}
}
func DMA2SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: DMA2SMEN}
}
func DMAMUX1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: DMAMUX1SMEN}
}
func CORDICSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: CORDICSMEN}
}
func FMACSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: FMACSMEN}
}
func FLASHSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: FLASHSMEN}
}
func SRAM1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: SRAM1SMEN}
}
func CRCSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{R: &p.AHB1SMENR, Mask: CRCSMEN}
}

type AHB2SMENR uint32

func GPIOASMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOASMEN}
}
func GPIOBSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOBSMEN}
}
func GPIOCSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOCSMEN}
}
func GPIODSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIODSMEN}
}
func GPIOESMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOESMEN}
}
func GPIOFSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOFSMEN}
}
func GPIOGSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: GPIOGSMEN}
}
func SRAM2SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: SRAM2SMEN}
}
func SRAM3SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: SRAM3SMEN}
}
func AD12CSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: AD12CSMEN}
}
func ADC345SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: ADC345SMEN}
}
func DAC1SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: DAC1SMEN}
}
func DAC2SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: DAC2SMEN}
}
func DAC3SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: DAC3SMEN}
}
func DAC4SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: DAC4SMEN}
}
func CRYPTSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: CRYPTSMEN}
}
func RNGSMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{R: &p.AHB2SMENR, Mask: RNGSMEN}
}

type AHB3SMENR uint32

func FMCSMEN_(p *Periph) mmio.RM32[AHB3SMENR] {
	return mmio.RM32[AHB3SMENR]{R: &p.AHB3SMENR, Mask: FMCSMEN}
}
func QUADSPI1SMEN_(p *Periph) mmio.RM32[AHB3SMENR] {
	return mmio.RM32[AHB3SMENR]{R: &p.AHB3SMENR, Mask: QUADSPI1SMEN}
}

type APB1SMENR1 uint32

func TIM2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM2SMEN}
}
func TIM3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM3SMEN}
}
func TIM4SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM4SMEN}
}
func TIM5SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM5SMEN}
}
func TIM6SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM6SMEN}
}
func TIM7SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: TIM7SMEN}
}
func CRSSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: CRSSMEN}
}
func RTCAPBSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: RTCAPBSMEN}
}
func WWDGSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: WWDGSMEN}
}
func SPI2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: SPI2SMEN}
}
func SP3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: SP3SMEN}
}
func USART2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: USART2SMEN}
}
func USART3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: USART3SMEN}
}
func UART4SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: UART4SMEN}
}
func UART5SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: UART5SMEN}
}
func I2C1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C1SMEN}
}
func I2C2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C2SMEN}
}
func I2C3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C3SMEN}
}
func FDCANSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: FDCANSMEN}
}
func PWRSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: PWRSMEN}
}
func I2C3SMEN_3_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: I2C3SMEN_3}
}
func LPTIM1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{R: &p.APB1SMENR1, Mask: LPTIM1SMEN}
}

type APB1SMENR2 uint32

func LPUART1SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: LPUART1SMEN}
}
func I2C4SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: I2C4SMEN}
}
func USBPDSMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{R: &p.APB1SMENR2, Mask: USBPDSMEN}
}

type APB2SMENR uint32

func SYSCFGSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SYSCFGSMEN}
}
func TIM1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM1SMEN}
}
func SPI1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SPI1SMEN}
}
func TIM8SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM8SMEN}
}
func USART1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: USART1SMEN}
}
func SPI4SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SPI4SMEN}
}
func TIM15SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM15SMEN}
}
func TIM16SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM16SMEN}
}
func TIM17SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM17SMEN}
}
func TIM20SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: TIM20SMEN}
}
func SAI1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: SAI1SMEN}
}
func HRTIMERSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{R: &p.APB2SMENR, Mask: HRTIMERSMEN}
}

type CCIPR1 uint32

func USART1SEL_(p *Periph) mmio.RM32[CCIPR1] { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: USART1SEL} }
func USART2SEL_(p *Periph) mmio.RM32[CCIPR1] { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: USART2SEL} }
func USART3SEL_(p *Periph) mmio.RM32[CCIPR1] { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: USART3SEL} }
func UART4SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: UART4SEL} }
func UART5SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: UART5SEL} }
func LPUART1SEL_(p *Periph) mmio.RM32[CCIPR1] {
	return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: LPUART1SEL}
}
func I2C1SEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: I2C1SEL} }
func I2C2SEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: I2C2SEL} }
func I2C3SEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: I2C3SEL} }
func LPTIM1SEL_(p *Periph) mmio.RM32[CCIPR1] { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: LPTIM1SEL} }
func SAISEL_(p *Periph) mmio.RM32[CCIPR1]    { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: SAISEL} }
func SPISEL__(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: SPISEL_} }
func FDCANSEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: FDCANSEL} }
func CLK48SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: CLK48SEL} }
func ADCSEL_(p *Periph) mmio.RM32[CCIPR1]    { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: ADCSEL} }
func ADC345SEL_(p *Periph) mmio.RM32[CCIPR1] { return mmio.RM32[CCIPR1]{R: &p.CCIPR1, Mask: ADC345SEL} }

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEBYP} }
func LSEDRV_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEDRV} }
func LSECSSON_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSECSSON} }
func LSECSSD_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSECSSD} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCEN} }
func VSWRST_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: VSWRST} }
func LSCCOEN_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSCCOEN} }
func LSCOSEL_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSCOSEL} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]    { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR]   { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSIRDY} }
func RMVF_(p *Periph) mmio.RM32[CSR]     { return mmio.RM32[CSR]{R: &p.CSR, Mask: RMVF} }
func OBLRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: OBLRSTF} }
func PADRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: PADRSTF} }
func BORRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: BORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: SFTRSTF} }
func WDGRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: WDGRSTF} }
func WWDGRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{R: &p.CSR, Mask: WWDGRSTF} }
func LPWRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: LPWRSTF} }

type CRRCR uint32

func RC48ON_(p *Periph) mmio.RM32[CRRCR]  { return mmio.RM32[CRRCR]{R: &p.CRRCR, Mask: RC48ON} }
func RC48RDY_(p *Periph) mmio.RM32[CRRCR] { return mmio.RM32[CRRCR]{R: &p.CRRCR, Mask: RC48RDY} }
func RC48CAL_(p *Periph) mmio.RM32[CRRCR] { return mmio.RM32[CRRCR]{R: &p.CRRCR, Mask: RC48CAL} }

type CCIPR2 uint32

func I2C4SEL_(p *Periph) mmio.RM32[CCIPR2] { return mmio.RM32[CCIPR2]{R: &p.CCIPR2, Mask: I2C4SEL} }
func QUADSPISEL_(p *Periph) mmio.RM32[CCIPR2] {
	return mmio.RM32[CCIPR2]{R: &p.CCIPR2, Mask: QUADSPISEL}
}
