// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32g471xx

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         mmio.R32[CR]
	ICSCR      mmio.R32[ICSCR]
	CFGR       mmio.R32[CFGR]
	PLLSYSCFGR mmio.R32[PLLSYSCFGR]
	_          [2]uint32
	CIER       mmio.R32[CIER]
	CIFR       mmio.R32[CIFR]
	CICR       mmio.R32[CICR]
	_          uint32
	AHB1RSTR   mmio.R32[AHB1RSTR]
	AHB2RSTR   mmio.R32[AHB2RSTR]
	AHB3RSTR   mmio.R32[AHB3RSTR]
	_          uint32
	APB1RSTR1  mmio.R32[APB1RSTR1]
	APB1RSTR2  mmio.R32[APB1RSTR2]
	APB2RSTR   mmio.R32[APB2RSTR]
	_          uint32
	AHB1ENR    mmio.R32[AHB1ENR]
	AHB2ENR    mmio.R32[AHB2ENR]
	AHB3ENR    mmio.R32[AHB3ENR]
	_          uint32
	APB1ENR1   mmio.R32[APB1ENR1]
	APB1ENR2   mmio.R32[APB1ENR2]
	APB2ENR    mmio.R32[APB2ENR]
	_          uint32
	AHB1SMENR  mmio.R32[AHB1SMENR]
	AHB2SMENR  mmio.R32[AHB2SMENR]
	AHB3SMENR  mmio.R32[AHB3SMENR]
	_          uint32
	APB1SMENR1 mmio.R32[APB1SMENR1]
	APB1SMENR2 mmio.R32[APB1SMENR2]
	APB2SMENR  mmio.R32[APB2SMENR]
	_          uint32
	CCIPR1     mmio.R32[CCIPR1]
	_          uint32
	BDCR       mmio.R32[BDCR]
	CSR        mmio.R32[CSR]
	CRRCR      mmio.R32[CRRCR]
	CCIPR2     mmio.R32[CCIPR2]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func HSION_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, HSION} }
func HSIKERON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, HSIKERON} }
func HSIRDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSIRDY} }
func HSEON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSEBYP} }
func HSECSSON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, HSECSSON} }
func PLLSYSON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, PLLSYSON} }
func PLLSYSRDY_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, PLLSYSRDY} }

type ICSCR uint32

func HSICAL0_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{&p.ICSCR, HSICAL0} }
func HSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{&p.ICSCR, HSITRIM} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{&p.CFGR, SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{&p.CFGR, SWS} }
func HPRE_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{&p.CFGR, HPRE} }
func PPRE1_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{&p.CFGR, PPRE1} }
func PPRE2_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{&p.CFGR, PPRE2} }
func MCOSEL_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{&p.CFGR, MCOSEL} }
func MCOPRE_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{&p.CFGR, MCOPRE} }

type PLLSYSCFGR uint32

func PLLSRC_(p *Periph) mmio.RM32[PLLSYSCFGR]  { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSRC} }
func PLLSYSM_(p *Periph) mmio.RM32[PLLSYSCFGR] { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSM} }
func PLLSYSN_(p *Periph) mmio.RM32[PLLSYSCFGR] { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSN} }
func PLLPEN_(p *Periph) mmio.RM32[PLLSYSCFGR]  { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLPEN} }
func PLLSYSP_(p *Periph) mmio.RM32[PLLSYSCFGR] { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSP} }
func PLLSYSQEN_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSQEN}
}
func PLLSYSQ_(p *Periph) mmio.RM32[PLLSYSCFGR] { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSQ} }
func PLLSYSREN_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSREN}
}
func PLLSYSR_(p *Periph) mmio.RM32[PLLSYSCFGR] { return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSR} }
func PLLSYSPDIV_(p *Periph) mmio.RM32[PLLSYSCFGR] {
	return mmio.RM32[PLLSYSCFGR]{&p.PLLSYSCFGR, PLLSYSPDIV}
}

type CIER uint32

func LSIRDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{&p.CIER, LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{&p.CIER, LSERDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{&p.CIER, HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{&p.CIER, HSERDYIE} }
func PLLSYSRDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{&p.CIER, PLLSYSRDYIE} }
func LSECSSIE_(p *Periph) mmio.RM32[CIER]    { return mmio.RM32[CIER]{&p.CIER, LSECSSIE} }
func RC48RDYIE_(p *Periph) mmio.RM32[CIER]   { return mmio.RM32[CIER]{&p.CIER, RC48RDYIE} }

type CIFR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{&p.CIFR, LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{&p.CIFR, LSERDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{&p.CIFR, HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{&p.CIFR, HSERDYF} }
func PLLSYSRDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{&p.CIFR, PLLSYSRDYF} }
func HSECSSF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{&p.CIFR, HSECSSF} }
func LSECSSF_(p *Periph) mmio.RM32[CIFR]    { return mmio.RM32[CIFR]{&p.CIFR, LSECSSF} }
func RC48RDYF_(p *Periph) mmio.RM32[CIFR]   { return mmio.RM32[CIFR]{&p.CIFR, RC48RDYF} }

type CICR uint32

func LSIRDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{&p.CICR, LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{&p.CICR, LSERDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{&p.CICR, HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{&p.CICR, HSERDYC} }
func PLLSYSRDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, PLLSYSRDYC} }
func HSECSSC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{&p.CICR, HSECSSC} }
func LSECSSC_(p *Periph) mmio.RM32[CICR]    { return mmio.RM32[CICR]{&p.CICR, LSECSSC} }
func RC48RDYC_(p *Periph) mmio.RM32[CICR]   { return mmio.RM32[CICR]{&p.CICR, RC48RDYC} }

type AHB1RSTR uint32

func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR]    { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMA1RST} }
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR]    { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMA2RST} }
func DMAMUX1RST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMAMUX1RST} }
func CORDICRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, CORDICRST} }
func MATRIXRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, MATRIXRST} }
func FLITFRST__(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, FLITFRST_} }
func CRCRST_(p *Periph) mmio.RM32[AHB1RSTR]     { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, CRCRST} }

type AHB2RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIOARST} }
func GPIOBRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIOBRST} }
func GPIOCRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIOCRST} }
func GPIODRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIODRST} }
func GPIOERST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIOERST} }
func GPIOFRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIOFRST} }
func GPIOGRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, GPIOGRST} }
func ADC12RST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, ADC12RST} }
func ADC345RST__(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, ADC345RST_} }
func DAC1RST__(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, DAC1RST_} }
func DAC2RST_(p *Periph) mmio.RM32[AHB2RSTR]    { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, DAC2RST} }
func DAC3RST_(p *Periph) mmio.RM32[AHB2RSTR]    { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, DAC3RST} }
func DAC4RST_(p *Periph) mmio.RM32[AHB2RSTR]    { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, DAC4RST} }
func CRYPTRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, CRYPTRST} }
func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR]     { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, RNGRST} }

type AHB3RSTR uint32

func FMCRST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, FMCRST} }
func QUADSPI1RST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, QUADSPI1RST}
}

type APB1RSTR1 uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, TIM2RST} }
func TIM3RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, TIM3RST} }
func TIM4RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, TIM4RST} }
func TIM5RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, TIM5RST} }
func TIM6RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, TIM6RST} }
func TIM7RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, TIM7RST} }
func CRSRST_(p *Periph) mmio.RM32[APB1RSTR1]    { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, CRSRST} }
func SPI2RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, SPI2RST} }
func SPI3RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, SPI3RST} }
func USART2RST_(p *Periph) mmio.RM32[APB1RSTR1] { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, USART2RST} }
func USART3RST_(p *Periph) mmio.RM32[APB1RSTR1] { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, USART3RST} }
func UART4RST_(p *Periph) mmio.RM32[APB1RSTR1]  { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, UART4RST} }
func UART5RST_(p *Periph) mmio.RM32[APB1RSTR1]  { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, UART5RST} }
func I2C1RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, I2C1RST} }
func I2C2RST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, I2C2RST} }
func USBDRST_(p *Periph) mmio.RM32[APB1RSTR1]   { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, USBDRST} }
func FDCANRST_(p *Periph) mmio.RM32[APB1RSTR1]  { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, FDCANRST} }
func PWRRST_(p *Periph) mmio.RM32[APB1RSTR1]    { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, PWRRST} }
func I2C3_(p *Periph) mmio.RM32[APB1RSTR1]      { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, I2C3} }
func LPTIM1RST_(p *Periph) mmio.RM32[APB1RSTR1] { return mmio.RM32[APB1RSTR1]{&p.APB1RSTR1, LPTIM1RST} }

type APB1RSTR2 uint32

func LPUART1RST_(p *Periph) mmio.RM32[APB1RSTR2] {
	return mmio.RM32[APB1RSTR2]{&p.APB1RSTR2, LPUART1RST}
}
func I2C4RST_(p *Periph) mmio.RM32[APB1RSTR2]  { return mmio.RM32[APB1RSTR2]{&p.APB1RSTR2, I2C4RST} }
func USBPDRST_(p *Periph) mmio.RM32[APB1RSTR2] { return mmio.RM32[APB1RSTR2]{&p.APB1RSTR2, USBPDRST} }

type APB2RSTR uint32

func SYSCFGRST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SYSCFGRST} }
func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM1RST} }
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI1RST} }
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM8RST} }
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, USART1RST} }
func SPI4RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI4RST} }
func TIM15RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM15RST} }
func TIM16RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM16RST} }
func TIM17RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM17RST} }
func TIM20RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM20RST} }
func SAI1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SAI1RST} }
func HRTIM1RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, HRTIM1RST} }

type AHB1ENR uint32

func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMA2EN} }
func DMAMUXEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMAMUXEN} }
func CORDICEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, CORDICEN} }
func FMACEN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, FMACEN} }
func FLITFEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, FLITFEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB1ENR]    { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, CRCEN} }

type AHB2ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, GPIOGEN} }
func ADC12EN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, ADC12EN} }
func ADC345EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, ADC345EN} }
func DAC1_(p *Periph) mmio.RM32[AHB2ENR]     { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, DAC1} }
func DAC2_(p *Periph) mmio.RM32[AHB2ENR]     { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, DAC2} }
func DAC3_(p *Periph) mmio.RM32[AHB2ENR]     { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, DAC3} }
func DAC4_(p *Periph) mmio.RM32[AHB2ENR]     { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, DAC4} }
func AESEN_(p *Periph) mmio.RM32[AHB2ENR]    { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, AESEN} }
func RNGEN_(p *Periph) mmio.RM32[AHB2ENR]    { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, RNGEN} }

type AHB3ENR uint32

func FMCEN_(p *Periph) mmio.RM32[AHB3ENR]      { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, FMCEN} }
func QUADSPI1EN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, QUADSPI1EN} }

type APB1ENR1 uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, TIM7EN} }
func CRSEN_(p *Periph) mmio.RM32[APB1ENR1]    { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, CRSEN} }
func RTCAPBEN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, RTCAPBEN} }
func WWDGEN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, WWDGEN} }
func SPI2EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, SPI3EN} }
func USART2EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, USART2EN} }
func USART3EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, USART3EN} }
func UART4EN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, UART4EN} }
func UART5EN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, UART5EN} }
func I2C1EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, I2C2EN} }
func USBDEN_(p *Periph) mmio.RM32[APB1ENR1]   { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, USBDEN} }
func FDCANEN_(p *Periph) mmio.RM32[APB1ENR1]  { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, FDCANEN} }
func PWREN_(p *Periph) mmio.RM32[APB1ENR1]    { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, PWREN} }
func I2C3_(p *Periph) mmio.RM32[APB1ENR1]     { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, I2C3} }
func LPTIM1EN_(p *Periph) mmio.RM32[APB1ENR1] { return mmio.RM32[APB1ENR1]{&p.APB1ENR1, LPTIM1EN} }

type APB1ENR2 uint32

func LPUART1EN_(p *Periph) mmio.RM32[APB1ENR2] { return mmio.RM32[APB1ENR2]{&p.APB1ENR2, LPUART1EN} }
func I2C4EN_(p *Periph) mmio.RM32[APB1ENR2]    { return mmio.RM32[APB1ENR2]{&p.APB1ENR2, I2C4EN} }
func USBPDEN_(p *Periph) mmio.RM32[APB1ENR2]   { return mmio.RM32[APB1ENR2]{&p.APB1ENR2, USBPDEN} }

type APB2ENR uint32

func SYSCFGEN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, SYSCFGEN} }
func TIM1EN_(p *Periph) mmio.RM32[APB2ENR]    { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM1EN} }
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR]    { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR]    { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, USART1EN} }
func SPI4EN_(p *Periph) mmio.RM32[APB2ENR]    { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI4EN} }
func TIM15EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM15EN} }
func TIM16EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM16EN} }
func TIM17EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM17EN} }
func TIM20EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM20EN} }
func SAI1EN_(p *Periph) mmio.RM32[APB2ENR]    { return mmio.RM32[APB2ENR]{&p.APB2ENR, SAI1EN} }
func HRTIMEREN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, HRTIMEREN} }

type AHB1SMENR uint32

func DMA1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] { return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, DMA1SMEN} }
func DMA2SMEN_(p *Periph) mmio.RM32[AHB1SMENR] { return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, DMA2SMEN} }
func DMAMUX1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, DMAMUX1SMEN}
}
func CORDICSMEN_(p *Periph) mmio.RM32[AHB1SMENR] {
	return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, CORDICSMEN}
}
func FMACSMEN_(p *Periph) mmio.RM32[AHB1SMENR]  { return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, FMACSMEN} }
func FLASHSMEN_(p *Periph) mmio.RM32[AHB1SMENR] { return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, FLASHSMEN} }
func SRAM1SMEN_(p *Periph) mmio.RM32[AHB1SMENR] { return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, SRAM1SMEN} }
func CRCSMEN_(p *Periph) mmio.RM32[AHB1SMENR]   { return mmio.RM32[AHB1SMENR]{&p.AHB1SMENR, CRCSMEN} }

type AHB2SMENR uint32

func GPIOASMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIOASMEN} }
func GPIOBSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIOBSMEN} }
func GPIOCSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIOCSMEN} }
func GPIODSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIODSMEN} }
func GPIOESMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIOESMEN} }
func GPIOFSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIOFSMEN} }
func GPIOGSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, GPIOGSMEN} }
func SRAM2SMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, SRAM2SMEN} }
func SRAM3SMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, SRAM3SMEN} }
func AD12CSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, AD12CSMEN} }
func ADC345SMEN_(p *Periph) mmio.RM32[AHB2SMENR] {
	return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, ADC345SMEN}
}
func DAC1SMEN_(p *Periph) mmio.RM32[AHB2SMENR]  { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, DAC1SMEN} }
func DAC2SMEN_(p *Periph) mmio.RM32[AHB2SMENR]  { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, DAC2SMEN} }
func DAC3SMEN_(p *Periph) mmio.RM32[AHB2SMENR]  { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, DAC3SMEN} }
func DAC4SMEN_(p *Periph) mmio.RM32[AHB2SMENR]  { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, DAC4SMEN} }
func CRYPTSMEN_(p *Periph) mmio.RM32[AHB2SMENR] { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, CRYPTSMEN} }
func RNGSMEN_(p *Periph) mmio.RM32[AHB2SMENR]   { return mmio.RM32[AHB2SMENR]{&p.AHB2SMENR, RNGSMEN} }

type AHB3SMENR uint32

func FMCSMEN_(p *Periph) mmio.RM32[AHB3SMENR] { return mmio.RM32[AHB3SMENR]{&p.AHB3SMENR, FMCSMEN} }
func QUADSPI1SMEN_(p *Periph) mmio.RM32[AHB3SMENR] {
	return mmio.RM32[AHB3SMENR]{&p.AHB3SMENR, QUADSPI1SMEN}
}

type APB1SMENR1 uint32

func TIM2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, TIM2SMEN}
}
func TIM3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, TIM3SMEN}
}
func TIM4SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, TIM4SMEN}
}
func TIM5SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, TIM5SMEN}
}
func TIM6SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, TIM6SMEN}
}
func TIM7SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, TIM7SMEN}
}
func CRSSMEN_(p *Periph) mmio.RM32[APB1SMENR1] { return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, CRSSMEN} }
func RTCAPBSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, RTCAPBSMEN}
}
func WWDGSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, WWDGSMEN}
}
func SPI2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, SPI2SMEN}
}
func SP3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] { return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, SP3SMEN} }
func USART2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, USART2SMEN}
}
func USART3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, USART3SMEN}
}
func UART4SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, UART4SMEN}
}
func UART5SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, UART5SMEN}
}
func I2C1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, I2C1SMEN}
}
func I2C2SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, I2C2SMEN}
}
func I2C3SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, I2C3SMEN}
}
func FDCANSMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, FDCANSMEN}
}
func PWRSMEN_(p *Periph) mmio.RM32[APB1SMENR1] { return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, PWRSMEN} }
func I2C3SMEN_3_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, I2C3SMEN_3}
}
func LPTIM1SMEN_(p *Periph) mmio.RM32[APB1SMENR1] {
	return mmio.RM32[APB1SMENR1]{&p.APB1SMENR1, LPTIM1SMEN}
}

type APB1SMENR2 uint32

func LPUART1SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{&p.APB1SMENR2, LPUART1SMEN}
}
func I2C4SMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{&p.APB1SMENR2, I2C4SMEN}
}
func USBPDSMEN_(p *Periph) mmio.RM32[APB1SMENR2] {
	return mmio.RM32[APB1SMENR2]{&p.APB1SMENR2, USBPDSMEN}
}

type APB2SMENR uint32

func SYSCFGSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{&p.APB2SMENR, SYSCFGSMEN}
}
func TIM1SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, TIM1SMEN} }
func SPI1SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, SPI1SMEN} }
func TIM8SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, TIM8SMEN} }
func USART1SMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{&p.APB2SMENR, USART1SMEN}
}
func SPI4SMEN_(p *Periph) mmio.RM32[APB2SMENR]  { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, SPI4SMEN} }
func TIM15SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, TIM15SMEN} }
func TIM16SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, TIM16SMEN} }
func TIM17SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, TIM17SMEN} }
func TIM20SMEN_(p *Periph) mmio.RM32[APB2SMENR] { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, TIM20SMEN} }
func SAI1SMEN_(p *Periph) mmio.RM32[APB2SMENR]  { return mmio.RM32[APB2SMENR]{&p.APB2SMENR, SAI1SMEN} }
func HRTIMERSMEN_(p *Periph) mmio.RM32[APB2SMENR] {
	return mmio.RM32[APB2SMENR]{&p.APB2SMENR, HRTIMERSMEN}
}

type CCIPR1 uint32

func USART1SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{&p.CCIPR1, USART1SEL} }
func USART2SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{&p.CCIPR1, USART2SEL} }
func USART3SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{&p.CCIPR1, USART3SEL} }
func UART4SEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{&p.CCIPR1, UART4SEL} }
func UART5SEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{&p.CCIPR1, UART5SEL} }
func LPUART1SEL_(p *Periph) mmio.RM32[CCIPR1] { return mmio.RM32[CCIPR1]{&p.CCIPR1, LPUART1SEL} }
func I2C1SEL_(p *Periph) mmio.RM32[CCIPR1]    { return mmio.RM32[CCIPR1]{&p.CCIPR1, I2C1SEL} }
func I2C2SEL_(p *Periph) mmio.RM32[CCIPR1]    { return mmio.RM32[CCIPR1]{&p.CCIPR1, I2C2SEL} }
func I2C3SEL_(p *Periph) mmio.RM32[CCIPR1]    { return mmio.RM32[CCIPR1]{&p.CCIPR1, I2C3SEL} }
func LPTIM1SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{&p.CCIPR1, LPTIM1SEL} }
func SAISEL_(p *Periph) mmio.RM32[CCIPR1]     { return mmio.RM32[CCIPR1]{&p.CCIPR1, SAISEL} }
func SPISEL__(p *Periph) mmio.RM32[CCIPR1]    { return mmio.RM32[CCIPR1]{&p.CCIPR1, SPISEL_} }
func FDCANSEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{&p.CCIPR1, FDCANSEL} }
func CLK48SEL_(p *Periph) mmio.RM32[CCIPR1]   { return mmio.RM32[CCIPR1]{&p.CCIPR1, CLK48SEL} }
func ADCSEL_(p *Periph) mmio.RM32[CCIPR1]     { return mmio.RM32[CCIPR1]{&p.CCIPR1, ADCSEL} }
func ADC345SEL_(p *Periph) mmio.RM32[CCIPR1]  { return mmio.RM32[CCIPR1]{&p.CCIPR1, ADC345SEL} }

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{&p.BDCR, LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, LSEBYP} }
func LSEDRV_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, LSEDRV} }
func LSECSSON_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{&p.BDCR, LSECSSON} }
func LSECSSD_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, LSECSSD} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{&p.BDCR, RTCEN} }
func VSWRST_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, VSWRST} }
func LSCCOEN_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, LSCCOEN} }
func LSCOSEL_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, LSCOSEL} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]    { return mmio.RM32[CSR]{&p.CSR, LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR]   { return mmio.RM32[CSR]{&p.CSR, LSIRDY} }
func RMVF_(p *Periph) mmio.RM32[CSR]     { return mmio.RM32[CSR]{&p.CSR, RMVF} }
func OBLRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, OBLRSTF} }
func PADRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, PADRSTF} }
func BORRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, BORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SFTRSTF} }
func WDGRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, WDGRSTF} }
func WWDGRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, WWDGRSTF} }
func LPWRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, LPWRSTF} }

type CRRCR uint32

func RC48ON_(p *Periph) mmio.RM32[CRRCR]  { return mmio.RM32[CRRCR]{&p.CRRCR, RC48ON} }
func RC48RDY_(p *Periph) mmio.RM32[CRRCR] { return mmio.RM32[CRRCR]{&p.CRRCR, RC48RDY} }
func RC48CAL_(p *Periph) mmio.RM32[CRRCR] { return mmio.RM32[CRRCR]{&p.CRRCR, RC48CAL} }

type CCIPR2 uint32

func I2C4SEL_(p *Periph) mmio.RM32[CCIPR2]    { return mmio.RM32[CCIPR2]{&p.CCIPR2, I2C4SEL} }
func QUADSPISEL_(p *Periph) mmio.RM32[CCIPR2] { return mmio.RM32[CCIPR2]{&p.CCIPR2, QUADSPISEL} }
