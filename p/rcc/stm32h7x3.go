// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32h7x3

// Package rcc provides access to the registers of the RCC peripheral.
//
// Instances:
//
//	RCC  RCC_BASE  -  RCC  Reset and clock control
//
// Registers:
//
//	0x000 32  CR          clock control register
//	0x004 32  ICSCR       RCC Internal Clock Source Calibration Register
//	0x008 32  CRRCR       RCC Clock Recovery RC Register
//	0x010 32  CFGR        RCC Clock Configuration Register
//	0x018 32  D1CFGR      RCC Domain 1 Clock Configuration Register
//	0x01C 32  D2CFGR      RCC Domain 2 Clock Configuration Register
//	0x020 32  D3CFGR      RCC Domain 3 Clock Configuration Register
//	0x028 32  PLLCKSELR   RCC PLLs Clock Source Selection Register
//	0x02C 32  PLLCFGR     RCC PLLs Configuration Register
//	0x030 32  PLL1DIVR    RCC PLL1 Dividers Configuration Register
//	0x034 32  PLL1FRACR   RCC PLL1 Fractional Divider Register
//	0x038 32  PLL2DIVR    RCC PLL2 Dividers Configuration Register
//	0x03C 32  PLL2FRACR   RCC PLL2 Fractional Divider Register
//	0x040 32  PLL3DIVR    RCC PLL3 Dividers Configuration Register
//	0x044 32  PLL3FRACR   RCC PLL3 Fractional Divider Register
//	0x04C 32  D1CCIPR     RCC Domain 1 Kernel Clock Configuration Register
//	0x050 32  D2CCIP1R    RCC Domain 2 Kernel Clock Configuration Register
//	0x054 32  D2CCIP2R    RCC Domain 2 Kernel Clock Configuration Register
//	0x058 32  D3CCIPR     RCC Domain 3 Kernel Clock Configuration Register
//	0x060 32  CIER        RCC Clock Source Interrupt Enable Register
//	0x064 32  CIFR        RCC Clock Source Interrupt Flag Register
//	0x068 32  CICR        RCC Clock Source Interrupt Clear Register
//	0x070 32  BDCR        RCC Backup Domain Control Register
//	0x074 32  CSR         RCC Clock Control and Status Register
//	0x07C 32  AHB3RSTR    RCC AHB3 Reset Register
//	0x080 32  AHB1RSTR    RCC AHB1 Peripheral Reset Register
//	0x084 32  AHB2RSTR    RCC AHB2 Peripheral Reset Register
//	0x088 32  AHB4RSTR    RCC AHB4 Peripheral Reset Register
//	0x08C 32  APB3RSTR    RCC APB3 Peripheral Reset Register
//	0x090 32  APB1LRSTR   RCC APB1 Peripheral Reset Register
//	0x094 32  APB1HRSTR   RCC APB1 Peripheral Reset Register
//	0x098 32  APB2RSTR    RCC APB2 Peripheral Reset Register
//	0x09C 32  APB4RSTR    RCC APB4 Peripheral Reset Register
//	0x0A0 32  GCR         RCC Global Control Register
//	0x0A8 32  D3AMR       RCC D3 Autonomous mode Register
//	0x0D0 32  RSR         RCC Reset Status Register
//	0x0D4 32  AHB3ENR     RCC AHB3 Clock Register
//	0x0D8 32  AHB1ENR     RCC AHB1 Clock Register
//	0x0DC 32  AHB2ENR     RCC AHB2 Clock Register
//	0x0E0 32  AHB4ENR     RCC AHB4 Clock Register
//	0x0E4 32  APB3ENR     RCC APB3 Clock Register
//	0x0E8 32  APB1LENR    RCC APB1 Clock Register
//	0x0EC 32  APB1HENR    RCC APB1 Clock Register
//	0x0F0 32  APB2ENR     RCC APB2 Clock Register
//	0x0F4 32  APB4ENR     RCC APB4 Clock Register
//	0x0FC 32  AHB3LPENR   RCC AHB3 Sleep Clock Register
//	0x100 32  AHB1LPENR   RCC AHB1 Sleep Clock Register
//	0x104 32  AHB2LPENR   RCC AHB2 Sleep Clock Register
//	0x108 32  AHB4LPENR   RCC AHB4 Sleep Clock Register
//	0x10C 32  APB3LPENR   RCC APB3 Sleep Clock Register
//	0x110 32  APB1LLPENR  RCC APB1 Low Sleep Clock Register
//	0x114 32  APB1HLPENR  RCC APB1 High Sleep Clock Register
//	0x118 32  APB2LPENR   RCC APB2 Sleep Clock Register
//	0x11C 32  APB4LPENR   RCC APB4 Sleep Clock Register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package rcc

const (
	HSION    CR = 0x01 << 0  //+ Internal high-speed clock enable
	HSIKERON CR = 0x01 << 1  //+ High Speed Internal clock enable in Stop mode
	HSIRDY   CR = 0x01 << 2  //+ HSI clock ready flag
	HSIDIV   CR = 0x03 << 3  //+ HSI clock divider
	HSIDIVF  CR = 0x01 << 5  //+ HSI divider flag
	CSION    CR = 0x01 << 7  //+ CSI clock enable
	CSIRDY   CR = 0x01 << 8  //+ CSI clock ready flag
	CSIKERON CR = 0x01 << 9  //+ CSI clock enable in Stop mode
	RC48ON   CR = 0x01 << 12 //+ RC48 clock enable
	RC48RDY  CR = 0x01 << 13 //+ RC48 clock ready flag
	D1CKRDY  CR = 0x01 << 14 //+ D1 domain clocks ready flag
	D2CKRDY  CR = 0x01 << 15 //+ D2 domain clocks ready flag
	HSEON    CR = 0x01 << 16 //+ HSE clock enable
	HSERDY   CR = 0x01 << 17 //+ HSE clock ready flag
	HSEBYP   CR = 0x01 << 18 //+ HSE clock bypass
	HSECSSON CR = 0x01 << 19 //+ HSE Clock Security System enable
	PLL1ON   CR = 0x01 << 24 //+ PLL1 enable
	PLL1RDY  CR = 0x01 << 25 //+ PLL1 clock ready flag
	PLL2ON   CR = 0x01 << 26 //+ PLL2 enable
	PLL2RDY  CR = 0x01 << 27 //+ PLL2 clock ready flag
	PLL3ON   CR = 0x01 << 28 //+ PLL3 enable
	PLL3RDY  CR = 0x01 << 29 //+ PLL3 clock ready flag
)

const (
	HSIONn    = 0
	HSIKERONn = 1
	HSIRDYn   = 2
	HSIDIVn   = 3
	HSIDIVFn  = 5
	CSIONn    = 7
	CSIRDYn   = 8
	CSIKERONn = 9
	RC48ONn   = 12
	RC48RDYn  = 13
	D1CKRDYn  = 14
	D2CKRDYn  = 15
	HSEONn    = 16
	HSERDYn   = 17
	HSEBYPn   = 18
	HSECSSONn = 19
	PLL1ONn   = 24
	PLL1RDYn  = 25
	PLL2ONn   = 26
	PLL2RDYn  = 27
	PLL3ONn   = 28
	PLL3RDYn  = 29
)

const (
	HSICAL  ICSCR = 0xFFF << 0 //+ HSI clock calibration
	HSITRIM ICSCR = 0x3F << 12 //+ HSI clock trimming
	CSICAL  ICSCR = 0xFF << 18 //+ CSI clock calibration
	CSITRIM ICSCR = 0x1F << 26 //+ CSI clock trimming
)

const (
	HSICALn  = 0
	HSITRIMn = 12
	CSICALn  = 18
	CSITRIMn = 26
)

const (
	RC48CAL CRRCR = 0x3FF << 0 //+ Internal RC 48 MHz clock calibration
)

const (
	RC48CALn = 0
)

const (
	SW          CFGR = 0x07 << 0  //+ System clock switch
	SW_HSI      CFGR = 0x00 << 0  //  HSI oscillator selected as system clock
	SW_CSI      CFGR = 0x01 << 0  //  CSI oscillator selected as system clock
	SW_HSE      CFGR = 0x02 << 0  //  HSE oscillator selected as system clock
	SW_PLL1     CFGR = 0x03 << 0  //  PLL1 selected as system clock
	SWS         CFGR = 0x07 << 3  //+ System clock switch status
	SWS_HSI     CFGR = 0x00 << 3  //  HSI oscillator used as system clock
	SWS_CSI     CFGR = 0x01 << 3  //  CSI oscillator used as system clock
	SWS_HSE     CFGR = 0x02 << 3  //  HSE oscillator used as system clock
	SWS_PLL1    CFGR = 0x03 << 3  //  PLL1 used as system clock
	STOPWUCK    CFGR = 0x01 << 6  //+ System clock selection after a wake up from system Stop
	STOPKERWUCK CFGR = 0x01 << 7  //+ Kernel clock selection after a wake up from system Stop
	RTCPRE      CFGR = 0x3F << 8  //+ HSE division factor for RTC clock
	HRTIMSEL    CFGR = 0x01 << 14 //+ High Resolution Timer clock prescaler selection
	TIMPRE      CFGR = 0x01 << 15 //+ Timers clocks prescaler selection
	MCO1PRE     CFGR = 0x0F << 18 //+ MCO1 prescaler
	MCO1SEL     CFGR = 0x07 << 22 //+ Micro-controller clock output 1
	MCO2PRE     CFGR = 0x0F << 25 //+ MCO2 prescaler
	MCO2SEL     CFGR = 0x07 << 29 //+ Micro-controller clock output 2
)

const (
	SWn          = 0
	SWSn         = 3
	STOPWUCKn    = 6
	STOPKERWUCKn = 7
	RTCPREn      = 8
	HRTIMSELn    = 14
	TIMPREn      = 15
	MCO1PREn     = 18
	MCO1SELn     = 22
	MCO2PREn     = 25
	MCO2SELn     = 29
)

const (
	HPRE   D1CFGR = 0x0F << 0 //+ D1 domain AHB prescaler
	D1PPRE D1CFGR = 0x07 << 4 //+ D1 domain APB3 prescaler
	D1CPRE D1CFGR = 0x0F << 8 //+ D1 domain Core prescaler
)

const (
	HPREn   = 0
	D1PPREn = 4
	D1CPREn = 8
)

const (
	D2PPRE1 D2CFGR = 0x07 << 4 //+ D2 domain APB1 prescaler
	D2PPRE2 D2CFGR = 0x07 << 8 //+ D2 domain APB2 prescaler
)

const (
	D2PPRE1n = 4
	D2PPRE2n = 8
)

const (
	D3PPRE D3CFGR = 0x07 << 4 //+ D3 domain APB4 prescaler
)

const (
	D3PPREn = 4
)

const (
	PLLSRC      PLLCKSELR = 0x03 << 0  //+ DIVMx and PLLs clock source selection
	PLLSRC_HSI  PLLCKSELR = 0x00 << 0  //  HSI selected as PLL clock
	PLLSRC_CSI  PLLCKSELR = 0x01 << 0  //  CSI selected as PLL clock
	PLLSRC_HSE  PLLCKSELR = 0x02 << 0  //  HSE selected as PLL clock
	PLLSRC_NONE PLLCKSELR = 0x03 << 0  //  No clock to DIVMx divider and PLLs
	DIVM1       PLLCKSELR = 0x3F << 4  //+ Prescaler for PLL1
	DIVM2       PLLCKSELR = 0x3F << 12 //+ Prescaler for PLL2
	DIVM3       PLLCKSELR = 0x3F << 20 //+ Prescaler for PLL3
)

const (
	PLLSRCn = 0
	DIVM1n  = 4
	DIVM2n  = 12
	DIVM3n  = 20
)

const (
	PLL1FRACEN PLLCFGR = 0x01 << 0  //+ PLL1 fractional latch enable
	PLL1VCOSEL PLLCFGR = 0x01 << 1  //+ PLL1 VCO selection
	PLL1RGE    PLLCFGR = 0x03 << 2  //+ PLL1 input frequency range
	PLL2FRACEN PLLCFGR = 0x01 << 4  //+ PLL2 fractional latch enable
	PLL2VCOSEL PLLCFGR = 0x01 << 5  //+ PLL2 VCO selection
	PLL2RGE    PLLCFGR = 0x03 << 6  //+ PLL2 input frequency range
	PLL3FRACEN PLLCFGR = 0x01 << 8  //+ PLL3 fractional latch enable
	PLL3VCOSEL PLLCFGR = 0x01 << 9  //+ PLL3 VCO selection
	PLL3RGE    PLLCFGR = 0x03 << 10 //+ PLL3 input frequency range
	DIVP1EN    PLLCFGR = 0x01 << 16 //+ PLL1 DIVP divider output enable
	DIVQ1EN    PLLCFGR = 0x01 << 17 //+ PLL1 DIVQ divider output enable
	DIVR1EN    PLLCFGR = 0x01 << 18 //+ PLL1 DIVR divider output enable
	DIVP2EN    PLLCFGR = 0x01 << 19 //+ PLL2 DIVP divider output enable
	DIVQ2EN    PLLCFGR = 0x01 << 20 //+ PLL2 DIVQ divider output enable
	DIVR2EN    PLLCFGR = 0x01 << 21 //+ PLL2 DIVR divider output enable
	DIVP3EN    PLLCFGR = 0x01 << 22 //+ PLL3 DIVP divider output enable
	DIVQ3EN    PLLCFGR = 0x01 << 23 //+ PLL3 DIVQ divider output enable
	DIVR3EN    PLLCFGR = 0x01 << 24 //+ PLL3 DIVR divider output enable
)

const (
	PLL1FRACENn = 0
	PLL1VCOSELn = 1
	PLL1RGEn    = 2
	PLL2FRACENn = 4
	PLL2VCOSELn = 5
	PLL2RGEn    = 6
	PLL3FRACENn = 8
	PLL3VCOSELn = 9
	PLL3RGEn    = 10
	DIVP1ENn    = 16
	DIVQ1ENn    = 17
	DIVR1ENn    = 18
	DIVP2ENn    = 19
	DIVQ2ENn    = 20
	DIVR2ENn    = 21
	DIVP3ENn    = 22
	DIVQ3ENn    = 23
	DIVR3ENn    = 24
)

const (
	DIVN1 PLL1DIVR = 0x1FF << 0 //+ Multiplication factor for PLL1 VCO
	DIVP1 PLL1DIVR = 0x7F << 9  //+ PLL1 DIVP division factor
	DIVQ1 PLL1DIVR = 0x7F << 16 //+ PLL1 DIVQ division factor
	DIVR1 PLL1DIVR = 0x7F << 24 //+ PLL1 DIVR division factor
)

const (
	DIVN1n = 0
	DIVP1n = 9
	DIVQ1n = 16
	DIVR1n = 24
)

const (
	FRACN1 PLL1FRACR = 0x1FFF << 3 //+ Fractional part of the multiplication factor for PLL1 VCO
)

const (
	FRACN1n = 3
)

const (
	DIVN2  PLL2DIVR = 0x1FF << 0 //+ Multiplication factor for PLL1 VCO
	DIVP12 PLL2DIVR = 0x7F << 9  //+ PLL1 DIVP division factor
	DIVQ2  PLL2DIVR = 0x7F << 16 //+ PLL1 DIVQ division factor
	DIVR2  PLL2DIVR = 0x7F << 24 //+ PLL1 DIVR division factor
)

const (
	DIVN2n  = 0
	DIVP12n = 9
	DIVQ2n  = 16
	DIVR2n  = 24
)

const (
	FRACN2 PLL2FRACR = 0x1FFF << 3 //+ Fractional part of the multiplication factor for PLL VCO
)

const (
	FRACN2n = 3
)

const (
	DIVN3 PLL3DIVR = 0x1FF << 0 //+ Multiplication factor for PLL1 VCO
	DIVP3 PLL3DIVR = 0x7F << 9  //+ PLL DIVP division factor
	DIVQ3 PLL3DIVR = 0x7F << 16 //+ PLL DIVQ division factor
	DIVR3 PLL3DIVR = 0x7F << 24 //+ PLL DIVR division factor
)

const (
	DIVN3n = 0
	DIVP3n = 9
	DIVQ3n = 16
	DIVR3n = 24
)

const (
	FRACN3 PLL3FRACR = 0x1FFF << 3 //+ Fractional part of the multiplication factor for PLL3 VCO
)

const (
	FRACN3n = 3
)

const (
	FMCSRC   D1CCIPR = 0x03 << 0  //+ FMC kernel clock source selection
	QSPISRC  D1CCIPR = 0x03 << 4  //+ QUADSPI kernel clock source selection
	SDMMCSRC D1CCIPR = 0x01 << 16 //+ SDMMC kernel clock source selection
	CKPERSRC D1CCIPR = 0x03 << 28 //+ per_ck clock source selection
)

const (
	FMCSRCn   = 0
	QSPISRCn  = 4
	SDMMCSRCn = 16
	CKPERSRCn = 28
)

const (
	SAI1SRC   D2CCIP1R = 0x07 << 0  //+ SAI1 and DFSDM1 kernel Aclk clock source selection
	SAI23SRC  D2CCIP1R = 0x07 << 6  //+ SAI2 and SAI3 kernel clock source selection
	SPI123SRC D2CCIP1R = 0x07 << 12 //+ SPI/I2S1,2 and 3 kernel clock source selection
	SPI45SRC  D2CCIP1R = 0x07 << 16 //+ SPI4 and 5 kernel clock source selection
	SPDIFSRC  D2CCIP1R = 0x03 << 20 //+ SPDIFRX kernel clock source selection
	DFSDM1SRC D2CCIP1R = 0x01 << 24 //+ DFSDM1 kernel Clk clock source selection
	FDCANSRC  D2CCIP1R = 0x03 << 28 //+ FDCAN kernel clock source selection
	SWPSRC    D2CCIP1R = 0x01 << 31 //+ SWPMI kernel clock source selection
)

const (
	SAI1SRCn   = 0
	SAI23SRCn  = 6
	SPI123SRCn = 12
	SPI45SRCn  = 16
	SPDIFSRCn  = 20
	DFSDM1SRCn = 24
	FDCANSRCn  = 28
	SWPSRCn    = 31
)

const (
	USART234578SRC D2CCIP2R = 0x07 << 0  //+ USART2/3, UART4,5, 7/8 (APB1) kernel clock source selection
	USART16SRC     D2CCIP2R = 0x07 << 3  //+ USART1 and 6 kernel clock source selection
	RNGSRC         D2CCIP2R = 0x03 << 8  //+ RNG kernel clock source selection
	I2C123SRC      D2CCIP2R = 0x03 << 12 //+ I2C1,2,3 kernel clock source selection
	USBSRC         D2CCIP2R = 0x03 << 20 //+ USBOTG 1 and 2 kernel clock source selection
	CECSRC         D2CCIP2R = 0x03 << 22 //+ HDMI-CEC kernel clock source selection
	LPTIM1SRC      D2CCIP2R = 0x07 << 28 //+ LPTIM1 kernel clock source selection
)

const (
	USART234578SRCn = 0
	USART16SRCn     = 3
	RNGSRCn         = 8
	I2C123SRCn      = 12
	USBSRCn         = 20
	CECSRCn         = 22
	LPTIM1SRCn      = 28
)

const (
	LPUART1SRC  D3CCIPR = 0x07 << 0  //+ LPUART1 kernel clock source selection
	I2C4SRC     D3CCIPR = 0x03 << 8  //+ I2C4 kernel clock source selection
	LPTIM2SRC   D3CCIPR = 0x07 << 10 //+ LPTIM2 kernel clock source selection
	LPTIM345SRC D3CCIPR = 0x07 << 13 //+ LPTIM3,4,5 kernel clock source selection
	ADCSRC      D3CCIPR = 0x03 << 16 //+ SAR ADC kernel clock source selection
	SAI4ASRC    D3CCIPR = 0x07 << 21 //+ Sub-Block A of SAI4 kernel clock source selection
	SAI4BSRC    D3CCIPR = 0x07 << 24 //+ Sub-Block B of SAI4 kernel clock source selection
	SPI6SRC     D3CCIPR = 0x07 << 28 //+ SPI6 kernel clock source selection
)

const (
	LPUART1SRCn  = 0
	I2C4SRCn     = 8
	LPTIM2SRCn   = 10
	LPTIM345SRCn = 13
	ADCSRCn      = 16
	SAI4ASRCn    = 21
	SAI4BSRCn    = 24
	SPI6SRCn     = 28
)

const (
	LSIRDYIE  CIER = 0x01 << 0 //+ LSI ready Interrupt Enable
	LSERDYIE  CIER = 0x01 << 1 //+ LSE ready Interrupt Enable
	HSIRDYIE  CIER = 0x01 << 2 //+ HSI ready Interrupt Enable
	HSERDYIE  CIER = 0x01 << 3 //+ HSE ready Interrupt Enable
	CSIRDYIE  CIER = 0x01 << 4 //+ CSI ready Interrupt Enable
	RC48RDYIE CIER = 0x01 << 5 //+ RC48 ready Interrupt Enable
	PLL1RDYIE CIER = 0x01 << 6 //+ PLL1 ready Interrupt Enable
	PLL2RDYIE CIER = 0x01 << 7 //+ PLL2 ready Interrupt Enable
	PLL3RDYIE CIER = 0x01 << 8 //+ PLL3 ready Interrupt Enable
	LSECSSIE  CIER = 0x01 << 9 //+ LSE clock security system Interrupt Enable
)

const (
	LSIRDYIEn  = 0
	LSERDYIEn  = 1
	HSIRDYIEn  = 2
	HSERDYIEn  = 3
	CSIRDYIEn  = 4
	RC48RDYIEn = 5
	PLL1RDYIEn = 6
	PLL2RDYIEn = 7
	PLL3RDYIEn = 8
	LSECSSIEn  = 9
)

const (
	LSIRDYF  CIFR = 0x01 << 0  //+ LSI ready Interrupt Flag
	LSERDYF  CIFR = 0x01 << 1  //+ LSE ready Interrupt Flag
	HSIRDYF  CIFR = 0x01 << 2  //+ HSI ready Interrupt Flag
	HSERDYF  CIFR = 0x01 << 3  //+ HSE ready Interrupt Flag
	CSIRDYF  CIFR = 0x01 << 4  //+ CSI ready Interrupt Flag
	RC48RDYF CIFR = 0x01 << 5  //+ RC48 ready Interrupt Flag
	PLL1RDYF CIFR = 0x01 << 6  //+ PLL1 ready Interrupt Flag
	PLL2RDYF CIFR = 0x01 << 7  //+ PLL2 ready Interrupt Flag
	PLL3RDYF CIFR = 0x01 << 8  //+ PLL3 ready Interrupt Flag
	LSECSSF  CIFR = 0x01 << 9  //+ LSE clock security system Interrupt Flag
	HSECSSF  CIFR = 0x01 << 10 //+ HSE clock security system Interrupt Flag
)

const (
	LSIRDYFn  = 0
	LSERDYFn  = 1
	HSIRDYFn  = 2
	HSERDYFn  = 3
	CSIRDYFn  = 4
	RC48RDYFn = 5
	PLL1RDYFn = 6
	PLL2RDYFn = 7
	PLL3RDYFn = 8
	LSECSSFn  = 9
	HSECSSFn  = 10
)

const (
	LSIRDYC                   CICR = 0x01 << 0  //+ LSI ready Interrupt Clear
	LSERDYC                   CICR = 0x01 << 1  //+ LSE ready Interrupt Clear
	HSIRDYC                   CICR = 0x01 << 2  //+ HSI ready Interrupt Clear
	HSERDYC                   CICR = 0x01 << 3  //+ HSE ready Interrupt Clear
	HSE_ready_Interrupt_Clear CICR = 0x01 << 4  //+ CSI ready Interrupt Clear
	RC48RDYC                  CICR = 0x01 << 5  //+ RC48 ready Interrupt Clear
	PLL1RDYC                  CICR = 0x01 << 6  //+ PLL1 ready Interrupt Clear
	PLL2RDYC                  CICR = 0x01 << 7  //+ PLL2 ready Interrupt Clear
	PLL3RDYC                  CICR = 0x01 << 8  //+ PLL3 ready Interrupt Clear
	LSECSSC                   CICR = 0x01 << 9  //+ LSE clock security system Interrupt Clear
	HSECSSC                   CICR = 0x01 << 10 //+ HSE clock security system Interrupt Clear
)

const (
	LSIRDYCn                   = 0
	LSERDYCn                   = 1
	HSIRDYCn                   = 2
	HSERDYCn                   = 3
	HSE_ready_Interrupt_Clearn = 4
	RC48RDYCn                  = 5
	PLL1RDYCn                  = 6
	PLL2RDYCn                  = 7
	PLL3RDYCn                  = 8
	LSECSSCn                   = 9
	HSECSSCn                   = 10
)

const (
	LSEON       BDCR = 0x01 << 0  //+ LSE oscillator enabled
	LSERDY      BDCR = 0x01 << 1  //+ LSE oscillator ready
	LSEBYP      BDCR = 0x01 << 2  //+ LSE oscillator bypass
	LSEDRV      BDCR = 0x03 << 3  //+ LSE oscillator driving capability
	LSECSSON    BDCR = 0x01 << 5  //+ LSE clock security system enable
	LSECSSD     BDCR = 0x01 << 6  //+ LSE clock security system failure detection
	RTCSEL      BDCR = 0x03 << 8  //+ RTC clock source selection
	RTCSEL_NONE BDCR = 0x00 << 8  //  no clock
	RTCSEL_LSE  BDCR = 0x01 << 8  //  LSE oscillator clock used as RTC clock
	RTCSEL_LSI  BDCR = 0x02 << 8  //  LSI oscillator clock used as RTC clock
	RTCSEL_HSE  BDCR = 0x03 << 8  //  HSE clock divided by RTCPRE value is used as RTC clock
	RTCEN       BDCR = 0x01 << 15 //+ RTC clock enable
	VSWRST      BDCR = 0x01 << 16 //+ VSwitch domain software reset
)

const (
	LSEONn    = 0
	LSERDYn   = 1
	LSEBYPn   = 2
	LSEDRVn   = 3
	LSECSSONn = 5
	LSECSSDn  = 6
	RTCSELn   = 8
	RTCENn    = 15
	VSWRSTn   = 16
)

const (
	LSION  CSR = 0x01 << 0 //+ LSI oscillator enable
	LSIRDY CSR = 0x01 << 1 //+ LSI oscillator ready
)

const (
	LSIONn  = 0
	LSIRDYn = 1
)

const (
	MDMARST   AHB3RSTR = 0x01 << 0  //+ MDMA block reset
	DMA2DRST  AHB3RSTR = 0x01 << 4  //+ DMA2D block reset
	JPGDECRST AHB3RSTR = 0x01 << 5  //+ JPGDEC block reset
	FMCRST    AHB3RSTR = 0x01 << 12 //+ FMC block reset
	QSPIRST   AHB3RSTR = 0x01 << 14 //+ QUADSPI and QUADSPI delay block reset
	SDMMC1RST AHB3RSTR = 0x01 << 16 //+ SDMMC1 and SDMMC1 delay block reset
	CPURST    AHB3RSTR = 0x01 << 31 //+ CPU reset
)

const (
	MDMARSTn   = 0
	DMA2DRSTn  = 4
	JPGDECRSTn = 5
	FMCRSTn    = 12
	QSPIRSTn   = 14
	SDMMC1RSTn = 16
	CPURSTn    = 31
)

const (
	DMA1RST    AHB1RSTR = 0x01 << 0  //+ DMA1 block reset
	DMA2RST    AHB1RSTR = 0x01 << 1  //+ DMA2 block reset
	ADC12RST   AHB1RSTR = 0x01 << 5  //+ ADC1&2 block reset
	ETH1MACRST AHB1RSTR = 0x01 << 15 //+ ETH1MAC block reset
	USB1OTGRST AHB1RSTR = 0x01 << 25 //+ USB1OTG block reset
	USB2OTGRST AHB1RSTR = 0x01 << 27 //+ USB2OTG block reset
)

const (
	DMA1RSTn    = 0
	DMA2RSTn    = 1
	ADC12RSTn   = 5
	ETH1MACRSTn = 15
	USB1OTGRSTn = 25
	USB2OTGRSTn = 27
)

const (
	CAMITFRST AHB2RSTR = 0x01 << 0 //+ CAMITF block reset
	CRYPTRST  AHB2RSTR = 0x01 << 4 //+ Cryptography block reset
	HASHRST   AHB2RSTR = 0x01 << 5 //+ Hash block reset
	RNGRST    AHB2RSTR = 0x01 << 6 //+ Random Number Generator block reset
	SDMMC2RST AHB2RSTR = 0x01 << 9 //+ SDMMC2 and SDMMC2 Delay block reset
)

const (
	CAMITFRSTn = 0
	CRYPTRSTn  = 4
	HASHRSTn   = 5
	RNGRSTn    = 6
	SDMMC2RSTn = 9
)

const (
	GPIOARST AHB4RSTR = 0x01 << 0  //+ GPIO block reset
	GPIOBRST AHB4RSTR = 0x01 << 1  //+ GPIO block reset
	GPIOCRST AHB4RSTR = 0x01 << 2  //+ GPIO block reset
	GPIODRST AHB4RSTR = 0x01 << 3  //+ GPIO block reset
	GPIOERST AHB4RSTR = 0x01 << 4  //+ GPIO block reset
	GPIOFRST AHB4RSTR = 0x01 << 5  //+ GPIO block reset
	GPIOGRST AHB4RSTR = 0x01 << 6  //+ GPIO block reset
	GPIOHRST AHB4RSTR = 0x01 << 7  //+ GPIO block reset
	GPIOIRST AHB4RSTR = 0x01 << 8  //+ GPIO block reset
	GPIOJRST AHB4RSTR = 0x01 << 9  //+ GPIO block reset
	GPIOKRST AHB4RSTR = 0x01 << 10 //+ GPIO block reset
	CRCRST   AHB4RSTR = 0x01 << 19 //+ CRC block reset
	BDMARST  AHB4RSTR = 0x01 << 21 //+ BDMA block reset
	ADC3RST  AHB4RSTR = 0x01 << 24 //+ ADC3 block reset
	HSEMRST  AHB4RSTR = 0x01 << 25 //+ HSEM block reset
)

const (
	GPIOARSTn = 0
	GPIOBRSTn = 1
	GPIOCRSTn = 2
	GPIODRSTn = 3
	GPIOERSTn = 4
	GPIOFRSTn = 5
	GPIOGRSTn = 6
	GPIOHRSTn = 7
	GPIOIRSTn = 8
	GPIOJRSTn = 9
	GPIOKRSTn = 10
	CRCRSTn   = 19
	BDMARSTn  = 21
	ADC3RSTn  = 24
	HSEMRSTn  = 25
)

const (
	LTDCRST APB3RSTR = 0x01 << 3 //+ LTDC block reset
)

const (
	LTDCRSTn = 3
)

const (
	TIM2RST    APB1LRSTR = 0x01 << 0  //+ TIM block reset
	TIM3RST    APB1LRSTR = 0x01 << 1  //+ TIM block reset
	TIM4RST    APB1LRSTR = 0x01 << 2  //+ TIM block reset
	TIM5RST    APB1LRSTR = 0x01 << 3  //+ TIM block reset
	TIM6RST    APB1LRSTR = 0x01 << 4  //+ TIM block reset
	TIM7RST    APB1LRSTR = 0x01 << 5  //+ TIM block reset
	TIM12RST   APB1LRSTR = 0x01 << 6  //+ TIM block reset
	TIM13RST   APB1LRSTR = 0x01 << 7  //+ TIM block reset
	TIM14RST   APB1LRSTR = 0x01 << 8  //+ TIM block reset
	LPTIM1RST  APB1LRSTR = 0x01 << 9  //+ TIM block reset
	SPI2RST    APB1LRSTR = 0x01 << 14 //+ SPI2 block reset
	SPI3RST    APB1LRSTR = 0x01 << 15 //+ SPI3 block reset
	SPDIFRXRST APB1LRSTR = 0x01 << 16 //+ SPDIFRX block reset
	USART2RST  APB1LRSTR = 0x01 << 17 //+ USART2 block reset
	USART3RST  APB1LRSTR = 0x01 << 18 //+ USART3 block reset
	UART4RST   APB1LRSTR = 0x01 << 19 //+ UART4 block reset
	UART5RST   APB1LRSTR = 0x01 << 20 //+ UART5 block reset
	I2C1RST    APB1LRSTR = 0x01 << 21 //+ I2C1 block reset
	I2C2RST    APB1LRSTR = 0x01 << 22 //+ I2C2 block reset
	I2C3RST    APB1LRSTR = 0x01 << 23 //+ I2C3 block reset
	CECRST     APB1LRSTR = 0x01 << 27 //+ HDMI-CEC block reset
	DAC12RST   APB1LRSTR = 0x01 << 29 //+ DAC1 and 2 Blocks Reset
	USART7RST  APB1LRSTR = 0x01 << 30 //+ USART7 block reset
	USART8RST  APB1LRSTR = 0x01 << 31 //+ USART8 block reset
)

const (
	TIM2RSTn    = 0
	TIM3RSTn    = 1
	TIM4RSTn    = 2
	TIM5RSTn    = 3
	TIM6RSTn    = 4
	TIM7RSTn    = 5
	TIM12RSTn   = 6
	TIM13RSTn   = 7
	TIM14RSTn   = 8
	LPTIM1RSTn  = 9
	SPI2RSTn    = 14
	SPI3RSTn    = 15
	SPDIFRXRSTn = 16
	USART2RSTn  = 17
	USART3RSTn  = 18
	UART4RSTn   = 19
	UART5RSTn   = 20
	I2C1RSTn    = 21
	I2C2RSTn    = 22
	I2C3RSTn    = 23
	CECRSTn     = 27
	DAC12RSTn   = 29
	USART7RSTn  = 30
	USART8RSTn  = 31
)

const (
	CRSRST   APB1HRSTR = 0x01 << 1 //+ Clock Recovery System reset
	SWPRST   APB1HRSTR = 0x01 << 2 //+ SWPMI block reset
	OPAMPRST APB1HRSTR = 0x01 << 4 //+ OPAMP block reset
	MDIOSRST APB1HRSTR = 0x01 << 5 //+ MDIOS block reset
	FDCANRST APB1HRSTR = 0x01 << 8 //+ FDCAN block reset
)

const (
	CRSRSTn   = 1
	SWPRSTn   = 2
	OPAMPRSTn = 4
	MDIOSRSTn = 5
	FDCANRSTn = 8
)

const (
	TIM1RST   APB2RSTR = 0x01 << 0  //+ TIM1 block reset
	TIM8RST   APB2RSTR = 0x01 << 1  //+ TIM8 block reset
	USART1RST APB2RSTR = 0x01 << 4  //+ USART1 block reset
	USART6RST APB2RSTR = 0x01 << 5  //+ USART6 block reset
	SPI1RST   APB2RSTR = 0x01 << 12 //+ SPI1 block reset
	SPI4RST   APB2RSTR = 0x01 << 13 //+ SPI4 block reset
	TIM15RST  APB2RSTR = 0x01 << 16 //+ TIM15 block reset
	TIM16RST  APB2RSTR = 0x01 << 17 //+ TIM16 block reset
	TIM17RST  APB2RSTR = 0x01 << 18 //+ TIM17 block reset
	SPI5RST   APB2RSTR = 0x01 << 20 //+ SPI5 block reset
	SAI1RST   APB2RSTR = 0x01 << 22 //+ SAI1 block reset
	SAI2RST   APB2RSTR = 0x01 << 23 //+ SAI2 block reset
	SAI3RST   APB2RSTR = 0x01 << 24 //+ SAI3 block reset
	DFSDM1RST APB2RSTR = 0x01 << 28 //+ DFSDM1 block reset
	HRTIMRST  APB2RSTR = 0x01 << 29 //+ HRTIM block reset
)

const (
	TIM1RSTn   = 0
	TIM8RSTn   = 1
	USART1RSTn = 4
	USART6RSTn = 5
	SPI1RSTn   = 12
	SPI4RSTn   = 13
	TIM15RSTn  = 16
	TIM16RSTn  = 17
	TIM17RSTn  = 18
	SPI5RSTn   = 20
	SAI1RSTn   = 22
	SAI2RSTn   = 23
	SAI3RSTn   = 24
	DFSDM1RSTn = 28
	HRTIMRSTn  = 29
)

const (
	SYSCFGRST  APB4RSTR = 0x01 << 1  //+ SYSCFG block reset
	LPUART1RST APB4RSTR = 0x01 << 3  //+ LPUART1 block reset
	SPI6RST    APB4RSTR = 0x01 << 5  //+ SPI6 block reset
	I2C4RST    APB4RSTR = 0x01 << 7  //+ I2C4 block reset
	LPTIM2RST  APB4RSTR = 0x01 << 9  //+ LPTIM2 block reset
	LPTIM3RST  APB4RSTR = 0x01 << 10 //+ LPTIM3 block reset
	LPTIM4RST  APB4RSTR = 0x01 << 11 //+ LPTIM4 block reset
	LPTIM5RST  APB4RSTR = 0x01 << 12 //+ LPTIM5 block reset
	COMP12RST  APB4RSTR = 0x01 << 14 //+ COMP12 Blocks Reset
	VREFRST    APB4RSTR = 0x01 << 15 //+ VREF block reset
	SAI4RST    APB4RSTR = 0x01 << 21 //+ SAI4 block reset
)

const (
	SYSCFGRSTn  = 1
	LPUART1RSTn = 3
	SPI6RSTn    = 5
	I2C4RSTn    = 7
	LPTIM2RSTn  = 9
	LPTIM3RSTn  = 10
	LPTIM4RSTn  = 11
	LPTIM5RSTn  = 12
	COMP12RSTn  = 14
	VREFRSTn    = 15
	SAI4RSTn    = 21
)

const (
	WW1RSC GCR = 0x01 << 0 //+ WWDG1 reset scope control
)

const (
	WW1RSCn = 0
)

const (
	BDMAAMEN    D3AMR = 0x01 << 0  //+ BDMA and DMAMUX Autonomous mode enable
	LPUART1AMEN D3AMR = 0x01 << 3  //+ LPUART1 Autonomous mode enable
	SPI6AMEN    D3AMR = 0x01 << 5  //+ SPI6 Autonomous mode enable
	I2C4AMEN    D3AMR = 0x01 << 7  //+ I2C4 Autonomous mode enable
	LPTIM2AMEN  D3AMR = 0x01 << 9  //+ LPTIM2 Autonomous mode enable
	LPTIM3AMEN  D3AMR = 0x01 << 10 //+ LPTIM3 Autonomous mode enable
	LPTIM4AMEN  D3AMR = 0x01 << 11 //+ LPTIM4 Autonomous mode enable
	LPTIM5AMEN  D3AMR = 0x01 << 12 //+ LPTIM5 Autonomous mode enable
	COMP12AMEN  D3AMR = 0x01 << 14 //+ COMP12 Autonomous mode enable
	VREFAMEN    D3AMR = 0x01 << 15 //+ VREF Autonomous mode enable
	RTCAMEN     D3AMR = 0x01 << 16 //+ RTC Autonomous mode enable
	CRCAMEN     D3AMR = 0x01 << 19 //+ CRC Autonomous mode enable
	SAI4AMEN    D3AMR = 0x01 << 21 //+ SAI4 Autonomous mode enable
	ADC3AMEN    D3AMR = 0x01 << 24 //+ ADC3 Autonomous mode enable
	BKPRAMAMEN  D3AMR = 0x01 << 28 //+ Backup RAM Autonomous mode enable
	SRAM4AMEN   D3AMR = 0x01 << 29 //+ SRAM4 Autonomous mode enable
)

const (
	BDMAAMENn    = 0
	LPUART1AMENn = 3
	SPI6AMENn    = 5
	I2C4AMENn    = 7
	LPTIM2AMENn  = 9
	LPTIM3AMENn  = 10
	LPTIM4AMENn  = 11
	LPTIM5AMENn  = 12
	COMP12AMENn  = 14
	VREFAMENn    = 15
	RTCAMENn     = 16
	CRCAMENn     = 19
	SAI4AMENn    = 21
	ADC3AMENn    = 24
	BKPRAMAMENn  = 28
	SRAM4AMENn   = 29
)

const (
	RMVF      RSR = 0x01 << 16 //+ Remove reset flag
	CPURSTF   RSR = 0x01 << 17 //+ CPU reset flag
	D1RSTF    RSR = 0x01 << 19 //+ D1 domain power switch reset flag
	D2RSTF    RSR = 0x01 << 20 //+ D2 domain power switch reset flag
	BORRSTF   RSR = 0x01 << 21 //+ BOR reset flag
	PINRSTF   RSR = 0x01 << 22 //+ Pin reset flag (NRST)
	PORRSTF   RSR = 0x01 << 23 //+ POR/PDR reset flag
	SFTRSTF   RSR = 0x01 << 24 //+ System reset from CPU reset flag
	IWDG1RSTF RSR = 0x01 << 26 //+ Independent Watchdog reset flag
	WWDG1RSTF RSR = 0x01 << 28 //+ Window Watchdog reset flag
	LPWRRSTF  RSR = 0x01 << 30 //+ Reset due to illegal D1 DStandby or CPU CStop flag
)

const (
	RMVFn      = 16
	CPURSTFn   = 17
	D1RSTFn    = 19
	D2RSTFn    = 20
	BORRSTFn   = 21
	PINRSTFn   = 22
	PORRSTFn   = 23
	SFTRSTFn   = 24
	IWDG1RSTFn = 26
	WWDG1RSTFn = 28
	LPWRRSTFn  = 30
)

const (
	MDMAEN   AHB3ENR = 0x01 << 0  //+ MDMA Peripheral Clock Enable
	DMA2DEN  AHB3ENR = 0x01 << 4  //+ DMA2D Peripheral Clock Enable
	JPGDECEN AHB3ENR = 0x01 << 5  //+ JPGDEC Peripheral Clock Enable
	FMCEN    AHB3ENR = 0x01 << 12 //+ FMC Peripheral Clocks Enable
	QSPIEN   AHB3ENR = 0x01 << 14 //+ QUADSPI and QUADSPI Delay Clock Enable
	SDMMC1EN AHB3ENR = 0x01 << 16 //+ SDMMC1 and SDMMC1 Delay Clock Enable
)

const (
	MDMAENn   = 0
	DMA2DENn  = 4
	JPGDECENn = 5
	FMCENn    = 12
	QSPIENn   = 14
	SDMMC1ENn = 16
)

const (
	DMA1EN          AHB1ENR = 0x01 << 0  //+ DMA1 Clock Enable
	DMA2EN          AHB1ENR = 0x01 << 1  //+ DMA2 Clock Enable
	ADC12EN         AHB1ENR = 0x01 << 5  //+ ADC1/2 Peripheral Clocks Enable
	ETH1MACEN       AHB1ENR = 0x01 << 15 //+ Ethernet MAC bus interface Clock Enable
	ETH1TXEN        AHB1ENR = 0x01 << 16 //+ Ethernet Transmission Clock Enable
	ETH1RXEN        AHB1ENR = 0x01 << 17 //+ Ethernet Reception Clock Enable
	USB2OTGHSULPIEN AHB1ENR = 0x01 << 18 //+ Enable USB_PHY2 clocks
	USB1OTGEN       AHB1ENR = 0x01 << 25 //+ USB1OTG Peripheral Clocks Enable
	USB1ULPIEN      AHB1ENR = 0x01 << 26 //+ USB_PHY1 Clocks Enable
	USB2OTGEN       AHB1ENR = 0x01 << 27 //+ USB2OTG Peripheral Clocks Enable
	USB2ULPIEN      AHB1ENR = 0x01 << 28 //+ USB_PHY2 Clocks Enable
)

const (
	DMA1ENn          = 0
	DMA2ENn          = 1
	ADC12ENn         = 5
	ETH1MACENn       = 15
	ETH1TXENn        = 16
	ETH1RXENn        = 17
	USB2OTGHSULPIENn = 18
	USB1OTGENn       = 25
	USB1ULPIENn      = 26
	USB2OTGENn       = 27
	USB2ULPIENn      = 28
)

const (
	CAMITFEN AHB2ENR = 0x01 << 0  //+ CAMITF peripheral clock enable
	CRYPTEN  AHB2ENR = 0x01 << 4  //+ CRYPT peripheral clock enable
	HASHEN   AHB2ENR = 0x01 << 5  //+ HASH peripheral clock enable
	RNGEN    AHB2ENR = 0x01 << 6  //+ RNG peripheral clocks enable
	SDMMC2EN AHB2ENR = 0x01 << 9  //+ SDMMC2 and SDMMC2 delay clock enable
	SRAM1EN  AHB2ENR = 0x01 << 29 //+ SRAM1 block enable
	SRAM2EN  AHB2ENR = 0x01 << 30 //+ SRAM2 block enable
	SRAM3EN  AHB2ENR = 0x01 << 31 //+ SRAM3 block enable
)

const (
	CAMITFENn = 0
	CRYPTENn  = 4
	HASHENn   = 5
	RNGENn    = 6
	SDMMC2ENn = 9
	SRAM1ENn  = 29
	SRAM2ENn  = 30
	SRAM3ENn  = 31
)

const (
	GPIOAEN  AHB4ENR = 0x01 << 0  //+ 0GPIO peripheral clock enable
	GPIOBEN  AHB4ENR = 0x01 << 1  //+ 0GPIO peripheral clock enable
	GPIOCEN  AHB4ENR = 0x01 << 2  //+ 0GPIO peripheral clock enable
	GPIODEN  AHB4ENR = 0x01 << 3  //+ 0GPIO peripheral clock enable
	GPIOEEN  AHB4ENR = 0x01 << 4  //+ 0GPIO peripheral clock enable
	GPIOFEN  AHB4ENR = 0x01 << 5  //+ 0GPIO peripheral clock enable
	GPIOGEN  AHB4ENR = 0x01 << 6  //+ 0GPIO peripheral clock enable
	GPIOHEN  AHB4ENR = 0x01 << 7  //+ 0GPIO peripheral clock enable
	GPIOIEN  AHB4ENR = 0x01 << 8  //+ 0GPIO peripheral clock enable
	GPIOJEN  AHB4ENR = 0x01 << 9  //+ 0GPIO peripheral clock enable
	GPIOKEN  AHB4ENR = 0x01 << 10 //+ 0GPIO peripheral clock enable
	CRCEN    AHB4ENR = 0x01 << 19 //+ CRC peripheral clock enable
	BDMAEN   AHB4ENR = 0x01 << 21 //+ BDMA and DMAMUX2 Clock Enable
	ADC3EN   AHB4ENR = 0x01 << 24 //+ ADC3 Peripheral Clocks Enable
	HSEMEN   AHB4ENR = 0x01 << 25 //+ HSEM peripheral clock enable
	BKPRAMEN AHB4ENR = 0x01 << 28 //+ Backup RAM Clock Enable
)

const (
	GPIOAENn  = 0
	GPIOBENn  = 1
	GPIOCENn  = 2
	GPIODENn  = 3
	GPIOEENn  = 4
	GPIOFENn  = 5
	GPIOGENn  = 6
	GPIOHENn  = 7
	GPIOIENn  = 8
	GPIOJENn  = 9
	GPIOKENn  = 10
	CRCENn    = 19
	BDMAENn   = 21
	ADC3ENn   = 24
	HSEMENn   = 25
	BKPRAMENn = 28
)

const (
	LTDCEN  APB3ENR = 0x01 << 3 //+ LTDC peripheral clock enable
	WWDG1EN APB3ENR = 0x01 << 6 //+ WWDG1 Clock Enable
)

const (
	LTDCENn  = 3
	WWDG1ENn = 6
)

const (
	TIM2EN    APB1LENR = 0x01 << 0  //+ TIM peripheral clock enable
	TIM3EN    APB1LENR = 0x01 << 1  //+ TIM peripheral clock enable
	TIM4EN    APB1LENR = 0x01 << 2  //+ TIM peripheral clock enable
	TIM5EN    APB1LENR = 0x01 << 3  //+ TIM peripheral clock enable
	TIM6EN    APB1LENR = 0x01 << 4  //+ TIM peripheral clock enable
	TIM7EN    APB1LENR = 0x01 << 5  //+ TIM peripheral clock enable
	TIM12EN   APB1LENR = 0x01 << 6  //+ TIM peripheral clock enable
	TIM13EN   APB1LENR = 0x01 << 7  //+ TIM peripheral clock enable
	TIM14EN   APB1LENR = 0x01 << 8  //+ TIM peripheral clock enable
	LPTIM1EN  APB1LENR = 0x01 << 9  //+ LPTIM1 Peripheral Clocks Enable
	SPI2EN    APB1LENR = 0x01 << 14 //+ SPI2 Peripheral Clocks Enable
	SPI3EN    APB1LENR = 0x01 << 15 //+ SPI3 Peripheral Clocks Enable
	SPDIFRXEN APB1LENR = 0x01 << 16 //+ SPDIFRX Peripheral Clocks Enable
	USART2EN  APB1LENR = 0x01 << 17 //+ USART2 Peripheral Clocks Enable
	USART3EN  APB1LENR = 0x01 << 18 //+ USART3 Peripheral Clocks Enable
	UART4EN   APB1LENR = 0x01 << 19 //+ UART4 Peripheral Clocks Enable
	UART5EN   APB1LENR = 0x01 << 20 //+ UART5 Peripheral Clocks Enable
	I2C1EN    APB1LENR = 0x01 << 21 //+ I2C1 Peripheral Clocks Enable
	I2C2EN    APB1LENR = 0x01 << 22 //+ I2C2 Peripheral Clocks Enable
	I2C3EN    APB1LENR = 0x01 << 23 //+ I2C3 Peripheral Clocks Enable
	CECEN     APB1LENR = 0x01 << 27 //+ HDMI-CEC peripheral clock enable
	DAC12EN   APB1LENR = 0x01 << 29 //+ DAC1&2 peripheral clock enable
	USART7EN  APB1LENR = 0x01 << 30 //+ USART7 Peripheral Clocks Enable
	USART8EN  APB1LENR = 0x01 << 31 //+ USART8 Peripheral Clocks Enable
)

const (
	TIM2ENn    = 0
	TIM3ENn    = 1
	TIM4ENn    = 2
	TIM5ENn    = 3
	TIM6ENn    = 4
	TIM7ENn    = 5
	TIM12ENn   = 6
	TIM13ENn   = 7
	TIM14ENn   = 8
	LPTIM1ENn  = 9
	SPI2ENn    = 14
	SPI3ENn    = 15
	SPDIFRXENn = 16
	USART2ENn  = 17
	USART3ENn  = 18
	UART4ENn   = 19
	UART5ENn   = 20
	I2C1ENn    = 21
	I2C2ENn    = 22
	I2C3ENn    = 23
	CECENn     = 27
	DAC12ENn   = 29
	USART7ENn  = 30
	USART8ENn  = 31
)

const (
	CRSEN   APB1HENR = 0x01 << 1 //+ Clock Recovery System peripheral clock enable
	SWPEN   APB1HENR = 0x01 << 2 //+ SWPMI Peripheral Clocks Enable
	OPAMPEN APB1HENR = 0x01 << 4 //+ OPAMP peripheral clock enable
	MDIOSEN APB1HENR = 0x01 << 5 //+ MDIOS peripheral clock enable
	FDCANEN APB1HENR = 0x01 << 8 //+ FDCAN Peripheral Clocks Enable
)

const (
	CRSENn   = 1
	SWPENn   = 2
	OPAMPENn = 4
	MDIOSENn = 5
	FDCANENn = 8
)

const (
	TIM1EN   APB2ENR = 0x01 << 0  //+ TIM1 peripheral clock enable
	TIM8EN   APB2ENR = 0x01 << 1  //+ TIM8 peripheral clock enable
	USART1EN APB2ENR = 0x01 << 4  //+ USART1 Peripheral Clocks Enable
	USART6EN APB2ENR = 0x01 << 5  //+ USART6 Peripheral Clocks Enable
	SPI1EN   APB2ENR = 0x01 << 12 //+ SPI1 Peripheral Clocks Enable
	SPI4EN   APB2ENR = 0x01 << 13 //+ SPI4 Peripheral Clocks Enable
	TIM15EN  APB2ENR = 0x01 << 16 //+ TIM15 peripheral clock enable
	TIM16EN  APB2ENR = 0x01 << 17 //+ TIM16 peripheral clock enable
	TIM17EN  APB2ENR = 0x01 << 18 //+ TIM17 peripheral clock enable
	SPI5EN   APB2ENR = 0x01 << 20 //+ SPI5 Peripheral Clocks Enable
	SAI1EN   APB2ENR = 0x01 << 22 //+ SAI1 Peripheral Clocks Enable
	SAI2EN   APB2ENR = 0x01 << 23 //+ SAI2 Peripheral Clocks Enable
	SAI3EN   APB2ENR = 0x01 << 24 //+ SAI3 Peripheral Clocks Enable
	DFSDM1EN APB2ENR = 0x01 << 28 //+ DFSDM1 Peripheral Clocks Enable
	HRTIMEN  APB2ENR = 0x01 << 29 //+ HRTIM peripheral clock enable
)

const (
	TIM1ENn   = 0
	TIM8ENn   = 1
	USART1ENn = 4
	USART6ENn = 5
	SPI1ENn   = 12
	SPI4ENn   = 13
	TIM15ENn  = 16
	TIM16ENn  = 17
	TIM17ENn  = 18
	SPI5ENn   = 20
	SAI1ENn   = 22
	SAI2ENn   = 23
	SAI3ENn   = 24
	DFSDM1ENn = 28
	HRTIMENn  = 29
)

const (
	SYSCFGEN  APB4ENR = 0x01 << 1  //+ SYSCFG peripheral clock enable
	LPUART1EN APB4ENR = 0x01 << 3  //+ LPUART1 Peripheral Clocks Enable
	SPI6EN    APB4ENR = 0x01 << 5  //+ SPI6 Peripheral Clocks Enable
	I2C4EN    APB4ENR = 0x01 << 7  //+ I2C4 Peripheral Clocks Enable
	LPTIM2EN  APB4ENR = 0x01 << 9  //+ LPTIM2 Peripheral Clocks Enable
	LPTIM3EN  APB4ENR = 0x01 << 10 //+ LPTIM3 Peripheral Clocks Enable
	LPTIM4EN  APB4ENR = 0x01 << 11 //+ LPTIM4 Peripheral Clocks Enable
	LPTIM5EN  APB4ENR = 0x01 << 12 //+ LPTIM5 Peripheral Clocks Enable
	COMP12EN  APB4ENR = 0x01 << 14 //+ COMP1/2 peripheral clock enable
	VREFEN    APB4ENR = 0x01 << 15 //+ VREF peripheral clock enable
	RTCAPBEN  APB4ENR = 0x01 << 16 //+ RTC APB Clock Enable
	SAI4EN    APB4ENR = 0x01 << 21 //+ SAI4 Peripheral Clocks Enable
)

const (
	SYSCFGENn  = 1
	LPUART1ENn = 3
	SPI6ENn    = 5
	I2C4ENn    = 7
	LPTIM2ENn  = 9
	LPTIM3ENn  = 10
	LPTIM4ENn  = 11
	LPTIM5ENn  = 12
	COMP12ENn  = 14
	VREFENn    = 15
	RTCAPBENn  = 16
	SAI4ENn    = 21
)

const (
	MDMALPEN    AHB3LPENR = 0x01 << 0  //+ MDMA Clock Enable During CSleep Mode
	DMA2DLPEN   AHB3LPENR = 0x01 << 4  //+ DMA2D Clock Enable During CSleep Mode
	JPGDECLPEN  AHB3LPENR = 0x01 << 5  //+ JPGDEC Clock Enable During CSleep Mode
	FLASHLPEN   AHB3LPENR = 0x01 << 8  //+ FLITF Clock Enable During CSleep Mode
	FMCLPEN     AHB3LPENR = 0x01 << 12 //+ FMC Peripheral Clocks Enable During CSleep Mode
	QSPILPEN    AHB3LPENR = 0x01 << 14 //+ QUADSPI and QUADSPI Delay Clock Enable During CSleep Mode
	SDMMC1LPEN  AHB3LPENR = 0x01 << 16 //+ SDMMC1 and SDMMC1 Delay Clock Enable During CSleep Mode
	D1DTCM1LPEN AHB3LPENR = 0x01 << 28 //+ D1DTCM1 Block Clock Enable During CSleep mode
	DTCM2LPEN   AHB3LPENR = 0x01 << 29 //+ D1 DTCM2 Block Clock Enable During CSleep mode
	ITCMLPEN    AHB3LPENR = 0x01 << 30 //+ D1ITCM Block Clock Enable During CSleep mode
	AXISRAMLPEN AHB3LPENR = 0x01 << 31 //+ AXISRAM Block Clock Enable During CSleep mode
)

const (
	MDMALPENn    = 0
	DMA2DLPENn   = 4
	JPGDECLPENn  = 5
	FLASHLPENn   = 8
	FMCLPENn     = 12
	QSPILPENn    = 14
	SDMMC1LPENn  = 16
	D1DTCM1LPENn = 28
	DTCM2LPENn   = 29
	ITCMLPENn    = 30
	AXISRAMLPENn = 31
)

const (
	DMA1LPEN          AHB1LPENR = 0x01 << 0  //+ DMA1 Clock Enable During CSleep Mode
	DMA2LPEN          AHB1LPENR = 0x01 << 1  //+ DMA2 Clock Enable During CSleep Mode
	ADC12LPEN         AHB1LPENR = 0x01 << 5  //+ ADC1/2 Peripheral Clocks Enable During CSleep Mode
	ETH1MACLPEN       AHB1LPENR = 0x01 << 15 //+ Ethernet MAC bus interface Clock Enable During CSleep Mode
	ETH1TXLPEN        AHB1LPENR = 0x01 << 16 //+ Ethernet Transmission Clock Enable During CSleep Mode
	ETH1RXLPEN        AHB1LPENR = 0x01 << 17 //+ Ethernet Reception Clock Enable During CSleep Mode
	USB1OTGHSLPEN     AHB1LPENR = 0x01 << 25 //+ USB1OTG peripheral clock enable during CSleep mode
	USB1OTGHSULPILPEN AHB1LPENR = 0x01 << 26 //+ USB_PHY1 clock enable during CSleep mode
	USB2OTGHSLPEN     AHB1LPENR = 0x01 << 27 //+ USB2OTG peripheral clock enable during CSleep mode
	USB2OTGHSULPILPEN AHB1LPENR = 0x01 << 28 //+ USB_PHY2 clocks enable during CSleep mode
)

const (
	DMA1LPENn          = 0
	DMA2LPENn          = 1
	ADC12LPENn         = 5
	ETH1MACLPENn       = 15
	ETH1TXLPENn        = 16
	ETH1RXLPENn        = 17
	USB1OTGHSLPENn     = 25
	USB1OTGHSULPILPENn = 26
	USB2OTGHSLPENn     = 27
	USB2OTGHSULPILPENn = 28
)

const (
	CAMITFLPEN AHB2LPENR = 0x01 << 0  //+ CAMITF peripheral clock enable during CSleep mode
	CRYPTLPEN  AHB2LPENR = 0x01 << 4  //+ CRYPT peripheral clock enable during CSleep mode
	HASHLPEN   AHB2LPENR = 0x01 << 5  //+ HASH peripheral clock enable during CSleep mode
	RNGLPEN    AHB2LPENR = 0x01 << 6  //+ RNG peripheral clock enable during CSleep mode
	SDMMC2LPEN AHB2LPENR = 0x01 << 9  //+ SDMMC2 and SDMMC2 Delay Clock Enable During CSleep Mode
	SRAM1LPEN  AHB2LPENR = 0x01 << 29 //+ SRAM1 Clock Enable During CSleep Mode
	SRAM2LPEN  AHB2LPENR = 0x01 << 30 //+ SRAM2 Clock Enable During CSleep Mode
	SRAM3LPEN  AHB2LPENR = 0x01 << 31 //+ SRAM3 Clock Enable During CSleep Mode
)

const (
	CAMITFLPENn = 0
	CRYPTLPENn  = 4
	HASHLPENn   = 5
	RNGLPENn    = 6
	SDMMC2LPENn = 9
	SRAM1LPENn  = 29
	SRAM2LPENn  = 30
	SRAM3LPENn  = 31
)

const (
	GPIOALPEN  AHB4LPENR = 0x01 << 0  //+ GPIO peripheral clock enable during CSleep mode
	GPIOBLPEN  AHB4LPENR = 0x01 << 1  //+ GPIO peripheral clock enable during CSleep mode
	GPIOCLPEN  AHB4LPENR = 0x01 << 2  //+ GPIO peripheral clock enable during CSleep mode
	GPIODLPEN  AHB4LPENR = 0x01 << 3  //+ GPIO peripheral clock enable during CSleep mode
	GPIOELPEN  AHB4LPENR = 0x01 << 4  //+ GPIO peripheral clock enable during CSleep mode
	GPIOFLPEN  AHB4LPENR = 0x01 << 5  //+ GPIO peripheral clock enable during CSleep mode
	GPIOGLPEN  AHB4LPENR = 0x01 << 6  //+ GPIO peripheral clock enable during CSleep mode
	GPIOHLPEN  AHB4LPENR = 0x01 << 7  //+ GPIO peripheral clock enable during CSleep mode
	GPIOILPEN  AHB4LPENR = 0x01 << 8  //+ GPIO peripheral clock enable during CSleep mode
	GPIOJLPEN  AHB4LPENR = 0x01 << 9  //+ GPIO peripheral clock enable during CSleep mode
	GPIOKLPEN  AHB4LPENR = 0x01 << 10 //+ GPIO peripheral clock enable during CSleep mode
	CRCLPEN    AHB4LPENR = 0x01 << 19 //+ CRC peripheral clock enable during CSleep mode
	BDMALPEN   AHB4LPENR = 0x01 << 21 //+ BDMA Clock Enable During CSleep Mode
	ADC3LPEN   AHB4LPENR = 0x01 << 24 //+ ADC3 Peripheral Clocks Enable During CSleep Mode
	BKPRAMLPEN AHB4LPENR = 0x01 << 28 //+ Backup RAM Clock Enable During CSleep Mode
	SRAM4LPEN  AHB4LPENR = 0x01 << 29 //+ SRAM4 Clock Enable During CSleep Mode
)

const (
	GPIOALPENn  = 0
	GPIOBLPENn  = 1
	GPIOCLPENn  = 2
	GPIODLPENn  = 3
	GPIOELPENn  = 4
	GPIOFLPENn  = 5
	GPIOGLPENn  = 6
	GPIOHLPENn  = 7
	GPIOILPENn  = 8
	GPIOJLPENn  = 9
	GPIOKLPENn  = 10
	CRCLPENn    = 19
	BDMALPENn   = 21
	ADC3LPENn   = 24
	BKPRAMLPENn = 28
	SRAM4LPENn  = 29
)

const (
	LTDCLPEN  APB3LPENR = 0x01 << 3 //+ LTDC peripheral clock enable during CSleep mode
	WWDG1LPEN APB3LPENR = 0x01 << 6 //+ WWDG1 Clock Enable During CSleep Mode
)

const (
	LTDCLPENn  = 3
	WWDG1LPENn = 6
)

const (
	TIM2LPEN    APB1LLPENR = 0x01 << 0  //+ TIM2 peripheral clock enable during CSleep mode
	TIM3LPEN    APB1LLPENR = 0x01 << 1  //+ TIM3 peripheral clock enable during CSleep mode
	TIM4LPEN    APB1LLPENR = 0x01 << 2  //+ TIM4 peripheral clock enable during CSleep mode
	TIM5LPEN    APB1LLPENR = 0x01 << 3  //+ TIM5 peripheral clock enable during CSleep mode
	TIM6LPEN    APB1LLPENR = 0x01 << 4  //+ TIM6 peripheral clock enable during CSleep mode
	TIM7LPEN    APB1LLPENR = 0x01 << 5  //+ TIM7 peripheral clock enable during CSleep mode
	TIM12LPEN   APB1LLPENR = 0x01 << 6  //+ TIM12 peripheral clock enable during CSleep mode
	TIM13LPEN   APB1LLPENR = 0x01 << 7  //+ TIM13 peripheral clock enable during CSleep mode
	TIM14LPEN   APB1LLPENR = 0x01 << 8  //+ TIM14 peripheral clock enable during CSleep mode
	LPTIM1LPEN  APB1LLPENR = 0x01 << 9  //+ LPTIM1 Peripheral Clocks Enable During CSleep Mode
	SPI2LPEN    APB1LLPENR = 0x01 << 14 //+ SPI2 Peripheral Clocks Enable During CSleep Mode
	SPI3LPEN    APB1LLPENR = 0x01 << 15 //+ SPI3 Peripheral Clocks Enable During CSleep Mode
	SPDIFRXLPEN APB1LLPENR = 0x01 << 16 //+ SPDIFRX Peripheral Clocks Enable During CSleep Mode
	USART2LPEN  APB1LLPENR = 0x01 << 17 //+ USART2 Peripheral Clocks Enable During CSleep Mode
	USART3LPEN  APB1LLPENR = 0x01 << 18 //+ USART3 Peripheral Clocks Enable During CSleep Mode
	UART4LPEN   APB1LLPENR = 0x01 << 19 //+ UART4 Peripheral Clocks Enable During CSleep Mode
	UART5LPEN   APB1LLPENR = 0x01 << 20 //+ UART5 Peripheral Clocks Enable During CSleep Mode
	I2C1LPEN    APB1LLPENR = 0x01 << 21 //+ I2C1 Peripheral Clocks Enable During CSleep Mode
	I2C2LPEN    APB1LLPENR = 0x01 << 22 //+ I2C2 Peripheral Clocks Enable During CSleep Mode
	I2C3LPEN    APB1LLPENR = 0x01 << 23 //+ I2C3 Peripheral Clocks Enable During CSleep Mode
	HDMICECLPEN APB1LLPENR = 0x01 << 27 //+ HDMI-CEC Peripheral Clocks Enable During CSleep Mode
	DAC12LPEN   APB1LLPENR = 0x01 << 29 //+ DAC1/2 peripheral clock enable during CSleep mode
	USART7LPEN  APB1LLPENR = 0x01 << 30 //+ USART7 Peripheral Clocks Enable During CSleep Mode
	USART8LPEN  APB1LLPENR = 0x01 << 31 //+ USART8 Peripheral Clocks Enable During CSleep Mode
)

const (
	TIM2LPENn    = 0
	TIM3LPENn    = 1
	TIM4LPENn    = 2
	TIM5LPENn    = 3
	TIM6LPENn    = 4
	TIM7LPENn    = 5
	TIM12LPENn   = 6
	TIM13LPENn   = 7
	TIM14LPENn   = 8
	LPTIM1LPENn  = 9
	SPI2LPENn    = 14
	SPI3LPENn    = 15
	SPDIFRXLPENn = 16
	USART2LPENn  = 17
	USART3LPENn  = 18
	UART4LPENn   = 19
	UART5LPENn   = 20
	I2C1LPENn    = 21
	I2C2LPENn    = 22
	I2C3LPENn    = 23
	HDMICECLPENn = 27
	DAC12LPENn   = 29
	USART7LPENn  = 30
	USART8LPENn  = 31
)

const (
	CRSLPEN   APB1HLPENR = 0x01 << 1 //+ Clock Recovery System peripheral clock enable during CSleep mode
	SWPLPEN   APB1HLPENR = 0x01 << 2 //+ SWPMI Peripheral Clocks Enable During CSleep Mode
	OPAMPLPEN APB1HLPENR = 0x01 << 4 //+ OPAMP peripheral clock enable during CSleep mode
	MDIOSLPEN APB1HLPENR = 0x01 << 5 //+ MDIOS peripheral clock enable during CSleep mode
	FDCANLPEN APB1HLPENR = 0x01 << 8 //+ FDCAN Peripheral Clocks Enable During CSleep Mode
)

const (
	CRSLPENn   = 1
	SWPLPENn   = 2
	OPAMPLPENn = 4
	MDIOSLPENn = 5
	FDCANLPENn = 8
)

const (
	TIM1LPEN   APB2LPENR = 0x01 << 0  //+ TIM1 peripheral clock enable during CSleep mode
	TIM8LPEN   APB2LPENR = 0x01 << 1  //+ TIM8 peripheral clock enable during CSleep mode
	USART1LPEN APB2LPENR = 0x01 << 4  //+ USART1 Peripheral Clocks Enable During CSleep Mode
	USART6LPEN APB2LPENR = 0x01 << 5  //+ USART6 Peripheral Clocks Enable During CSleep Mode
	SPI1LPEN   APB2LPENR = 0x01 << 12 //+ SPI1 Peripheral Clocks Enable During CSleep Mode
	SPI4LPEN   APB2LPENR = 0x01 << 13 //+ SPI4 Peripheral Clocks Enable During CSleep Mode
	TIM15LPEN  APB2LPENR = 0x01 << 16 //+ TIM15 peripheral clock enable during CSleep mode
	TIM16LPEN  APB2LPENR = 0x01 << 17 //+ TIM16 peripheral clock enable during CSleep mode
	TIM17LPEN  APB2LPENR = 0x01 << 18 //+ TIM17 peripheral clock enable during CSleep mode
	SPI5LPEN   APB2LPENR = 0x01 << 20 //+ SPI5 Peripheral Clocks Enable During CSleep Mode
	SAI1LPEN   APB2LPENR = 0x01 << 22 //+ SAI1 Peripheral Clocks Enable During CSleep Mode
	SAI2LPEN   APB2LPENR = 0x01 << 23 //+ SAI2 Peripheral Clocks Enable During CSleep Mode
	SAI3LPEN   APB2LPENR = 0x01 << 24 //+ SAI3 Peripheral Clocks Enable During CSleep Mode
	DFSDM1LPEN APB2LPENR = 0x01 << 28 //+ DFSDM1 Peripheral Clocks Enable During CSleep Mode
	HRTIMLPEN  APB2LPENR = 0x01 << 29 //+ HRTIM peripheral clock enable during CSleep mode
)

const (
	TIM1LPENn   = 0
	TIM8LPENn   = 1
	USART1LPENn = 4
	USART6LPENn = 5
	SPI1LPENn   = 12
	SPI4LPENn   = 13
	TIM15LPENn  = 16
	TIM16LPENn  = 17
	TIM17LPENn  = 18
	SPI5LPENn   = 20
	SAI1LPENn   = 22
	SAI2LPENn   = 23
	SAI3LPENn   = 24
	DFSDM1LPENn = 28
	HRTIMLPENn  = 29
)

const (
	SYSCFGLPEN  APB4LPENR = 0x01 << 1  //+ SYSCFG peripheral clock enable during CSleep mode
	LPUART1LPEN APB4LPENR = 0x01 << 3  //+ LPUART1 Peripheral Clocks Enable During CSleep Mode
	SPI6LPEN    APB4LPENR = 0x01 << 5  //+ SPI6 Peripheral Clocks Enable During CSleep Mode
	I2C4LPEN    APB4LPENR = 0x01 << 7  //+ I2C4 Peripheral Clocks Enable During CSleep Mode
	LPTIM2LPEN  APB4LPENR = 0x01 << 9  //+ LPTIM2 Peripheral Clocks Enable During CSleep Mode
	LPTIM3LPEN  APB4LPENR = 0x01 << 10 //+ LPTIM3 Peripheral Clocks Enable During CSleep Mode
	LPTIM4LPEN  APB4LPENR = 0x01 << 11 //+ LPTIM4 Peripheral Clocks Enable During CSleep Mode
	LPTIM5LPEN  APB4LPENR = 0x01 << 12 //+ LPTIM5 Peripheral Clocks Enable During CSleep Mode
	COMP12LPEN  APB4LPENR = 0x01 << 14 //+ COMP1/2 peripheral clock enable during CSleep mode
	VREFLPEN    APB4LPENR = 0x01 << 15 //+ VREF peripheral clock enable during CSleep mode
	RTCAPBLPEN  APB4LPENR = 0x01 << 16 //+ RTC APB Clock Enable During CSleep Mode
	SAI4LPEN    APB4LPENR = 0x01 << 21 //+ SAI4 Peripheral Clocks Enable During CSleep Mode
)

const (
	SYSCFGLPENn  = 1
	LPUART1LPENn = 3
	SPI6LPENn    = 5
	I2C4LPENn    = 7
	LPTIM2LPENn  = 9
	LPTIM3LPENn  = 10
	LPTIM4LPENn  = 11
	LPTIM5LPENn  = 12
	COMP12LPENn  = 14
	VREFLPENn    = 15
	RTCAPBLPENn  = 16
	SAI4LPENn    = 21
)
