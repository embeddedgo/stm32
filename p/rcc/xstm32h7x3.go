// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32h7x3

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         mmio.R32[CR]
	ICSCR      mmio.R32[ICSCR]
	CRRCR      mmio.R32[CRRCR]
	_          uint32
	CFGR       mmio.R32[CFGR]
	_          uint32
	D1CFGR     mmio.R32[D1CFGR]
	D2CFGR     mmio.R32[D2CFGR]
	D3CFGR     mmio.R32[D3CFGR]
	_          uint32
	PLLCKSELR  mmio.R32[PLLCKSELR]
	PLLCFGR    mmio.R32[PLLCFGR]
	PLL1DIVR   mmio.R32[PLL1DIVR]
	PLL1FRACR  mmio.R32[PLL1FRACR]
	PLL2DIVR   mmio.R32[PLL2DIVR]
	PLL2FRACR  mmio.R32[PLL2FRACR]
	PLL3DIVR   mmio.R32[PLL3DIVR]
	PLL3FRACR  mmio.R32[PLL3FRACR]
	_          uint32
	D1CCIPR    mmio.R32[D1CCIPR]
	D2CCIP1R   mmio.R32[D2CCIP1R]
	D2CCIP2R   mmio.R32[D2CCIP2R]
	D3CCIPR    mmio.R32[D3CCIPR]
	_          uint32
	CIER       mmio.R32[CIER]
	CIFR       mmio.R32[CIFR]
	CICR       mmio.R32[CICR]
	_          uint32
	BDCR       mmio.R32[BDCR]
	CSR        mmio.R32[CSR]
	_          uint32
	AHB3RSTR   mmio.R32[AHB3RSTR]
	AHB1RSTR   mmio.R32[AHB1RSTR]
	AHB2RSTR   mmio.R32[AHB2RSTR]
	AHB4RSTR   mmio.R32[AHB4RSTR]
	APB3RSTR   mmio.R32[APB3RSTR]
	APB1LRSTR  mmio.R32[APB1LRSTR]
	APB1HRSTR  mmio.R32[APB1HRSTR]
	APB2RSTR   mmio.R32[APB2RSTR]
	APB4RSTR   mmio.R32[APB4RSTR]
	GCR        mmio.R32[GCR]
	_          uint32
	D3AMR      mmio.R32[D3AMR]
	_          [9]uint32
	RSR        mmio.R32[RSR]
	AHB3ENR    mmio.R32[AHB3ENR]
	AHB1ENR    mmio.R32[AHB1ENR]
	AHB2ENR    mmio.R32[AHB2ENR]
	AHB4ENR    mmio.R32[AHB4ENR]
	APB3ENR    mmio.R32[APB3ENR]
	APB1LENR   mmio.R32[APB1LENR]
	APB1HENR   mmio.R32[APB1HENR]
	APB2ENR    mmio.R32[APB2ENR]
	APB4ENR    mmio.R32[APB4ENR]
	_          uint32
	AHB3LPENR  mmio.R32[AHB3LPENR]
	AHB1LPENR  mmio.R32[AHB1LPENR]
	AHB2LPENR  mmio.R32[AHB2LPENR]
	AHB4LPENR  mmio.R32[AHB4LPENR]
	APB3LPENR  mmio.R32[APB3LPENR]
	APB1LLPENR mmio.R32[APB1LLPENR]
	APB1HLPENR mmio.R32[APB1HLPENR]
	APB2LPENR  mmio.R32[APB2LPENR]
	APB4LPENR  mmio.R32[APB4LPENR]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func HSION_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSION} }
func HSIKERON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: HSIKERON} }
func HSIRDY_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: HSIRDY} }
func HSIDIV_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: HSIDIV} }
func HSIDIVF_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: HSIDIVF} }
func CSION_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: CSION} }
func CSIRDY_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: CSIRDY} }
func CSIKERON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: CSIKERON} }
func RC48ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: RC48ON} }
func RC48RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: RC48RDY} }
func D1CKRDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: D1CKRDY} }
func D2CKRDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: D2CKRDY} }
func HSEON_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{R: &p.CR, Mask: HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: HSEBYP} }
func HSECSSON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{R: &p.CR, Mask: HSECSSON} }
func PLL1ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: PLL1ON} }
func PLL1RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLL1RDY} }
func PLL2ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: PLL2ON} }
func PLL2RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLL2RDY} }
func PLL3ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{R: &p.CR, Mask: PLL3ON} }
func PLL3RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{R: &p.CR, Mask: PLL3RDY} }

type ICSCR uint32

func HSICAL_(p *Periph) mmio.RM32[ICSCR]  { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: HSICAL} }
func HSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: HSITRIM} }
func CSICAL_(p *Periph) mmio.RM32[ICSCR]  { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: CSICAL} }
func CSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{R: &p.ICSCR, Mask: CSITRIM} }

type CRRCR uint32

func RC48CAL_(p *Periph) mmio.RM32[CRRCR] { return mmio.RM32[CRRCR]{R: &p.CRRCR, Mask: RC48CAL} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]          { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]         { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: SWS} }
func STOPWUCK_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: STOPWUCK} }
func STOPKERWUCK_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: STOPKERWUCK} }
func RTCPRE_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: RTCPRE} }
func HRTIMSEL_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: HRTIMSEL} }
func TIMPRE_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: TIMPRE} }
func MCO1PRE_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO1PRE} }
func MCO1SEL_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO1SEL} }
func MCO2PRE_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO2PRE} }
func MCO2SEL_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{R: &p.CFGR, Mask: MCO2SEL} }

type D1CFGR uint32

func HPRE_(p *Periph) mmio.RM32[D1CFGR]   { return mmio.RM32[D1CFGR]{R: &p.D1CFGR, Mask: HPRE} }
func D1PPRE_(p *Periph) mmio.RM32[D1CFGR] { return mmio.RM32[D1CFGR]{R: &p.D1CFGR, Mask: D1PPRE} }
func D1CPRE_(p *Periph) mmio.RM32[D1CFGR] { return mmio.RM32[D1CFGR]{R: &p.D1CFGR, Mask: D1CPRE} }

type D2CFGR uint32

func D2PPRE1_(p *Periph) mmio.RM32[D2CFGR] { return mmio.RM32[D2CFGR]{R: &p.D2CFGR, Mask: D2PPRE1} }
func D2PPRE2_(p *Periph) mmio.RM32[D2CFGR] { return mmio.RM32[D2CFGR]{R: &p.D2CFGR, Mask: D2PPRE2} }

type D3CFGR uint32

func D3PPRE_(p *Periph) mmio.RM32[D3CFGR] { return mmio.RM32[D3CFGR]{R: &p.D3CFGR, Mask: D3PPRE} }

type PLLCKSELR uint32

func PLLSRC_(p *Periph) mmio.RM32[PLLCKSELR] {
	return mmio.RM32[PLLCKSELR]{R: &p.PLLCKSELR, Mask: PLLSRC}
}
func DIVM1_(p *Periph) mmio.RM32[PLLCKSELR] {
	return mmio.RM32[PLLCKSELR]{R: &p.PLLCKSELR, Mask: DIVM1}
}
func DIVM2_(p *Periph) mmio.RM32[PLLCKSELR] {
	return mmio.RM32[PLLCKSELR]{R: &p.PLLCKSELR, Mask: DIVM2}
}
func DIVM3_(p *Periph) mmio.RM32[PLLCKSELR] {
	return mmio.RM32[PLLCKSELR]{R: &p.PLLCKSELR, Mask: DIVM3}
}

type PLLCFGR uint32

func PLL1FRACEN_(p *Periph) mmio.RM32[PLLCFGR] {
	return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL1FRACEN}
}
func PLL1VCOSEL_(p *Periph) mmio.RM32[PLLCFGR] {
	return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL1VCOSEL}
}
func PLL1RGE_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL1RGE} }
func PLL2FRACEN_(p *Periph) mmio.RM32[PLLCFGR] {
	return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL2FRACEN}
}
func PLL2VCOSEL_(p *Periph) mmio.RM32[PLLCFGR] {
	return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL2VCOSEL}
}
func PLL2RGE_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL2RGE} }
func PLL3FRACEN_(p *Periph) mmio.RM32[PLLCFGR] {
	return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL3FRACEN}
}
func PLL3VCOSEL_(p *Periph) mmio.RM32[PLLCFGR] {
	return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL3VCOSEL}
}
func PLL3RGE_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: PLL3RGE} }
func DIVP1EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVP1EN} }
func DIVQ1EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVQ1EN} }
func DIVR1EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVR1EN} }
func DIVP2EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVP2EN} }
func DIVQ2EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVQ2EN} }
func DIVR2EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVR2EN} }
func DIVP3EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVP3EN} }
func DIVQ3EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVQ3EN} }
func DIVR3EN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{R: &p.PLLCFGR, Mask: DIVR3EN} }

type PLL1DIVR uint32

func DIVN1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{R: &p.PLL1DIVR, Mask: DIVN1} }
func DIVP1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{R: &p.PLL1DIVR, Mask: DIVP1} }
func DIVQ1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{R: &p.PLL1DIVR, Mask: DIVQ1} }
func DIVR1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{R: &p.PLL1DIVR, Mask: DIVR1} }

type PLL1FRACR uint32

func FRACN1_(p *Periph) mmio.RM32[PLL1FRACR] {
	return mmio.RM32[PLL1FRACR]{R: &p.PLL1FRACR, Mask: FRACN1}
}

type PLL2DIVR uint32

func DIVN2_(p *Periph) mmio.RM32[PLL2DIVR]  { return mmio.RM32[PLL2DIVR]{R: &p.PLL2DIVR, Mask: DIVN2} }
func DIVP12_(p *Periph) mmio.RM32[PLL2DIVR] { return mmio.RM32[PLL2DIVR]{R: &p.PLL2DIVR, Mask: DIVP12} }
func DIVQ2_(p *Periph) mmio.RM32[PLL2DIVR]  { return mmio.RM32[PLL2DIVR]{R: &p.PLL2DIVR, Mask: DIVQ2} }
func DIVR2_(p *Periph) mmio.RM32[PLL2DIVR]  { return mmio.RM32[PLL2DIVR]{R: &p.PLL2DIVR, Mask: DIVR2} }

type PLL2FRACR uint32

func FRACN2_(p *Periph) mmio.RM32[PLL2FRACR] {
	return mmio.RM32[PLL2FRACR]{R: &p.PLL2FRACR, Mask: FRACN2}
}

type PLL3DIVR uint32

func DIVN3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{R: &p.PLL3DIVR, Mask: DIVN3} }
func DIVP3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{R: &p.PLL3DIVR, Mask: DIVP3} }
func DIVQ3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{R: &p.PLL3DIVR, Mask: DIVQ3} }
func DIVR3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{R: &p.PLL3DIVR, Mask: DIVR3} }

type PLL3FRACR uint32

func FRACN3_(p *Periph) mmio.RM32[PLL3FRACR] {
	return mmio.RM32[PLL3FRACR]{R: &p.PLL3FRACR, Mask: FRACN3}
}

type D1CCIPR uint32

func FMCSRC_(p *Periph) mmio.RM32[D1CCIPR]  { return mmio.RM32[D1CCIPR]{R: &p.D1CCIPR, Mask: FMCSRC} }
func QSPISRC_(p *Periph) mmio.RM32[D1CCIPR] { return mmio.RM32[D1CCIPR]{R: &p.D1CCIPR, Mask: QSPISRC} }
func SDMMCSRC_(p *Periph) mmio.RM32[D1CCIPR] {
	return mmio.RM32[D1CCIPR]{R: &p.D1CCIPR, Mask: SDMMCSRC}
}
func CKPERSRC_(p *Periph) mmio.RM32[D1CCIPR] {
	return mmio.RM32[D1CCIPR]{R: &p.D1CCIPR, Mask: CKPERSRC}
}

type D2CCIP1R uint32

func SAI1SRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: SAI1SRC}
}
func SAI23SRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: SAI23SRC}
}
func SPI123SRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: SPI123SRC}
}
func SPI45SRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: SPI45SRC}
}
func SPDIFSRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: SPDIFSRC}
}
func DFSDM1SRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: DFSDM1SRC}
}
func FDCANSRC_(p *Periph) mmio.RM32[D2CCIP1R] {
	return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: FDCANSRC}
}
func SWPSRC_(p *Periph) mmio.RM32[D2CCIP1R] { return mmio.RM32[D2CCIP1R]{R: &p.D2CCIP1R, Mask: SWPSRC} }

type D2CCIP2R uint32

func USART234578SRC_(p *Periph) mmio.RM32[D2CCIP2R] {
	return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: USART234578SRC}
}
func USART16SRC_(p *Periph) mmio.RM32[D2CCIP2R] {
	return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: USART16SRC}
}
func RNGSRC_(p *Periph) mmio.RM32[D2CCIP2R] { return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: RNGSRC} }
func I2C123SRC_(p *Periph) mmio.RM32[D2CCIP2R] {
	return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: I2C123SRC}
}
func USBSRC_(p *Periph) mmio.RM32[D2CCIP2R] { return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: USBSRC} }
func CECSRC_(p *Periph) mmio.RM32[D2CCIP2R] { return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: CECSRC} }
func LPTIM1SRC_(p *Periph) mmio.RM32[D2CCIP2R] {
	return mmio.RM32[D2CCIP2R]{R: &p.D2CCIP2R, Mask: LPTIM1SRC}
}

type D3CCIPR uint32

func LPUART1SRC_(p *Periph) mmio.RM32[D3CCIPR] {
	return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: LPUART1SRC}
}
func I2C4SRC_(p *Periph) mmio.RM32[D3CCIPR] { return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: I2C4SRC} }
func LPTIM2SRC_(p *Periph) mmio.RM32[D3CCIPR] {
	return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: LPTIM2SRC}
}
func LPTIM345SRC_(p *Periph) mmio.RM32[D3CCIPR] {
	return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: LPTIM345SRC}
}
func ADCSRC_(p *Periph) mmio.RM32[D3CCIPR] { return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: ADCSRC} }
func SAI4ASRC_(p *Periph) mmio.RM32[D3CCIPR] {
	return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: SAI4ASRC}
}
func SAI4BSRC_(p *Periph) mmio.RM32[D3CCIPR] {
	return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: SAI4BSRC}
}
func SPI6SRC_(p *Periph) mmio.RM32[D3CCIPR] { return mmio.RM32[D3CCIPR]{R: &p.D3CCIPR, Mask: SPI6SRC} }

type CIER uint32

func LSIRDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSERDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{R: &p.CIER, Mask: HSERDYIE} }
func CSIRDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{R: &p.CIER, Mask: CSIRDYIE} }
func RC48RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: RC48RDYIE} }
func PLL1RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLL1RDYIE} }
func PLL2RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLL2RDYIE} }
func PLL3RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{R: &p.CIER, Mask: PLL3RDYIE} }
func LSECSSIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{R: &p.CIER, Mask: LSECSSIE} }

type CIFR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSERDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSERDYF} }
func CSIRDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: CSIRDYF} }
func RC48RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: RC48RDYF} }
func PLL1RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLL1RDYF} }
func PLL2RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLL2RDYF} }
func PLL3RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: PLL3RDYF} }
func LSECSSF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: LSECSSF} }
func HSECSSF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{R: &p.CIFR, Mask: HSECSSF} }

type CICR uint32

func LSIRDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSERDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSERDYC} }
func HSE_ready_Interrupt_Clear_(p *Periph) mmio.RM32[CICR] {
	return mmio.RM32[CICR]{R: &p.CICR, Mask: HSE_ready_Interrupt_Clear}
}
func RC48RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: RC48RDYC} }
func PLL1RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLL1RDYC} }
func PLL2RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLL2RDYC} }
func PLL3RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{R: &p.CICR, Mask: PLL3RDYC} }
func LSECSSC_(p *Periph) mmio.RM32[CICR]  { return mmio.RM32[CICR]{R: &p.CICR, Mask: LSECSSC} }
func HSECSSC_(p *Periph) mmio.RM32[CICR]  { return mmio.RM32[CICR]{R: &p.CICR, Mask: HSECSSC} }

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEBYP} }
func LSEDRV_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSEDRV} }
func LSECSSON_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSECSSON} }
func LSECSSD_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: LSECSSD} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: RTCEN} }
func VSWRST_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{R: &p.BDCR, Mask: VSWRST} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{R: &p.CSR, Mask: LSIRDY} }

type AHB3RSTR uint32

func MDMARST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: MDMARST}
}
func DMA2DRST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: DMA2DRST}
}
func JPGDECRST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: JPGDECRST}
}
func FMCRST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: FMCRST} }
func QSPIRST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: QSPIRST}
}
func SDMMC1RST_(p *Periph) mmio.RM32[AHB3RSTR] {
	return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: SDMMC1RST}
}
func CPURST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{R: &p.AHB3RSTR, Mask: CPURST} }

type AHB1RSTR uint32

func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA1RST}
}
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: DMA2RST}
}
func ADC12RST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: ADC12RST}
}
func ETH1MACRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: ETH1MACRST}
}
func USB1OTGRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: USB1OTGRST}
}
func USB2OTGRST_(p *Periph) mmio.RM32[AHB1RSTR] {
	return mmio.RM32[AHB1RSTR]{R: &p.AHB1RSTR, Mask: USB2OTGRST}
}

type AHB2RSTR uint32

func CAMITFRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: CAMITFRST}
}
func CRYPTRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: CRYPTRST}
}
func HASHRST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: HASHRST}
}
func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: RNGRST} }
func SDMMC2RST_(p *Periph) mmio.RM32[AHB2RSTR] {
	return mmio.RM32[AHB2RSTR]{R: &p.AHB2RSTR, Mask: SDMMC2RST}
}

type AHB4RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOARST}
}
func GPIOBRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOBRST}
}
func GPIOCRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOCRST}
}
func GPIODRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIODRST}
}
func GPIOERST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOERST}
}
func GPIOFRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOFRST}
}
func GPIOGRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOGRST}
}
func GPIOHRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOHRST}
}
func GPIOIRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOIRST}
}
func GPIOJRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOJRST}
}
func GPIOKRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: GPIOKRST}
}
func CRCRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: CRCRST} }
func BDMARST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: BDMARST}
}
func ADC3RST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: ADC3RST}
}
func HSEMRST_(p *Periph) mmio.RM32[AHB4RSTR] {
	return mmio.RM32[AHB4RSTR]{R: &p.AHB4RSTR, Mask: HSEMRST}
}

type APB3RSTR uint32

func LTDCRST_(p *Periph) mmio.RM32[APB3RSTR] {
	return mmio.RM32[APB3RSTR]{R: &p.APB3RSTR, Mask: LTDCRST}
}

type APB1LRSTR uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM2RST}
}
func TIM3RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM3RST}
}
func TIM4RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM4RST}
}
func TIM5RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM5RST}
}
func TIM6RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM6RST}
}
func TIM7RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM7RST}
}
func TIM12RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM12RST}
}
func TIM13RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM13RST}
}
func TIM14RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: TIM14RST}
}
func LPTIM1RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: LPTIM1RST}
}
func SPI2RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: SPI2RST}
}
func SPI3RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: SPI3RST}
}
func SPDIFRXRST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: SPDIFRXRST}
}
func USART2RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: USART2RST}
}
func USART3RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: USART3RST}
}
func UART4RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: UART4RST}
}
func UART5RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: UART5RST}
}
func I2C1RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: I2C1RST}
}
func I2C2RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: I2C2RST}
}
func I2C3RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: I2C3RST}
}
func CECRST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: CECRST}
}
func DAC12RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: DAC12RST}
}
func USART7RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: USART7RST}
}
func USART8RST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{R: &p.APB1LRSTR, Mask: USART8RST}
}

type APB1HRSTR uint32

func CRSRST_(p *Periph) mmio.RM32[APB1HRSTR] {
	return mmio.RM32[APB1HRSTR]{R: &p.APB1HRSTR, Mask: CRSRST}
}
func SWPRST_(p *Periph) mmio.RM32[APB1HRSTR] {
	return mmio.RM32[APB1HRSTR]{R: &p.APB1HRSTR, Mask: SWPRST}
}
func OPAMPRST_(p *Periph) mmio.RM32[APB1HRSTR] {
	return mmio.RM32[APB1HRSTR]{R: &p.APB1HRSTR, Mask: OPAMPRST}
}
func MDIOSRST_(p *Periph) mmio.RM32[APB1HRSTR] {
	return mmio.RM32[APB1HRSTR]{R: &p.APB1HRSTR, Mask: MDIOSRST}
}
func FDCANRST_(p *Periph) mmio.RM32[APB1HRSTR] {
	return mmio.RM32[APB1HRSTR]{R: &p.APB1HRSTR, Mask: FDCANRST}
}

type APB2RSTR uint32

func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM1RST}
}
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM8RST}
}
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: USART1RST}
}
func USART6RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: USART6RST}
}
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI1RST}
}
func SPI4RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI4RST}
}
func TIM15RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM15RST}
}
func TIM16RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM16RST}
}
func TIM17RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: TIM17RST}
}
func SPI5RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SPI5RST}
}
func SAI1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SAI1RST}
}
func SAI2RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SAI2RST}
}
func SAI3RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: SAI3RST}
}
func DFSDM1RST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: DFSDM1RST}
}
func HRTIMRST_(p *Periph) mmio.RM32[APB2RSTR] {
	return mmio.RM32[APB2RSTR]{R: &p.APB2RSTR, Mask: HRTIMRST}
}

type APB4RSTR uint32

func SYSCFGRST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: SYSCFGRST}
}
func LPUART1RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: LPUART1RST}
}
func SPI6RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: SPI6RST}
}
func I2C4RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: I2C4RST}
}
func LPTIM2RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: LPTIM2RST}
}
func LPTIM3RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: LPTIM3RST}
}
func LPTIM4RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: LPTIM4RST}
}
func LPTIM5RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: LPTIM5RST}
}
func COMP12RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: COMP12RST}
}
func VREFRST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: VREFRST}
}
func SAI4RST_(p *Periph) mmio.RM32[APB4RSTR] {
	return mmio.RM32[APB4RSTR]{R: &p.APB4RSTR, Mask: SAI4RST}
}

type GCR uint32

func WW1RSC_(p *Periph) mmio.RM32[GCR] { return mmio.RM32[GCR]{R: &p.GCR, Mask: WW1RSC} }

type D3AMR uint32

func BDMAAMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: BDMAAMEN} }
func LPUART1AMEN_(p *Periph) mmio.RM32[D3AMR] {
	return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: LPUART1AMEN}
}
func SPI6AMEN_(p *Periph) mmio.RM32[D3AMR]   { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: SPI6AMEN} }
func I2C4AMEN_(p *Periph) mmio.RM32[D3AMR]   { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: I2C4AMEN} }
func LPTIM2AMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: LPTIM2AMEN} }
func LPTIM3AMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: LPTIM3AMEN} }
func LPTIM4AMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: LPTIM4AMEN} }
func LPTIM5AMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: LPTIM5AMEN} }
func COMP12AMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: COMP12AMEN} }
func VREFAMEN_(p *Periph) mmio.RM32[D3AMR]   { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: VREFAMEN} }
func RTCAMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: RTCAMEN} }
func CRCAMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: CRCAMEN} }
func SAI4AMEN_(p *Periph) mmio.RM32[D3AMR]   { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: SAI4AMEN} }
func ADC3AMEN_(p *Periph) mmio.RM32[D3AMR]   { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: ADC3AMEN} }
func BKPRAMAMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: BKPRAMAMEN} }
func SRAM4AMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{R: &p.D3AMR, Mask: SRAM4AMEN} }

type RSR uint32

func RMVF_(p *Periph) mmio.RM32[RSR]      { return mmio.RM32[RSR]{R: &p.RSR, Mask: RMVF} }
func CPURSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{R: &p.RSR, Mask: CPURSTF} }
func D1RSTF_(p *Periph) mmio.RM32[RSR]    { return mmio.RM32[RSR]{R: &p.RSR, Mask: D1RSTF} }
func D2RSTF_(p *Periph) mmio.RM32[RSR]    { return mmio.RM32[RSR]{R: &p.RSR, Mask: D2RSTF} }
func BORRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{R: &p.RSR, Mask: BORRSTF} }
func PINRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{R: &p.RSR, Mask: PINRSTF} }
func PORRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{R: &p.RSR, Mask: PORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{R: &p.RSR, Mask: SFTRSTF} }
func IWDG1RSTF_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{R: &p.RSR, Mask: IWDG1RSTF} }
func WWDG1RSTF_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{R: &p.RSR, Mask: WWDG1RSTF} }
func LPWRRSTF_(p *Periph) mmio.RM32[RSR]  { return mmio.RM32[RSR]{R: &p.RSR, Mask: LPWRRSTF} }

type AHB3ENR uint32

func MDMAEN_(p *Periph) mmio.RM32[AHB3ENR]  { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: MDMAEN} }
func DMA2DEN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: DMA2DEN} }
func JPGDECEN_(p *Periph) mmio.RM32[AHB3ENR] {
	return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: JPGDECEN}
}
func FMCEN_(p *Periph) mmio.RM32[AHB3ENR]  { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: FMCEN} }
func QSPIEN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: QSPIEN} }
func SDMMC1EN_(p *Periph) mmio.RM32[AHB3ENR] {
	return mmio.RM32[AHB3ENR]{R: &p.AHB3ENR, Mask: SDMMC1EN}
}

type AHB1ENR uint32

func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: DMA2EN} }
func ADC12EN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: ADC12EN} }
func ETH1MACEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: ETH1MACEN}
}
func ETH1TXEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: ETH1TXEN}
}
func ETH1RXEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: ETH1RXEN}
}
func USB2OTGHSULPIEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: USB2OTGHSULPIEN}
}
func USB1OTGEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: USB1OTGEN}
}
func USB1ULPIEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: USB1ULPIEN}
}
func USB2OTGEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: USB2OTGEN}
}
func USB2ULPIEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{R: &p.AHB1ENR, Mask: USB2ULPIEN}
}

type AHB2ENR uint32

func CAMITFEN_(p *Periph) mmio.RM32[AHB2ENR] {
	return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: CAMITFEN}
}
func CRYPTEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: CRYPTEN} }
func HASHEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: HASHEN} }
func RNGEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: RNGEN} }
func SDMMC2EN_(p *Periph) mmio.RM32[AHB2ENR] {
	return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: SDMMC2EN}
}
func SRAM1EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: SRAM1EN} }
func SRAM2EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: SRAM2EN} }
func SRAM3EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{R: &p.AHB2ENR, Mask: SRAM3EN} }

type AHB4ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOGEN} }
func GPIOHEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOHEN} }
func GPIOIEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOIEN} }
func GPIOJEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOJEN} }
func GPIOKEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: GPIOKEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB4ENR]   { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: CRCEN} }
func BDMAEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: BDMAEN} }
func ADC3EN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: ADC3EN} }
func HSEMEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: HSEMEN} }
func BKPRAMEN_(p *Periph) mmio.RM32[AHB4ENR] {
	return mmio.RM32[AHB4ENR]{R: &p.AHB4ENR, Mask: BKPRAMEN}
}

type APB3ENR uint32

func LTDCEN_(p *Periph) mmio.RM32[APB3ENR]  { return mmio.RM32[APB3ENR]{R: &p.APB3ENR, Mask: LTDCEN} }
func WWDG1EN_(p *Periph) mmio.RM32[APB3ENR] { return mmio.RM32[APB3ENR]{R: &p.APB3ENR, Mask: WWDG1EN} }

type APB1LENR uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM7EN} }
func TIM12EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM12EN}
}
func TIM13EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM13EN}
}
func TIM14EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: TIM14EN}
}
func LPTIM1EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: LPTIM1EN}
}
func SPI2EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: SPI3EN} }
func SPDIFRXEN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: SPDIFRXEN}
}
func USART2EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: USART2EN}
}
func USART3EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: USART3EN}
}
func UART4EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: UART4EN}
}
func UART5EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: UART5EN}
}
func I2C1EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: I2C2EN} }
func I2C3EN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: I2C3EN} }
func CECEN_(p *Periph) mmio.RM32[APB1LENR]  { return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: CECEN} }
func DAC12EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: DAC12EN}
}
func USART7EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: USART7EN}
}
func USART8EN_(p *Periph) mmio.RM32[APB1LENR] {
	return mmio.RM32[APB1LENR]{R: &p.APB1LENR, Mask: USART8EN}
}

type APB1HENR uint32

func CRSEN_(p *Periph) mmio.RM32[APB1HENR] { return mmio.RM32[APB1HENR]{R: &p.APB1HENR, Mask: CRSEN} }
func SWPEN_(p *Periph) mmio.RM32[APB1HENR] { return mmio.RM32[APB1HENR]{R: &p.APB1HENR, Mask: SWPEN} }
func OPAMPEN_(p *Periph) mmio.RM32[APB1HENR] {
	return mmio.RM32[APB1HENR]{R: &p.APB1HENR, Mask: OPAMPEN}
}
func MDIOSEN_(p *Periph) mmio.RM32[APB1HENR] {
	return mmio.RM32[APB1HENR]{R: &p.APB1HENR, Mask: MDIOSEN}
}
func FDCANEN_(p *Periph) mmio.RM32[APB1HENR] {
	return mmio.RM32[APB1HENR]{R: &p.APB1HENR, Mask: FDCANEN}
}

type APB2ENR uint32

func TIM1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: USART1EN}
}
func USART6EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: USART6EN}
}
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI1EN} }
func SPI4EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI4EN} }
func TIM15EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM15EN} }
func TIM16EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM16EN} }
func TIM17EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: TIM17EN} }
func SPI5EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SPI5EN} }
func SAI1EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SAI1EN} }
func SAI2EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SAI2EN} }
func SAI3EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: SAI3EN} }
func DFSDM1EN_(p *Periph) mmio.RM32[APB2ENR] {
	return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: DFSDM1EN}
}
func HRTIMEN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{R: &p.APB2ENR, Mask: HRTIMEN} }

type APB4ENR uint32

func SYSCFGEN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: SYSCFGEN}
}
func LPUART1EN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: LPUART1EN}
}
func SPI6EN_(p *Periph) mmio.RM32[APB4ENR] { return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: SPI6EN} }
func I2C4EN_(p *Periph) mmio.RM32[APB4ENR] { return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: I2C4EN} }
func LPTIM2EN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: LPTIM2EN}
}
func LPTIM3EN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: LPTIM3EN}
}
func LPTIM4EN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: LPTIM4EN}
}
func LPTIM5EN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: LPTIM5EN}
}
func COMP12EN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: COMP12EN}
}
func VREFEN_(p *Periph) mmio.RM32[APB4ENR] { return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: VREFEN} }
func RTCAPBEN_(p *Periph) mmio.RM32[APB4ENR] {
	return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: RTCAPBEN}
}
func SAI4EN_(p *Periph) mmio.RM32[APB4ENR] { return mmio.RM32[APB4ENR]{R: &p.APB4ENR, Mask: SAI4EN} }

type AHB3LPENR uint32

func MDMALPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: MDMALPEN}
}
func DMA2DLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: DMA2DLPEN}
}
func JPGDECLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: JPGDECLPEN}
}
func FLASHLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: FLASHLPEN}
}
func FMCLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: FMCLPEN}
}
func QSPILPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: QSPILPEN}
}
func SDMMC1LPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: SDMMC1LPEN}
}
func D1DTCM1LPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: D1DTCM1LPEN}
}
func DTCM2LPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: DTCM2LPEN}
}
func ITCMLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: ITCMLPEN}
}
func AXISRAMLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{R: &p.AHB3LPENR, Mask: AXISRAMLPEN}
}

type AHB1LPENR uint32

func DMA1LPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: DMA1LPEN}
}
func DMA2LPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: DMA2LPEN}
}
func ADC12LPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: ADC12LPEN}
}
func ETH1MACLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: ETH1MACLPEN}
}
func ETH1TXLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: ETH1TXLPEN}
}
func ETH1RXLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: ETH1RXLPEN}
}
func USB1OTGHSLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: USB1OTGHSLPEN}
}
func USB1OTGHSULPILPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: USB1OTGHSULPILPEN}
}
func USB2OTGHSLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: USB2OTGHSLPEN}
}
func USB2OTGHSULPILPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{R: &p.AHB1LPENR, Mask: USB2OTGHSULPILPEN}
}

type AHB2LPENR uint32

func CAMITFLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: CAMITFLPEN}
}
func CRYPTLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: CRYPTLPEN}
}
func HASHLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: HASHLPEN}
}
func RNGLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: RNGLPEN}
}
func SDMMC2LPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: SDMMC2LPEN}
}
func SRAM1LPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: SRAM1LPEN}
}
func SRAM2LPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: SRAM2LPEN}
}
func SRAM3LPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{R: &p.AHB2LPENR, Mask: SRAM3LPEN}
}

type AHB4LPENR uint32

func GPIOALPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOALPEN}
}
func GPIOBLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOBLPEN}
}
func GPIOCLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOCLPEN}
}
func GPIODLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIODLPEN}
}
func GPIOELPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOELPEN}
}
func GPIOFLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOFLPEN}
}
func GPIOGLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOGLPEN}
}
func GPIOHLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOHLPEN}
}
func GPIOILPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOILPEN}
}
func GPIOJLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOJLPEN}
}
func GPIOKLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: GPIOKLPEN}
}
func CRCLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: CRCLPEN}
}
func BDMALPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: BDMALPEN}
}
func ADC3LPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: ADC3LPEN}
}
func BKPRAMLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: BKPRAMLPEN}
}
func SRAM4LPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{R: &p.AHB4LPENR, Mask: SRAM4LPEN}
}

type APB3LPENR uint32

func LTDCLPEN_(p *Periph) mmio.RM32[APB3LPENR] {
	return mmio.RM32[APB3LPENR]{R: &p.APB3LPENR, Mask: LTDCLPEN}
}
func WWDG1LPEN_(p *Periph) mmio.RM32[APB3LPENR] {
	return mmio.RM32[APB3LPENR]{R: &p.APB3LPENR, Mask: WWDG1LPEN}
}

type APB1LLPENR uint32

func TIM2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM2LPEN}
}
func TIM3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM3LPEN}
}
func TIM4LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM4LPEN}
}
func TIM5LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM5LPEN}
}
func TIM6LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM6LPEN}
}
func TIM7LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM7LPEN}
}
func TIM12LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM12LPEN}
}
func TIM13LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM13LPEN}
}
func TIM14LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: TIM14LPEN}
}
func LPTIM1LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: LPTIM1LPEN}
}
func SPI2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: SPI2LPEN}
}
func SPI3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: SPI3LPEN}
}
func SPDIFRXLPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: SPDIFRXLPEN}
}
func USART2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: USART2LPEN}
}
func USART3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: USART3LPEN}
}
func UART4LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: UART4LPEN}
}
func UART5LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: UART5LPEN}
}
func I2C1LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: I2C1LPEN}
}
func I2C2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: I2C2LPEN}
}
func I2C3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: I2C3LPEN}
}
func HDMICECLPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: HDMICECLPEN}
}
func DAC12LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: DAC12LPEN}
}
func USART7LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: USART7LPEN}
}
func USART8LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{R: &p.APB1LLPENR, Mask: USART8LPEN}
}

type APB1HLPENR uint32

func CRSLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{R: &p.APB1HLPENR, Mask: CRSLPEN}
}
func SWPLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{R: &p.APB1HLPENR, Mask: SWPLPEN}
}
func OPAMPLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{R: &p.APB1HLPENR, Mask: OPAMPLPEN}
}
func MDIOSLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{R: &p.APB1HLPENR, Mask: MDIOSLPEN}
}
func FDCANLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{R: &p.APB1HLPENR, Mask: FDCANLPEN}
}

type APB2LPENR uint32

func TIM1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM1LPEN}
}
func TIM8LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM8LPEN}
}
func USART1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: USART1LPEN}
}
func USART6LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: USART6LPEN}
}
func SPI1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SPI1LPEN}
}
func SPI4LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SPI4LPEN}
}
func TIM15LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM15LPEN}
}
func TIM16LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM16LPEN}
}
func TIM17LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: TIM17LPEN}
}
func SPI5LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SPI5LPEN}
}
func SAI1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SAI1LPEN}
}
func SAI2LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SAI2LPEN}
}
func SAI3LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: SAI3LPEN}
}
func DFSDM1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: DFSDM1LPEN}
}
func HRTIMLPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{R: &p.APB2LPENR, Mask: HRTIMLPEN}
}

type APB4LPENR uint32

func SYSCFGLPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: SYSCFGLPEN}
}
func LPUART1LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: LPUART1LPEN}
}
func SPI6LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: SPI6LPEN}
}
func I2C4LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: I2C4LPEN}
}
func LPTIM2LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: LPTIM2LPEN}
}
func LPTIM3LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: LPTIM3LPEN}
}
func LPTIM4LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: LPTIM4LPEN}
}
func LPTIM5LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: LPTIM5LPEN}
}
func COMP12LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: COMP12LPEN}
}
func VREFLPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: VREFLPEN}
}
func RTCAPBLPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: RTCAPBLPEN}
}
func SAI4LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{R: &p.APB4LPENR, Mask: SAI4LPEN}
}
