// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32h7x3

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         RCR
	ICSCR      RICSCR
	CRRCR      RCRRCR
	_          uint32
	CFGR       RCFGR
	_          uint32
	D1CFGR     RD1CFGR
	D2CFGR     RD2CFGR
	D3CFGR     RD3CFGR
	_          uint32
	PLLCKSELR  RPLLCKSELR
	PLLCFGR    RPLLCFGR
	PLL1DIVR   RPLL1DIVR
	PLL1FRACR  RPLL1FRACR
	PLL2DIVR   RPLL2DIVR
	PLL2FRACR  RPLL2FRACR
	PLL3DIVR   RPLL3DIVR
	PLL3FRACR  RPLL3FRACR
	_          uint32
	D1CCIPR    RD1CCIPR
	D2CCIP1R   RD2CCIP1R
	D2CCIP2R   RD2CCIP2R
	D3CCIPR    RD3CCIPR
	_          uint32
	CIER       RCIER
	CIFR       RCIFR
	CICR       RCICR
	_          uint32
	BDCR       RBDCR
	CSR        RCSR
	_          uint32
	AHB3RSTR   RAHB3RSTR
	AHB1RSTR   RAHB1RSTR
	AHB2RSTR   RAHB2RSTR
	AHB4RSTR   RAHB4RSTR
	APB3RSTR   RAPB3RSTR
	APB1LRSTR  RAPB1LRSTR
	APB1HRSTR  RAPB1HRSTR
	APB2RSTR   RAPB2RSTR
	APB4RSTR   RAPB4RSTR
	GCR        RGCR
	_          uint32
	D3AMR      RD3AMR
	_          [9]uint32
	RSR        RRSR
	AHB3ENR    RAHB3ENR
	AHB1ENR    RAHB1ENR
	AHB2ENR    RAHB2ENR
	AHB4ENR    RAHB4ENR
	APB3ENR    RAPB3ENR
	APB1LENR   RAPB1LENR
	APB1HENR   RAPB1HENR
	APB2ENR    RAPB2ENR
	APB4ENR    RAPB4ENR
	_          uint32
	AHB3LPENR  RAHB3LPENR
	AHB1LPENR  RAHB1LPENR
	AHB2LPENR  RAHB2LPENR
	AHB4LPENR  RAHB4LPENR
	APB3LPENR  RAPB3LPENR
	APB1LLPENR RAPB1LLPENR
	APB1HLPENR RAPB1HLPENR
	APB2LPENR  RAPB2LPENR
	APB4LPENR  RAPB4LPENR
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

type RCR struct{ mmio.U32 }

func (r *RCR) LoadBits(mask CR) CR  { return CR(r.U32.LoadBits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) HSION() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSION)}}
}

func (p *Periph) HSIKERON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIKERON)}}
}

func (p *Periph) HSIRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIRDY)}}
}

func (p *Periph) HSIDIV() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIDIV)}}
}

func (p *Periph) HSIDIVF() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIDIVF)}}
}

func (p *Periph) CSION() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CSION)}}
}

func (p *Periph) CSIRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CSIRDY)}}
}

func (p *Periph) CSIKERON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CSIKERON)}}
}

func (p *Periph) RC48ON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(RC48ON)}}
}

func (p *Periph) RC48RDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(RC48RDY)}}
}

func (p *Periph) D1CKRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(D1CKRDY)}}
}

func (p *Periph) D2CKRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(D2CKRDY)}}
}

func (p *Periph) HSEON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSEON)}}
}

func (p *Periph) HSERDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSERDY)}}
}

func (p *Periph) HSEBYP() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSEBYP)}}
}

func (p *Periph) HSECSSON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSECSSON)}}
}

func (p *Periph) PLL1ON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLL1ON)}}
}

func (p *Periph) PLL1RDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLL1RDY)}}
}

func (p *Periph) PLL2ON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLL2ON)}}
}

func (p *Periph) PLL2RDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLL2RDY)}}
}

func (p *Periph) PLL3ON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLL3ON)}}
}

func (p *Periph) PLL3RDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLL3RDY)}}
}

type ICSCR uint32

type RICSCR struct{ mmio.U32 }

func (r *RICSCR) LoadBits(mask ICSCR) ICSCR { return ICSCR(r.U32.LoadBits(uint32(mask))) }
func (r *RICSCR) StoreBits(mask, b ICSCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICSCR) SetBits(mask ICSCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RICSCR) ClearBits(mask ICSCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RICSCR) Load() ICSCR               { return ICSCR(r.U32.Load()) }
func (r *RICSCR) Store(b ICSCR)             { r.U32.Store(uint32(b)) }

type RMICSCR struct{ mmio.UM32 }

func (rm RMICSCR) Load() ICSCR   { return ICSCR(rm.UM32.Load()) }
func (rm RMICSCR) Store(b ICSCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) HSICAL() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(HSICAL)}}
}

func (p *Periph) HSITRIM() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(HSITRIM)}}
}

func (p *Periph) CSICAL() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(CSICAL)}}
}

func (p *Periph) CSITRIM() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(CSITRIM)}}
}

type CRRCR uint32

type RCRRCR struct{ mmio.U32 }

func (r *RCRRCR) LoadBits(mask CRRCR) CRRCR { return CRRCR(r.U32.LoadBits(uint32(mask))) }
func (r *RCRRCR) StoreBits(mask, b CRRCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCRRCR) SetBits(mask CRRCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCRRCR) ClearBits(mask CRRCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCRRCR) Load() CRRCR               { return CRRCR(r.U32.Load()) }
func (r *RCRRCR) Store(b CRRCR)             { r.U32.Store(uint32(b)) }

type RMCRRCR struct{ mmio.UM32 }

func (rm RMCRRCR) Load() CRRCR   { return CRRCR(rm.UM32.Load()) }
func (rm RMCRRCR) Store(b CRRCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RC48CAL() RMCRRCR {
	return RMCRRCR{mmio.UM32{&p.CRRCR.U32, uint32(RC48CAL)}}
}

type CFGR uint32

type RCFGR struct{ mmio.U32 }

func (r *RCFGR) LoadBits(mask CFGR) CFGR { return CFGR(r.U32.LoadBits(uint32(mask))) }
func (r *RCFGR) StoreBits(mask, b CFGR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) SetBits(mask CFGR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR) ClearBits(mask CFGR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR) Load() CFGR              { return CFGR(r.U32.Load()) }
func (r *RCFGR) Store(b CFGR)            { r.U32.Store(uint32(b)) }

type RMCFGR struct{ mmio.UM32 }

func (rm RMCFGR) Load() CFGR   { return CFGR(rm.UM32.Load()) }
func (rm RMCFGR) Store(b CFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SW() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(SW)}}
}

func (p *Periph) SWS() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(SWS)}}
}

func (p *Periph) STOPWUCK() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(STOPWUCK)}}
}

func (p *Periph) STOPKERWUCK() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(STOPKERWUCK)}}
}

func (p *Periph) RTCPRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(RTCPRE)}}
}

func (p *Periph) HRTIMSEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(HRTIMSEL)}}
}

func (p *Periph) TIMPRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(TIMPRE)}}
}

func (p *Periph) MCO1PRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCO1PRE)}}
}

func (p *Periph) MCO1SEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCO1SEL)}}
}

func (p *Periph) MCO2PRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCO2PRE)}}
}

func (p *Periph) MCO2SEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCO2SEL)}}
}

type D1CFGR uint32

type RD1CFGR struct{ mmio.U32 }

func (r *RD1CFGR) LoadBits(mask D1CFGR) D1CFGR { return D1CFGR(r.U32.LoadBits(uint32(mask))) }
func (r *RD1CFGR) StoreBits(mask, b D1CFGR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD1CFGR) SetBits(mask D1CFGR)         { r.U32.SetBits(uint32(mask)) }
func (r *RD1CFGR) ClearBits(mask D1CFGR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RD1CFGR) Load() D1CFGR                { return D1CFGR(r.U32.Load()) }
func (r *RD1CFGR) Store(b D1CFGR)              { r.U32.Store(uint32(b)) }

type RMD1CFGR struct{ mmio.UM32 }

func (rm RMD1CFGR) Load() D1CFGR   { return D1CFGR(rm.UM32.Load()) }
func (rm RMD1CFGR) Store(b D1CFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) HPRE() RMD1CFGR {
	return RMD1CFGR{mmio.UM32{&p.D1CFGR.U32, uint32(HPRE)}}
}

func (p *Periph) D1PPRE() RMD1CFGR {
	return RMD1CFGR{mmio.UM32{&p.D1CFGR.U32, uint32(D1PPRE)}}
}

func (p *Periph) D1CPRE() RMD1CFGR {
	return RMD1CFGR{mmio.UM32{&p.D1CFGR.U32, uint32(D1CPRE)}}
}

type D2CFGR uint32

type RD2CFGR struct{ mmio.U32 }

func (r *RD2CFGR) LoadBits(mask D2CFGR) D2CFGR { return D2CFGR(r.U32.LoadBits(uint32(mask))) }
func (r *RD2CFGR) StoreBits(mask, b D2CFGR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD2CFGR) SetBits(mask D2CFGR)         { r.U32.SetBits(uint32(mask)) }
func (r *RD2CFGR) ClearBits(mask D2CFGR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RD2CFGR) Load() D2CFGR                { return D2CFGR(r.U32.Load()) }
func (r *RD2CFGR) Store(b D2CFGR)              { r.U32.Store(uint32(b)) }

type RMD2CFGR struct{ mmio.UM32 }

func (rm RMD2CFGR) Load() D2CFGR   { return D2CFGR(rm.UM32.Load()) }
func (rm RMD2CFGR) Store(b D2CFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) D2PPRE1() RMD2CFGR {
	return RMD2CFGR{mmio.UM32{&p.D2CFGR.U32, uint32(D2PPRE1)}}
}

func (p *Periph) D2PPRE2() RMD2CFGR {
	return RMD2CFGR{mmio.UM32{&p.D2CFGR.U32, uint32(D2PPRE2)}}
}

type D3CFGR uint32

type RD3CFGR struct{ mmio.U32 }

func (r *RD3CFGR) LoadBits(mask D3CFGR) D3CFGR { return D3CFGR(r.U32.LoadBits(uint32(mask))) }
func (r *RD3CFGR) StoreBits(mask, b D3CFGR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3CFGR) SetBits(mask D3CFGR)         { r.U32.SetBits(uint32(mask)) }
func (r *RD3CFGR) ClearBits(mask D3CFGR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RD3CFGR) Load() D3CFGR                { return D3CFGR(r.U32.Load()) }
func (r *RD3CFGR) Store(b D3CFGR)              { r.U32.Store(uint32(b)) }

type RMD3CFGR struct{ mmio.UM32 }

func (rm RMD3CFGR) Load() D3CFGR   { return D3CFGR(rm.UM32.Load()) }
func (rm RMD3CFGR) Store(b D3CFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) D3PPRE() RMD3CFGR {
	return RMD3CFGR{mmio.UM32{&p.D3CFGR.U32, uint32(D3PPRE)}}
}

type PLLCKSELR uint32

type RPLLCKSELR struct{ mmio.U32 }

func (r *RPLLCKSELR) LoadBits(mask PLLCKSELR) PLLCKSELR {
	return PLLCKSELR(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLLCKSELR) StoreBits(mask, b PLLCKSELR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLLCKSELR) SetBits(mask PLLCKSELR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLLCKSELR) ClearBits(mask PLLCKSELR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLLCKSELR) Load() PLLCKSELR             { return PLLCKSELR(r.U32.Load()) }
func (r *RPLLCKSELR) Store(b PLLCKSELR)           { r.U32.Store(uint32(b)) }

type RMPLLCKSELR struct{ mmio.UM32 }

func (rm RMPLLCKSELR) Load() PLLCKSELR   { return PLLCKSELR(rm.UM32.Load()) }
func (rm RMPLLCKSELR) Store(b PLLCKSELR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PLLSRC() RMPLLCKSELR {
	return RMPLLCKSELR{mmio.UM32{&p.PLLCKSELR.U32, uint32(PLLSRC)}}
}

func (p *Periph) DIVM1() RMPLLCKSELR {
	return RMPLLCKSELR{mmio.UM32{&p.PLLCKSELR.U32, uint32(DIVM1)}}
}

func (p *Periph) DIVM2() RMPLLCKSELR {
	return RMPLLCKSELR{mmio.UM32{&p.PLLCKSELR.U32, uint32(DIVM2)}}
}

func (p *Periph) DIVM3() RMPLLCKSELR {
	return RMPLLCKSELR{mmio.UM32{&p.PLLCKSELR.U32, uint32(DIVM3)}}
}

type PLLCFGR uint32

type RPLLCFGR struct{ mmio.U32 }

func (r *RPLLCFGR) LoadBits(mask PLLCFGR) PLLCFGR { return PLLCFGR(r.U32.LoadBits(uint32(mask))) }
func (r *RPLLCFGR) StoreBits(mask, b PLLCFGR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLLCFGR) SetBits(mask PLLCFGR)          { r.U32.SetBits(uint32(mask)) }
func (r *RPLLCFGR) ClearBits(mask PLLCFGR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RPLLCFGR) Load() PLLCFGR                 { return PLLCFGR(r.U32.Load()) }
func (r *RPLLCFGR) Store(b PLLCFGR)               { r.U32.Store(uint32(b)) }

type RMPLLCFGR struct{ mmio.UM32 }

func (rm RMPLLCFGR) Load() PLLCFGR   { return PLLCFGR(rm.UM32.Load()) }
func (rm RMPLLCFGR) Store(b PLLCFGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PLL1FRACEN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL1FRACEN)}}
}

func (p *Periph) PLL1VCOSEL() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL1VCOSEL)}}
}

func (p *Periph) PLL1RGE() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL1RGE)}}
}

func (p *Periph) PLL2FRACEN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL2FRACEN)}}
}

func (p *Periph) PLL2VCOSEL() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL2VCOSEL)}}
}

func (p *Periph) PLL2RGE() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL2RGE)}}
}

func (p *Periph) PLL3FRACEN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL3FRACEN)}}
}

func (p *Periph) PLL3VCOSEL() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL3VCOSEL)}}
}

func (p *Periph) PLL3RGE() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLL3RGE)}}
}

func (p *Periph) DIVP1EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVP1EN)}}
}

func (p *Periph) DIVQ1EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVQ1EN)}}
}

func (p *Periph) DIVR1EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVR1EN)}}
}

func (p *Periph) DIVP2EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVP2EN)}}
}

func (p *Periph) DIVQ2EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVQ2EN)}}
}

func (p *Periph) DIVR2EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVR2EN)}}
}

func (p *Periph) DIVP3EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVP3EN)}}
}

func (p *Periph) DIVQ3EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVQ3EN)}}
}

func (p *Periph) DIVR3EN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(DIVR3EN)}}
}

type PLL1DIVR uint32

type RPLL1DIVR struct{ mmio.U32 }

func (r *RPLL1DIVR) LoadBits(mask PLL1DIVR) PLL1DIVR { return PLL1DIVR(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL1DIVR) StoreBits(mask, b PLL1DIVR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL1DIVR) SetBits(mask PLL1DIVR)           { r.U32.SetBits(uint32(mask)) }
func (r *RPLL1DIVR) ClearBits(mask PLL1DIVR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL1DIVR) Load() PLL1DIVR                  { return PLL1DIVR(r.U32.Load()) }
func (r *RPLL1DIVR) Store(b PLL1DIVR)                { r.U32.Store(uint32(b)) }

type RMPLL1DIVR struct{ mmio.UM32 }

func (rm RMPLL1DIVR) Load() PLL1DIVR   { return PLL1DIVR(rm.UM32.Load()) }
func (rm RMPLL1DIVR) Store(b PLL1DIVR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DIVN1() RMPLL1DIVR {
	return RMPLL1DIVR{mmio.UM32{&p.PLL1DIVR.U32, uint32(DIVN1)}}
}

func (p *Periph) DIVP1() RMPLL1DIVR {
	return RMPLL1DIVR{mmio.UM32{&p.PLL1DIVR.U32, uint32(DIVP1)}}
}

func (p *Periph) DIVQ1() RMPLL1DIVR {
	return RMPLL1DIVR{mmio.UM32{&p.PLL1DIVR.U32, uint32(DIVQ1)}}
}

func (p *Periph) DIVR1() RMPLL1DIVR {
	return RMPLL1DIVR{mmio.UM32{&p.PLL1DIVR.U32, uint32(DIVR1)}}
}

type PLL1FRACR uint32

type RPLL1FRACR struct{ mmio.U32 }

func (r *RPLL1FRACR) LoadBits(mask PLL1FRACR) PLL1FRACR {
	return PLL1FRACR(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLL1FRACR) StoreBits(mask, b PLL1FRACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL1FRACR) SetBits(mask PLL1FRACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL1FRACR) ClearBits(mask PLL1FRACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL1FRACR) Load() PLL1FRACR             { return PLL1FRACR(r.U32.Load()) }
func (r *RPLL1FRACR) Store(b PLL1FRACR)           { r.U32.Store(uint32(b)) }

type RMPLL1FRACR struct{ mmio.UM32 }

func (rm RMPLL1FRACR) Load() PLL1FRACR   { return PLL1FRACR(rm.UM32.Load()) }
func (rm RMPLL1FRACR) Store(b PLL1FRACR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FRACN1() RMPLL1FRACR {
	return RMPLL1FRACR{mmio.UM32{&p.PLL1FRACR.U32, uint32(FRACN1)}}
}

type PLL2DIVR uint32

type RPLL2DIVR struct{ mmio.U32 }

func (r *RPLL2DIVR) LoadBits(mask PLL2DIVR) PLL2DIVR { return PLL2DIVR(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL2DIVR) StoreBits(mask, b PLL2DIVR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL2DIVR) SetBits(mask PLL2DIVR)           { r.U32.SetBits(uint32(mask)) }
func (r *RPLL2DIVR) ClearBits(mask PLL2DIVR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL2DIVR) Load() PLL2DIVR                  { return PLL2DIVR(r.U32.Load()) }
func (r *RPLL2DIVR) Store(b PLL2DIVR)                { r.U32.Store(uint32(b)) }

type RMPLL2DIVR struct{ mmio.UM32 }

func (rm RMPLL2DIVR) Load() PLL2DIVR   { return PLL2DIVR(rm.UM32.Load()) }
func (rm RMPLL2DIVR) Store(b PLL2DIVR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DIVN2() RMPLL2DIVR {
	return RMPLL2DIVR{mmio.UM32{&p.PLL2DIVR.U32, uint32(DIVN2)}}
}

func (p *Periph) DIVP2() RMPLL2DIVR {
	return RMPLL2DIVR{mmio.UM32{&p.PLL2DIVR.U32, uint32(DIVP2)}}
}

func (p *Periph) DIVQ2() RMPLL2DIVR {
	return RMPLL2DIVR{mmio.UM32{&p.PLL2DIVR.U32, uint32(DIVQ2)}}
}

func (p *Periph) DIVR2() RMPLL2DIVR {
	return RMPLL2DIVR{mmio.UM32{&p.PLL2DIVR.U32, uint32(DIVR2)}}
}

type PLL2FRACR uint32

type RPLL2FRACR struct{ mmio.U32 }

func (r *RPLL2FRACR) LoadBits(mask PLL2FRACR) PLL2FRACR {
	return PLL2FRACR(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLL2FRACR) StoreBits(mask, b PLL2FRACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL2FRACR) SetBits(mask PLL2FRACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL2FRACR) ClearBits(mask PLL2FRACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL2FRACR) Load() PLL2FRACR             { return PLL2FRACR(r.U32.Load()) }
func (r *RPLL2FRACR) Store(b PLL2FRACR)           { r.U32.Store(uint32(b)) }

type RMPLL2FRACR struct{ mmio.UM32 }

func (rm RMPLL2FRACR) Load() PLL2FRACR   { return PLL2FRACR(rm.UM32.Load()) }
func (rm RMPLL2FRACR) Store(b PLL2FRACR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FRACN2() RMPLL2FRACR {
	return RMPLL2FRACR{mmio.UM32{&p.PLL2FRACR.U32, uint32(FRACN2)}}
}

type PLL3DIVR uint32

type RPLL3DIVR struct{ mmio.U32 }

func (r *RPLL3DIVR) LoadBits(mask PLL3DIVR) PLL3DIVR { return PLL3DIVR(r.U32.LoadBits(uint32(mask))) }
func (r *RPLL3DIVR) StoreBits(mask, b PLL3DIVR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL3DIVR) SetBits(mask PLL3DIVR)           { r.U32.SetBits(uint32(mask)) }
func (r *RPLL3DIVR) ClearBits(mask PLL3DIVR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL3DIVR) Load() PLL3DIVR                  { return PLL3DIVR(r.U32.Load()) }
func (r *RPLL3DIVR) Store(b PLL3DIVR)                { r.U32.Store(uint32(b)) }

type RMPLL3DIVR struct{ mmio.UM32 }

func (rm RMPLL3DIVR) Load() PLL3DIVR   { return PLL3DIVR(rm.UM32.Load()) }
func (rm RMPLL3DIVR) Store(b PLL3DIVR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DIVN3() RMPLL3DIVR {
	return RMPLL3DIVR{mmio.UM32{&p.PLL3DIVR.U32, uint32(DIVN3)}}
}

func (p *Periph) DIVP3() RMPLL3DIVR {
	return RMPLL3DIVR{mmio.UM32{&p.PLL3DIVR.U32, uint32(DIVP3)}}
}

func (p *Periph) DIVQ3() RMPLL3DIVR {
	return RMPLL3DIVR{mmio.UM32{&p.PLL3DIVR.U32, uint32(DIVQ3)}}
}

func (p *Periph) DIVR3() RMPLL3DIVR {
	return RMPLL3DIVR{mmio.UM32{&p.PLL3DIVR.U32, uint32(DIVR3)}}
}

type PLL3FRACR uint32

type RPLL3FRACR struct{ mmio.U32 }

func (r *RPLL3FRACR) LoadBits(mask PLL3FRACR) PLL3FRACR {
	return PLL3FRACR(r.U32.LoadBits(uint32(mask)))
}
func (r *RPLL3FRACR) StoreBits(mask, b PLL3FRACR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLL3FRACR) SetBits(mask PLL3FRACR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLL3FRACR) ClearBits(mask PLL3FRACR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLL3FRACR) Load() PLL3FRACR             { return PLL3FRACR(r.U32.Load()) }
func (r *RPLL3FRACR) Store(b PLL3FRACR)           { r.U32.Store(uint32(b)) }

type RMPLL3FRACR struct{ mmio.UM32 }

func (rm RMPLL3FRACR) Load() PLL3FRACR   { return PLL3FRACR(rm.UM32.Load()) }
func (rm RMPLL3FRACR) Store(b PLL3FRACR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FRACN3() RMPLL3FRACR {
	return RMPLL3FRACR{mmio.UM32{&p.PLL3FRACR.U32, uint32(FRACN3)}}
}

type D1CCIPR uint32

type RD1CCIPR struct{ mmio.U32 }

func (r *RD1CCIPR) LoadBits(mask D1CCIPR) D1CCIPR { return D1CCIPR(r.U32.LoadBits(uint32(mask))) }
func (r *RD1CCIPR) StoreBits(mask, b D1CCIPR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD1CCIPR) SetBits(mask D1CCIPR)          { r.U32.SetBits(uint32(mask)) }
func (r *RD1CCIPR) ClearBits(mask D1CCIPR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD1CCIPR) Load() D1CCIPR                 { return D1CCIPR(r.U32.Load()) }
func (r *RD1CCIPR) Store(b D1CCIPR)               { r.U32.Store(uint32(b)) }

type RMD1CCIPR struct{ mmio.UM32 }

func (rm RMD1CCIPR) Load() D1CCIPR   { return D1CCIPR(rm.UM32.Load()) }
func (rm RMD1CCIPR) Store(b D1CCIPR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FMCSRC() RMD1CCIPR {
	return RMD1CCIPR{mmio.UM32{&p.D1CCIPR.U32, uint32(FMCSRC)}}
}

func (p *Periph) QSPISRC() RMD1CCIPR {
	return RMD1CCIPR{mmio.UM32{&p.D1CCIPR.U32, uint32(QSPISRC)}}
}

func (p *Periph) SDMMCSRC() RMD1CCIPR {
	return RMD1CCIPR{mmio.UM32{&p.D1CCIPR.U32, uint32(SDMMCSRC)}}
}

func (p *Periph) CKPERSRC() RMD1CCIPR {
	return RMD1CCIPR{mmio.UM32{&p.D1CCIPR.U32, uint32(CKPERSRC)}}
}

type D2CCIP1R uint32

type RD2CCIP1R struct{ mmio.U32 }

func (r *RD2CCIP1R) LoadBits(mask D2CCIP1R) D2CCIP1R { return D2CCIP1R(r.U32.LoadBits(uint32(mask))) }
func (r *RD2CCIP1R) StoreBits(mask, b D2CCIP1R)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD2CCIP1R) SetBits(mask D2CCIP1R)           { r.U32.SetBits(uint32(mask)) }
func (r *RD2CCIP1R) ClearBits(mask D2CCIP1R)         { r.U32.ClearBits(uint32(mask)) }
func (r *RD2CCIP1R) Load() D2CCIP1R                  { return D2CCIP1R(r.U32.Load()) }
func (r *RD2CCIP1R) Store(b D2CCIP1R)                { r.U32.Store(uint32(b)) }

type RMD2CCIP1R struct{ mmio.UM32 }

func (rm RMD2CCIP1R) Load() D2CCIP1R   { return D2CCIP1R(rm.UM32.Load()) }
func (rm RMD2CCIP1R) Store(b D2CCIP1R) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SAI1SRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(SAI1SRC)}}
}

func (p *Periph) SAI23SRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(SAI23SRC)}}
}

func (p *Periph) SPI123SRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(SPI123SRC)}}
}

func (p *Periph) SPI45SRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(SPI45SRC)}}
}

func (p *Periph) SPDIFSRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(SPDIFSRC)}}
}

func (p *Periph) DFSDM1SRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(DFSDM1SRC)}}
}

func (p *Periph) FDCANSRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(FDCANSRC)}}
}

func (p *Periph) SWPSRC() RMD2CCIP1R {
	return RMD2CCIP1R{mmio.UM32{&p.D2CCIP1R.U32, uint32(SWPSRC)}}
}

type D2CCIP2R uint32

type RD2CCIP2R struct{ mmio.U32 }

func (r *RD2CCIP2R) LoadBits(mask D2CCIP2R) D2CCIP2R { return D2CCIP2R(r.U32.LoadBits(uint32(mask))) }
func (r *RD2CCIP2R) StoreBits(mask, b D2CCIP2R)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD2CCIP2R) SetBits(mask D2CCIP2R)           { r.U32.SetBits(uint32(mask)) }
func (r *RD2CCIP2R) ClearBits(mask D2CCIP2R)         { r.U32.ClearBits(uint32(mask)) }
func (r *RD2CCIP2R) Load() D2CCIP2R                  { return D2CCIP2R(r.U32.Load()) }
func (r *RD2CCIP2R) Store(b D2CCIP2R)                { r.U32.Store(uint32(b)) }

type RMD2CCIP2R struct{ mmio.UM32 }

func (rm RMD2CCIP2R) Load() D2CCIP2R   { return D2CCIP2R(rm.UM32.Load()) }
func (rm RMD2CCIP2R) Store(b D2CCIP2R) { rm.UM32.Store(uint32(b)) }

func (p *Periph) USART234578SRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(USART234578SRC)}}
}

func (p *Periph) USART16SRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(USART16SRC)}}
}

func (p *Periph) RNGSRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(RNGSRC)}}
}

func (p *Periph) I2C123SRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(I2C123SRC)}}
}

func (p *Periph) USBSRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(USBSRC)}}
}

func (p *Periph) CECSRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(CECSRC)}}
}

func (p *Periph) LPTIM1SRC() RMD2CCIP2R {
	return RMD2CCIP2R{mmio.UM32{&p.D2CCIP2R.U32, uint32(LPTIM1SRC)}}
}

type D3CCIPR uint32

type RD3CCIPR struct{ mmio.U32 }

func (r *RD3CCIPR) LoadBits(mask D3CCIPR) D3CCIPR { return D3CCIPR(r.U32.LoadBits(uint32(mask))) }
func (r *RD3CCIPR) StoreBits(mask, b D3CCIPR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3CCIPR) SetBits(mask D3CCIPR)          { r.U32.SetBits(uint32(mask)) }
func (r *RD3CCIPR) ClearBits(mask D3CCIPR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD3CCIPR) Load() D3CCIPR                 { return D3CCIPR(r.U32.Load()) }
func (r *RD3CCIPR) Store(b D3CCIPR)               { r.U32.Store(uint32(b)) }

type RMD3CCIPR struct{ mmio.UM32 }

func (rm RMD3CCIPR) Load() D3CCIPR   { return D3CCIPR(rm.UM32.Load()) }
func (rm RMD3CCIPR) Store(b D3CCIPR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LPUART1SRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(LPUART1SRC)}}
}

func (p *Periph) I2C4SRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(I2C4SRC)}}
}

func (p *Periph) LPTIM2SRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(LPTIM2SRC)}}
}

func (p *Periph) LPTIM345SRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(LPTIM345SRC)}}
}

func (p *Periph) ADCSRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(ADCSRC)}}
}

func (p *Periph) SAI4ASRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(SAI4ASRC)}}
}

func (p *Periph) SAI4BSRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(SAI4BSRC)}}
}

func (p *Periph) SPI6SRC() RMD3CCIPR {
	return RMD3CCIPR{mmio.UM32{&p.D3CCIPR.U32, uint32(SPI6SRC)}}
}

type CIER uint32

type RCIER struct{ mmio.U32 }

func (r *RCIER) LoadBits(mask CIER) CIER { return CIER(r.U32.LoadBits(uint32(mask))) }
func (r *RCIER) StoreBits(mask, b CIER)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIER) SetBits(mask CIER)       { r.U32.SetBits(uint32(mask)) }
func (r *RCIER) ClearBits(mask CIER)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCIER) Load() CIER              { return CIER(r.U32.Load()) }
func (r *RCIER) Store(b CIER)            { r.U32.Store(uint32(b)) }

type RMCIER struct{ mmio.UM32 }

func (rm RMCIER) Load() CIER   { return CIER(rm.UM32.Load()) }
func (rm RMCIER) Store(b CIER) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSIRDYIE)}}
}

func (p *Periph) LSERDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSERDYIE)}}
}

func (p *Periph) HSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(HSIRDYIE)}}
}

func (p *Periph) HSERDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(HSERDYIE)}}
}

func (p *Periph) CSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(CSIRDYIE)}}
}

func (p *Periph) RC48RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(RC48RDYIE)}}
}

func (p *Periph) PLL1RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLL1RDYIE)}}
}

func (p *Periph) PLL2RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLL2RDYIE)}}
}

func (p *Periph) PLL3RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLL3RDYIE)}}
}

func (p *Periph) LSECSSIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSECSSIE)}}
}

type CIFR uint32

type RCIFR struct{ mmio.U32 }

func (r *RCIFR) LoadBits(mask CIFR) CIFR { return CIFR(r.U32.LoadBits(uint32(mask))) }
func (r *RCIFR) StoreBits(mask, b CIFR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIFR) SetBits(mask CIFR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCIFR) ClearBits(mask CIFR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCIFR) Load() CIFR              { return CIFR(r.U32.Load()) }
func (r *RCIFR) Store(b CIFR)            { r.U32.Store(uint32(b)) }

type RMCIFR struct{ mmio.UM32 }

func (rm RMCIFR) Load() CIFR   { return CIFR(rm.UM32.Load()) }
func (rm RMCIFR) Store(b CIFR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSIRDYF)}}
}

func (p *Periph) LSERDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSERDYF)}}
}

func (p *Periph) HSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSIRDYF)}}
}

func (p *Periph) HSERDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSERDYF)}}
}

func (p *Periph) CSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(CSIRDYF)}}
}

func (p *Periph) RC48RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(RC48RDYF)}}
}

func (p *Periph) PLL1RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLL1RDYF)}}
}

func (p *Periph) PLL2RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLL2RDYF)}}
}

func (p *Periph) PLL3RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLL3RDYF)}}
}

func (p *Periph) LSECSSF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSECSSF)}}
}

func (p *Periph) HSECSSF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSECSSF)}}
}

type CICR uint32

type RCICR struct{ mmio.U32 }

func (r *RCICR) LoadBits(mask CICR) CICR { return CICR(r.U32.LoadBits(uint32(mask))) }
func (r *RCICR) StoreBits(mask, b CICR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR) SetBits(mask CICR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCICR) ClearBits(mask CICR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR) Load() CICR              { return CICR(r.U32.Load()) }
func (r *RCICR) Store(b CICR)            { r.U32.Store(uint32(b)) }

type RMCICR struct{ mmio.UM32 }

func (rm RMCICR) Load() CICR   { return CICR(rm.UM32.Load()) }
func (rm RMCICR) Store(b CICR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSIRDYC)}}
}

func (p *Periph) LSERDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSERDYC)}}
}

func (p *Periph) HSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSIRDYC)}}
}

func (p *Periph) HSERDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSERDYC)}}
}

func (p *Periph) HSE_ready_Interrupt_Clear() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSE_ready_Interrupt_Clear)}}
}

func (p *Periph) RC48RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(RC48RDYC)}}
}

func (p *Periph) PLL1RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLL1RDYC)}}
}

func (p *Periph) PLL2RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLL2RDYC)}}
}

func (p *Periph) PLL3RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLL3RDYC)}}
}

func (p *Periph) LSECSSC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSECSSC)}}
}

func (p *Periph) HSECSSC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSECSSC)}}
}

type BDCR uint32

type RBDCR struct{ mmio.U32 }

func (r *RBDCR) LoadBits(mask BDCR) BDCR { return BDCR(r.U32.LoadBits(uint32(mask))) }
func (r *RBDCR) StoreBits(mask, b BDCR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBDCR) SetBits(mask BDCR)       { r.U32.SetBits(uint32(mask)) }
func (r *RBDCR) ClearBits(mask BDCR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RBDCR) Load() BDCR              { return BDCR(r.U32.Load()) }
func (r *RBDCR) Store(b BDCR)            { r.U32.Store(uint32(b)) }

type RMBDCR struct{ mmio.UM32 }

func (rm RMBDCR) Load() BDCR   { return BDCR(rm.UM32.Load()) }
func (rm RMBDCR) Store(b BDCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSEON() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEON)}}
}

func (p *Periph) LSERDY() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSERDY)}}
}

func (p *Periph) LSEBYP() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEBYP)}}
}

func (p *Periph) LSEDRV() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEDRV)}}
}

func (p *Periph) LSECSSON() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSECSSON)}}
}

func (p *Periph) LSECSSD() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSECSSD)}}
}

func (p *Periph) RTCSRC() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(RTCSRC)}}
}

func (p *Periph) RTCEN() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(RTCEN)}}
}

func (p *Periph) VSWRST() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(VSWRST)}}
}

type CSR uint32

type RCSR struct{ mmio.U32 }

func (r *RCSR) LoadBits(mask CSR) CSR { return CSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LSION() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LSION)}}
}

func (p *Periph) LSIRDY() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LSIRDY)}}
}

type AHB3RSTR uint32

type RAHB3RSTR struct{ mmio.U32 }

func (r *RAHB3RSTR) LoadBits(mask AHB3RSTR) AHB3RSTR { return AHB3RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB3RSTR) StoreBits(mask, b AHB3RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3RSTR) SetBits(mask AHB3RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3RSTR) ClearBits(mask AHB3RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3RSTR) Load() AHB3RSTR                  { return AHB3RSTR(r.U32.Load()) }
func (r *RAHB3RSTR) Store(b AHB3RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB3RSTR struct{ mmio.UM32 }

func (rm RMAHB3RSTR) Load() AHB3RSTR   { return AHB3RSTR(rm.UM32.Load()) }
func (rm RMAHB3RSTR) Store(b AHB3RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MDMARST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(MDMARST)}}
}

func (p *Periph) DMA2DRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(DMA2DRST)}}
}

func (p *Periph) JPGDECRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(JPGDECRST)}}
}

func (p *Periph) FMCRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(FMCRST)}}
}

func (p *Periph) QSPIRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(QSPIRST)}}
}

func (p *Periph) SDMMC1RST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(SDMMC1RST)}}
}

func (p *Periph) CPURST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(CPURST)}}
}

type AHB1RSTR uint32

type RAHB1RSTR struct{ mmio.U32 }

func (r *RAHB1RSTR) LoadBits(mask AHB1RSTR) AHB1RSTR { return AHB1RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB1RSTR) StoreBits(mask, b AHB1RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1RSTR) SetBits(mask AHB1RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1RSTR) ClearBits(mask AHB1RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1RSTR) Load() AHB1RSTR                  { return AHB1RSTR(r.U32.Load()) }
func (r *RAHB1RSTR) Store(b AHB1RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB1RSTR struct{ mmio.UM32 }

func (rm RMAHB1RSTR) Load() AHB1RSTR   { return AHB1RSTR(rm.UM32.Load()) }
func (rm RMAHB1RSTR) Store(b AHB1RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DMA1RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA1RST)}}
}

func (p *Periph) DMA2RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA2RST)}}
}

func (p *Periph) ADC12RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(ADC12RST)}}
}

func (p *Periph) ETH1MACRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(ETH1MACRST)}}
}

func (p *Periph) USB1OTGRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(USB1OTGRST)}}
}

func (p *Periph) USB2OTGRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(USB2OTGRST)}}
}

type AHB2RSTR uint32

type RAHB2RSTR struct{ mmio.U32 }

func (r *RAHB2RSTR) LoadBits(mask AHB2RSTR) AHB2RSTR { return AHB2RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB2RSTR) StoreBits(mask, b AHB2RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2RSTR) SetBits(mask AHB2RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2RSTR) ClearBits(mask AHB2RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2RSTR) Load() AHB2RSTR                  { return AHB2RSTR(r.U32.Load()) }
func (r *RAHB2RSTR) Store(b AHB2RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB2RSTR struct{ mmio.UM32 }

func (rm RMAHB2RSTR) Load() AHB2RSTR   { return AHB2RSTR(rm.UM32.Load()) }
func (rm RMAHB2RSTR) Store(b AHB2RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CAMITFRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(CAMITFRST)}}
}

func (p *Periph) CRYPTRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(CRYPTRST)}}
}

func (p *Periph) HASHRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(HASHRST)}}
}

func (p *Periph) RNGRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(RNGRST)}}
}

func (p *Periph) SDMMC2RST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(SDMMC2RST)}}
}

type AHB4RSTR uint32

type RAHB4RSTR struct{ mmio.U32 }

func (r *RAHB4RSTR) LoadBits(mask AHB4RSTR) AHB4RSTR { return AHB4RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB4RSTR) StoreBits(mask, b AHB4RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB4RSTR) SetBits(mask AHB4RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAHB4RSTR) ClearBits(mask AHB4RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB4RSTR) Load() AHB4RSTR                  { return AHB4RSTR(r.U32.Load()) }
func (r *RAHB4RSTR) Store(b AHB4RSTR)                { r.U32.Store(uint32(b)) }

type RMAHB4RSTR struct{ mmio.UM32 }

func (rm RMAHB4RSTR) Load() AHB4RSTR   { return AHB4RSTR(rm.UM32.Load()) }
func (rm RMAHB4RSTR) Store(b AHB4RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) GPIOARST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOARST)}}
}

func (p *Periph) GPIOBRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOBRST)}}
}

func (p *Periph) GPIOCRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOCRST)}}
}

func (p *Periph) GPIODRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIODRST)}}
}

func (p *Periph) GPIOERST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOERST)}}
}

func (p *Periph) GPIOFRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOFRST)}}
}

func (p *Periph) GPIOGRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOGRST)}}
}

func (p *Periph) GPIOHRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOHRST)}}
}

func (p *Periph) GPIOIRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOIRST)}}
}

func (p *Periph) GPIOJRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOJRST)}}
}

func (p *Periph) GPIOKRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(GPIOKRST)}}
}

func (p *Periph) CRCRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(CRCRST)}}
}

func (p *Periph) BDMARST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(BDMARST)}}
}

func (p *Periph) ADC3RST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(ADC3RST)}}
}

func (p *Periph) HSEMRST() RMAHB4RSTR {
	return RMAHB4RSTR{mmio.UM32{&p.AHB4RSTR.U32, uint32(HSEMRST)}}
}

type APB3RSTR uint32

type RAPB3RSTR struct{ mmio.U32 }

func (r *RAPB3RSTR) LoadBits(mask APB3RSTR) APB3RSTR { return APB3RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB3RSTR) StoreBits(mask, b APB3RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB3RSTR) SetBits(mask APB3RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB3RSTR) ClearBits(mask APB3RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB3RSTR) Load() APB3RSTR                  { return APB3RSTR(r.U32.Load()) }
func (r *RAPB3RSTR) Store(b APB3RSTR)                { r.U32.Store(uint32(b)) }

type RMAPB3RSTR struct{ mmio.UM32 }

func (rm RMAPB3RSTR) Load() APB3RSTR   { return APB3RSTR(rm.UM32.Load()) }
func (rm RMAPB3RSTR) Store(b APB3RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LTDCRST() RMAPB3RSTR {
	return RMAPB3RSTR{mmio.UM32{&p.APB3RSTR.U32, uint32(LTDCRST)}}
}

type APB1LRSTR uint32

type RAPB1LRSTR struct{ mmio.U32 }

func (r *RAPB1LRSTR) LoadBits(mask APB1LRSTR) APB1LRSTR {
	return APB1LRSTR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1LRSTR) StoreBits(mask, b APB1LRSTR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1LRSTR) SetBits(mask APB1LRSTR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1LRSTR) ClearBits(mask APB1LRSTR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1LRSTR) Load() APB1LRSTR             { return APB1LRSTR(r.U32.Load()) }
func (r *RAPB1LRSTR) Store(b APB1LRSTR)           { r.U32.Store(uint32(b)) }

type RMAPB1LRSTR struct{ mmio.UM32 }

func (rm RMAPB1LRSTR) Load() APB1LRSTR   { return APB1LRSTR(rm.UM32.Load()) }
func (rm RMAPB1LRSTR) Store(b APB1LRSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM2RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM2RST)}}
}

func (p *Periph) TIM3RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM3RST)}}
}

func (p *Periph) TIM4RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM4RST)}}
}

func (p *Periph) TIM5RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM5RST)}}
}

func (p *Periph) TIM6RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM6RST)}}
}

func (p *Periph) TIM7RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM7RST)}}
}

func (p *Periph) TIM12RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM12RST)}}
}

func (p *Periph) TIM13RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM13RST)}}
}

func (p *Periph) TIM14RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(TIM14RST)}}
}

func (p *Periph) LPTIM1RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(LPTIM1RST)}}
}

func (p *Periph) SPI2RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(SPI2RST)}}
}

func (p *Periph) SPI3RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(SPI3RST)}}
}

func (p *Periph) SPDIFRXRST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(SPDIFRXRST)}}
}

func (p *Periph) USART2RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(USART2RST)}}
}

func (p *Periph) USART3RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(USART3RST)}}
}

func (p *Periph) UART4RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(UART4RST)}}
}

func (p *Periph) UART5RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(UART5RST)}}
}

func (p *Periph) I2C1RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(I2C1RST)}}
}

func (p *Periph) I2C2RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(I2C2RST)}}
}

func (p *Periph) I2C3RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(I2C3RST)}}
}

func (p *Periph) CECRST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(CECRST)}}
}

func (p *Periph) DAC12RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(DAC12RST)}}
}

func (p *Periph) USART7RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(USART7RST)}}
}

func (p *Periph) USART8RST() RMAPB1LRSTR {
	return RMAPB1LRSTR{mmio.UM32{&p.APB1LRSTR.U32, uint32(USART8RST)}}
}

type APB1HRSTR uint32

type RAPB1HRSTR struct{ mmio.U32 }

func (r *RAPB1HRSTR) LoadBits(mask APB1HRSTR) APB1HRSTR {
	return APB1HRSTR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1HRSTR) StoreBits(mask, b APB1HRSTR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1HRSTR) SetBits(mask APB1HRSTR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1HRSTR) ClearBits(mask APB1HRSTR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1HRSTR) Load() APB1HRSTR             { return APB1HRSTR(r.U32.Load()) }
func (r *RAPB1HRSTR) Store(b APB1HRSTR)           { r.U32.Store(uint32(b)) }

type RMAPB1HRSTR struct{ mmio.UM32 }

func (rm RMAPB1HRSTR) Load() APB1HRSTR   { return APB1HRSTR(rm.UM32.Load()) }
func (rm RMAPB1HRSTR) Store(b APB1HRSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CRSRST() RMAPB1HRSTR {
	return RMAPB1HRSTR{mmio.UM32{&p.APB1HRSTR.U32, uint32(CRSRST)}}
}

func (p *Periph) SWPRST() RMAPB1HRSTR {
	return RMAPB1HRSTR{mmio.UM32{&p.APB1HRSTR.U32, uint32(SWPRST)}}
}

func (p *Periph) OPAMPRST() RMAPB1HRSTR {
	return RMAPB1HRSTR{mmio.UM32{&p.APB1HRSTR.U32, uint32(OPAMPRST)}}
}

func (p *Periph) MDIOSRST() RMAPB1HRSTR {
	return RMAPB1HRSTR{mmio.UM32{&p.APB1HRSTR.U32, uint32(MDIOSRST)}}
}

func (p *Periph) FDCANRST() RMAPB1HRSTR {
	return RMAPB1HRSTR{mmio.UM32{&p.APB1HRSTR.U32, uint32(FDCANRST)}}
}

type APB2RSTR uint32

type RAPB2RSTR struct{ mmio.U32 }

func (r *RAPB2RSTR) LoadBits(mask APB2RSTR) APB2RSTR { return APB2RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB2RSTR) StoreBits(mask, b APB2RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2RSTR) SetBits(mask APB2RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2RSTR) ClearBits(mask APB2RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2RSTR) Load() APB2RSTR                  { return APB2RSTR(r.U32.Load()) }
func (r *RAPB2RSTR) Store(b APB2RSTR)                { r.U32.Store(uint32(b)) }

type RMAPB2RSTR struct{ mmio.UM32 }

func (rm RMAPB2RSTR) Load() APB2RSTR   { return APB2RSTR(rm.UM32.Load()) }
func (rm RMAPB2RSTR) Store(b APB2RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM1RST)}}
}

func (p *Periph) TIM8RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM8RST)}}
}

func (p *Periph) USART1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(USART1RST)}}
}

func (p *Periph) USART6RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(USART6RST)}}
}

func (p *Periph) SPI1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI1RST)}}
}

func (p *Periph) SPI4RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI4RST)}}
}

func (p *Periph) TIM15RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM15RST)}}
}

func (p *Periph) TIM16RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM16RST)}}
}

func (p *Periph) TIM17RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM17RST)}}
}

func (p *Periph) SPI5RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI5RST)}}
}

func (p *Periph) SAI1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI1RST)}}
}

func (p *Periph) SAI2RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI2RST)}}
}

func (p *Periph) SAI3RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI3RST)}}
}

func (p *Periph) DFSDM1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(DFSDM1RST)}}
}

func (p *Periph) HRTIMRST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(HRTIMRST)}}
}

type APB4RSTR uint32

type RAPB4RSTR struct{ mmio.U32 }

func (r *RAPB4RSTR) LoadBits(mask APB4RSTR) APB4RSTR { return APB4RSTR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB4RSTR) StoreBits(mask, b APB4RSTR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB4RSTR) SetBits(mask APB4RSTR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB4RSTR) ClearBits(mask APB4RSTR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB4RSTR) Load() APB4RSTR                  { return APB4RSTR(r.U32.Load()) }
func (r *RAPB4RSTR) Store(b APB4RSTR)                { r.U32.Store(uint32(b)) }

type RMAPB4RSTR struct{ mmio.UM32 }

func (rm RMAPB4RSTR) Load() APB4RSTR   { return APB4RSTR(rm.UM32.Load()) }
func (rm RMAPB4RSTR) Store(b APB4RSTR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SYSCFGRST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(SYSCFGRST)}}
}

func (p *Periph) LPUART1RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(LPUART1RST)}}
}

func (p *Periph) SPI6RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(SPI6RST)}}
}

func (p *Periph) I2C4RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(I2C4RST)}}
}

func (p *Periph) LPTIM2RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(LPTIM2RST)}}
}

func (p *Periph) LPTIM3RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(LPTIM3RST)}}
}

func (p *Periph) LPTIM4RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(LPTIM4RST)}}
}

func (p *Periph) LPTIM5RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(LPTIM5RST)}}
}

func (p *Periph) COMP12RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(COMP12RST)}}
}

func (p *Periph) VREFRST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(VREFRST)}}
}

func (p *Periph) SAI4RST() RMAPB4RSTR {
	return RMAPB4RSTR{mmio.UM32{&p.APB4RSTR.U32, uint32(SAI4RST)}}
}

type GCR uint32

type RGCR struct{ mmio.U32 }

func (r *RGCR) LoadBits(mask GCR) GCR { return GCR(r.U32.LoadBits(uint32(mask))) }
func (r *RGCR) StoreBits(mask, b GCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RGCR) SetBits(mask GCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RGCR) ClearBits(mask GCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RGCR) Load() GCR             { return GCR(r.U32.Load()) }
func (r *RGCR) Store(b GCR)           { r.U32.Store(uint32(b)) }

type RMGCR struct{ mmio.UM32 }

func (rm RMGCR) Load() GCR   { return GCR(rm.UM32.Load()) }
func (rm RMGCR) Store(b GCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) WW1RSC() RMGCR {
	return RMGCR{mmio.UM32{&p.GCR.U32, uint32(WW1RSC)}}
}

type D3AMR uint32

type RD3AMR struct{ mmio.U32 }

func (r *RD3AMR) LoadBits(mask D3AMR) D3AMR { return D3AMR(r.U32.LoadBits(uint32(mask))) }
func (r *RD3AMR) StoreBits(mask, b D3AMR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3AMR) SetBits(mask D3AMR)        { r.U32.SetBits(uint32(mask)) }
func (r *RD3AMR) ClearBits(mask D3AMR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RD3AMR) Load() D3AMR               { return D3AMR(r.U32.Load()) }
func (r *RD3AMR) Store(b D3AMR)             { r.U32.Store(uint32(b)) }

type RMD3AMR struct{ mmio.UM32 }

func (rm RMD3AMR) Load() D3AMR   { return D3AMR(rm.UM32.Load()) }
func (rm RMD3AMR) Store(b D3AMR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) BDMAAMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(BDMAAMEN)}}
}

func (p *Periph) LPUART1AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(LPUART1AMEN)}}
}

func (p *Periph) SPI6AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(SPI6AMEN)}}
}

func (p *Periph) I2C4AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(I2C4AMEN)}}
}

func (p *Periph) LPTIM2AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(LPTIM2AMEN)}}
}

func (p *Periph) LPTIM3AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(LPTIM3AMEN)}}
}

func (p *Periph) LPTIM4AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(LPTIM4AMEN)}}
}

func (p *Periph) LPTIM5AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(LPTIM5AMEN)}}
}

func (p *Periph) COMP12AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(COMP12AMEN)}}
}

func (p *Periph) VREFAMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(VREFAMEN)}}
}

func (p *Periph) RTCAMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(RTCAMEN)}}
}

func (p *Periph) CRCAMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(CRCAMEN)}}
}

func (p *Periph) SAI4AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(SAI4AMEN)}}
}

func (p *Periph) ADC3AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(ADC3AMEN)}}
}

func (p *Periph) BKPRAMAMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(BKPRAMAMEN)}}
}

func (p *Periph) SRAM4AMEN() RMD3AMR {
	return RMD3AMR{mmio.UM32{&p.D3AMR.U32, uint32(SRAM4AMEN)}}
}

type RSR uint32

type RRSR struct{ mmio.U32 }

func (r *RRSR) LoadBits(mask RSR) RSR { return RSR(r.U32.LoadBits(uint32(mask))) }
func (r *RRSR) StoreBits(mask, b RSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRSR) SetBits(mask RSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RRSR) ClearBits(mask RSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRSR) Load() RSR             { return RSR(r.U32.Load()) }
func (r *RRSR) Store(b RSR)           { r.U32.Store(uint32(b)) }

type RMRSR struct{ mmio.UM32 }

func (rm RMRSR) Load() RSR   { return RSR(rm.UM32.Load()) }
func (rm RMRSR) Store(b RSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RMVF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(RMVF)}}
}

func (p *Periph) CPURSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(CPURSTF)}}
}

func (p *Periph) D1RSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(D1RSTF)}}
}

func (p *Periph) D2RSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(D2RSTF)}}
}

func (p *Periph) BORRSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(BORRSTF)}}
}

func (p *Periph) PINRSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(PINRSTF)}}
}

func (p *Periph) PORRSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(PORRSTF)}}
}

func (p *Periph) SFTRSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(SFTRSTF)}}
}

func (p *Periph) IWDG1RSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(IWDG1RSTF)}}
}

func (p *Periph) WWDG1RSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(WWDG1RSTF)}}
}

func (p *Periph) LPWRRSTF() RMRSR {
	return RMRSR{mmio.UM32{&p.RSR.U32, uint32(LPWRRSTF)}}
}

type AHB3ENR uint32

type RAHB3ENR struct{ mmio.U32 }

func (r *RAHB3ENR) LoadBits(mask AHB3ENR) AHB3ENR { return AHB3ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB3ENR) StoreBits(mask, b AHB3ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3ENR) SetBits(mask AHB3ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3ENR) ClearBits(mask AHB3ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3ENR) Load() AHB3ENR                 { return AHB3ENR(r.U32.Load()) }
func (r *RAHB3ENR) Store(b AHB3ENR)               { r.U32.Store(uint32(b)) }

type RMAHB3ENR struct{ mmio.UM32 }

func (rm RMAHB3ENR) Load() AHB3ENR   { return AHB3ENR(rm.UM32.Load()) }
func (rm RMAHB3ENR) Store(b AHB3ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MDMAEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(MDMAEN)}}
}

func (p *Periph) DMA2DEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(DMA2DEN)}}
}

func (p *Periph) JPGDECEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(JPGDECEN)}}
}

func (p *Periph) FMCEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(FMCEN)}}
}

func (p *Periph) QSPIEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(QSPIEN)}}
}

func (p *Periph) SDMMC1EN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(SDMMC1EN)}}
}

type AHB1ENR uint32

type RAHB1ENR struct{ mmio.U32 }

func (r *RAHB1ENR) LoadBits(mask AHB1ENR) AHB1ENR { return AHB1ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB1ENR) StoreBits(mask, b AHB1ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1ENR) SetBits(mask AHB1ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1ENR) ClearBits(mask AHB1ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1ENR) Load() AHB1ENR                 { return AHB1ENR(r.U32.Load()) }
func (r *RAHB1ENR) Store(b AHB1ENR)               { r.U32.Store(uint32(b)) }

type RMAHB1ENR struct{ mmio.UM32 }

func (rm RMAHB1ENR) Load() AHB1ENR   { return AHB1ENR(rm.UM32.Load()) }
func (rm RMAHB1ENR) Store(b AHB1ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DMA1EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA1EN)}}
}

func (p *Periph) DMA2EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA2EN)}}
}

func (p *Periph) ADC12EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(ADC12EN)}}
}

func (p *Periph) ETH1MACEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(ETH1MACEN)}}
}

func (p *Periph) ETH1TXEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(ETH1TXEN)}}
}

func (p *Periph) ETH1RXEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(ETH1RXEN)}}
}

func (p *Periph) USB2OTGHSULPIEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(USB2OTGHSULPIEN)}}
}

func (p *Periph) USB1OTGEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(USB1OTGEN)}}
}

func (p *Periph) USB1ULPIEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(USB1ULPIEN)}}
}

func (p *Periph) USB2OTGEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(USB2OTGEN)}}
}

func (p *Periph) USB2ULPIEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(USB2ULPIEN)}}
}

type AHB2ENR uint32

type RAHB2ENR struct{ mmio.U32 }

func (r *RAHB2ENR) LoadBits(mask AHB2ENR) AHB2ENR { return AHB2ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB2ENR) StoreBits(mask, b AHB2ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2ENR) SetBits(mask AHB2ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2ENR) ClearBits(mask AHB2ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2ENR) Load() AHB2ENR                 { return AHB2ENR(r.U32.Load()) }
func (r *RAHB2ENR) Store(b AHB2ENR)               { r.U32.Store(uint32(b)) }

type RMAHB2ENR struct{ mmio.UM32 }

func (rm RMAHB2ENR) Load() AHB2ENR   { return AHB2ENR(rm.UM32.Load()) }
func (rm RMAHB2ENR) Store(b AHB2ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CAMITFEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(CAMITFEN)}}
}

func (p *Periph) CRYPTEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(CRYPTEN)}}
}

func (p *Periph) HASHEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(HASHEN)}}
}

func (p *Periph) RNGEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(RNGEN)}}
}

func (p *Periph) SDMMC2EN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(SDMMC2EN)}}
}

func (p *Periph) SRAM1EN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(SRAM1EN)}}
}

func (p *Periph) SRAM2EN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(SRAM2EN)}}
}

func (p *Periph) SRAM3EN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(SRAM3EN)}}
}

type AHB4ENR uint32

type RAHB4ENR struct{ mmio.U32 }

func (r *RAHB4ENR) LoadBits(mask AHB4ENR) AHB4ENR { return AHB4ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAHB4ENR) StoreBits(mask, b AHB4ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB4ENR) SetBits(mask AHB4ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAHB4ENR) ClearBits(mask AHB4ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB4ENR) Load() AHB4ENR                 { return AHB4ENR(r.U32.Load()) }
func (r *RAHB4ENR) Store(b AHB4ENR)               { r.U32.Store(uint32(b)) }

type RMAHB4ENR struct{ mmio.UM32 }

func (rm RMAHB4ENR) Load() AHB4ENR   { return AHB4ENR(rm.UM32.Load()) }
func (rm RMAHB4ENR) Store(b AHB4ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) GPIOAEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOAEN)}}
}

func (p *Periph) GPIOBEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOBEN)}}
}

func (p *Periph) GPIOCEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOCEN)}}
}

func (p *Periph) GPIODEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIODEN)}}
}

func (p *Periph) GPIOEEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOEEN)}}
}

func (p *Periph) GPIOFEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOFEN)}}
}

func (p *Periph) GPIOGEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOGEN)}}
}

func (p *Periph) GPIOHEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOHEN)}}
}

func (p *Periph) GPIOIEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOIEN)}}
}

func (p *Periph) GPIOJEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOJEN)}}
}

func (p *Periph) GPIOKEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(GPIOKEN)}}
}

func (p *Periph) CRCEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(CRCEN)}}
}

func (p *Periph) BDMAEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(BDMAEN)}}
}

func (p *Periph) ADC3EN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(ADC3EN)}}
}

func (p *Periph) HSEMEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(HSEMEN)}}
}

func (p *Periph) BKPRAMEN() RMAHB4ENR {
	return RMAHB4ENR{mmio.UM32{&p.AHB4ENR.U32, uint32(BKPRAMEN)}}
}

type APB3ENR uint32

type RAPB3ENR struct{ mmio.U32 }

func (r *RAPB3ENR) LoadBits(mask APB3ENR) APB3ENR { return APB3ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB3ENR) StoreBits(mask, b APB3ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB3ENR) SetBits(mask APB3ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAPB3ENR) ClearBits(mask APB3ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB3ENR) Load() APB3ENR                 { return APB3ENR(r.U32.Load()) }
func (r *RAPB3ENR) Store(b APB3ENR)               { r.U32.Store(uint32(b)) }

type RMAPB3ENR struct{ mmio.UM32 }

func (rm RMAPB3ENR) Load() APB3ENR   { return APB3ENR(rm.UM32.Load()) }
func (rm RMAPB3ENR) Store(b APB3ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LTDCEN() RMAPB3ENR {
	return RMAPB3ENR{mmio.UM32{&p.APB3ENR.U32, uint32(LTDCEN)}}
}

func (p *Periph) WWDG1EN() RMAPB3ENR {
	return RMAPB3ENR{mmio.UM32{&p.APB3ENR.U32, uint32(WWDG1EN)}}
}

type APB1LENR uint32

type RAPB1LENR struct{ mmio.U32 }

func (r *RAPB1LENR) LoadBits(mask APB1LENR) APB1LENR { return APB1LENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB1LENR) StoreBits(mask, b APB1LENR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1LENR) SetBits(mask APB1LENR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1LENR) ClearBits(mask APB1LENR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1LENR) Load() APB1LENR                  { return APB1LENR(r.U32.Load()) }
func (r *RAPB1LENR) Store(b APB1LENR)                { r.U32.Store(uint32(b)) }

type RMAPB1LENR struct{ mmio.UM32 }

func (rm RMAPB1LENR) Load() APB1LENR   { return APB1LENR(rm.UM32.Load()) }
func (rm RMAPB1LENR) Store(b APB1LENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM2EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM2EN)}}
}

func (p *Periph) TIM3EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM3EN)}}
}

func (p *Periph) TIM4EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM4EN)}}
}

func (p *Periph) TIM5EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM5EN)}}
}

func (p *Periph) TIM6EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM6EN)}}
}

func (p *Periph) TIM7EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM7EN)}}
}

func (p *Periph) TIM12EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM12EN)}}
}

func (p *Periph) TIM13EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM13EN)}}
}

func (p *Periph) TIM14EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(TIM14EN)}}
}

func (p *Periph) LPTIM1EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(LPTIM1EN)}}
}

func (p *Periph) SPI2EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(SPI2EN)}}
}

func (p *Periph) SPI3EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(SPI3EN)}}
}

func (p *Periph) SPDIFRXEN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(SPDIFRXEN)}}
}

func (p *Periph) USART2EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(USART2EN)}}
}

func (p *Periph) USART3EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(USART3EN)}}
}

func (p *Periph) UART4EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(UART4EN)}}
}

func (p *Periph) UART5EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(UART5EN)}}
}

func (p *Periph) I2C1EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(I2C1EN)}}
}

func (p *Periph) I2C2EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(I2C2EN)}}
}

func (p *Periph) I2C3EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(I2C3EN)}}
}

func (p *Periph) CECEN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(CECEN)}}
}

func (p *Periph) DAC12EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(DAC12EN)}}
}

func (p *Periph) USART7EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(USART7EN)}}
}

func (p *Periph) USART8EN() RMAPB1LENR {
	return RMAPB1LENR{mmio.UM32{&p.APB1LENR.U32, uint32(USART8EN)}}
}

type APB1HENR uint32

type RAPB1HENR struct{ mmio.U32 }

func (r *RAPB1HENR) LoadBits(mask APB1HENR) APB1HENR { return APB1HENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB1HENR) StoreBits(mask, b APB1HENR)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1HENR) SetBits(mask APB1HENR)           { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1HENR) ClearBits(mask APB1HENR)         { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1HENR) Load() APB1HENR                  { return APB1HENR(r.U32.Load()) }
func (r *RAPB1HENR) Store(b APB1HENR)                { r.U32.Store(uint32(b)) }

type RMAPB1HENR struct{ mmio.UM32 }

func (rm RMAPB1HENR) Load() APB1HENR   { return APB1HENR(rm.UM32.Load()) }
func (rm RMAPB1HENR) Store(b APB1HENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CRSEN() RMAPB1HENR {
	return RMAPB1HENR{mmio.UM32{&p.APB1HENR.U32, uint32(CRSEN)}}
}

func (p *Periph) SWPEN() RMAPB1HENR {
	return RMAPB1HENR{mmio.UM32{&p.APB1HENR.U32, uint32(SWPEN)}}
}

func (p *Periph) OPAMPEN() RMAPB1HENR {
	return RMAPB1HENR{mmio.UM32{&p.APB1HENR.U32, uint32(OPAMPEN)}}
}

func (p *Periph) MDIOSEN() RMAPB1HENR {
	return RMAPB1HENR{mmio.UM32{&p.APB1HENR.U32, uint32(MDIOSEN)}}
}

func (p *Periph) FDCANEN() RMAPB1HENR {
	return RMAPB1HENR{mmio.UM32{&p.APB1HENR.U32, uint32(FDCANEN)}}
}

type APB2ENR uint32

type RAPB2ENR struct{ mmio.U32 }

func (r *RAPB2ENR) LoadBits(mask APB2ENR) APB2ENR { return APB2ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB2ENR) StoreBits(mask, b APB2ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2ENR) SetBits(mask APB2ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2ENR) ClearBits(mask APB2ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2ENR) Load() APB2ENR                 { return APB2ENR(r.U32.Load()) }
func (r *RAPB2ENR) Store(b APB2ENR)               { r.U32.Store(uint32(b)) }

type RMAPB2ENR struct{ mmio.UM32 }

func (rm RMAPB2ENR) Load() APB2ENR   { return APB2ENR(rm.UM32.Load()) }
func (rm RMAPB2ENR) Store(b APB2ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM1EN)}}
}

func (p *Periph) TIM8EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM8EN)}}
}

func (p *Periph) USART1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(USART1EN)}}
}

func (p *Periph) USART6EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(USART6EN)}}
}

func (p *Periph) SPI1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SPI1EN)}}
}

func (p *Periph) SPI4EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SPI4EN)}}
}

func (p *Periph) TIM15EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM15EN)}}
}

func (p *Periph) TIM16EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM16EN)}}
}

func (p *Periph) TIM17EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM17EN)}}
}

func (p *Periph) SPI5EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SPI5EN)}}
}

func (p *Periph) SAI1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SAI1EN)}}
}

func (p *Periph) SAI2EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SAI2EN)}}
}

func (p *Periph) SAI3EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SAI3EN)}}
}

func (p *Periph) DFSDM1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(DFSDM1EN)}}
}

func (p *Periph) HRTIMEN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(HRTIMEN)}}
}

type APB4ENR uint32

type RAPB4ENR struct{ mmio.U32 }

func (r *RAPB4ENR) LoadBits(mask APB4ENR) APB4ENR { return APB4ENR(r.U32.LoadBits(uint32(mask))) }
func (r *RAPB4ENR) StoreBits(mask, b APB4ENR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB4ENR) SetBits(mask APB4ENR)          { r.U32.SetBits(uint32(mask)) }
func (r *RAPB4ENR) ClearBits(mask APB4ENR)        { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB4ENR) Load() APB4ENR                 { return APB4ENR(r.U32.Load()) }
func (r *RAPB4ENR) Store(b APB4ENR)               { r.U32.Store(uint32(b)) }

type RMAPB4ENR struct{ mmio.UM32 }

func (rm RMAPB4ENR) Load() APB4ENR   { return APB4ENR(rm.UM32.Load()) }
func (rm RMAPB4ENR) Store(b APB4ENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SYSCFGEN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(SYSCFGEN)}}
}

func (p *Periph) LPUART1EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(LPUART1EN)}}
}

func (p *Periph) SPI6EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(SPI6EN)}}
}

func (p *Periph) I2C4EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(I2C4EN)}}
}

func (p *Periph) LPTIM2EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(LPTIM2EN)}}
}

func (p *Periph) LPTIM3EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(LPTIM3EN)}}
}

func (p *Periph) LPTIM4EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(LPTIM4EN)}}
}

func (p *Periph) LPTIM5EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(LPTIM5EN)}}
}

func (p *Periph) COMP12EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(COMP12EN)}}
}

func (p *Periph) VREFEN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(VREFEN)}}
}

func (p *Periph) RTCAPBEN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(RTCAPBEN)}}
}

func (p *Periph) SAI4EN() RMAPB4ENR {
	return RMAPB4ENR{mmio.UM32{&p.APB4ENR.U32, uint32(SAI4EN)}}
}

type AHB3LPENR uint32

type RAHB3LPENR struct{ mmio.U32 }

func (r *RAHB3LPENR) LoadBits(mask AHB3LPENR) AHB3LPENR {
	return AHB3LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB3LPENR) StoreBits(mask, b AHB3LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3LPENR) SetBits(mask AHB3LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3LPENR) ClearBits(mask AHB3LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3LPENR) Load() AHB3LPENR             { return AHB3LPENR(r.U32.Load()) }
func (r *RAHB3LPENR) Store(b AHB3LPENR)           { r.U32.Store(uint32(b)) }

type RMAHB3LPENR struct{ mmio.UM32 }

func (rm RMAHB3LPENR) Load() AHB3LPENR   { return AHB3LPENR(rm.UM32.Load()) }
func (rm RMAHB3LPENR) Store(b AHB3LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MDMALPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(MDMALPEN)}}
}

func (p *Periph) DMA2DLPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(DMA2DLPEN)}}
}

func (p *Periph) JPGDECLPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(JPGDECLPEN)}}
}

func (p *Periph) FLASHLPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(FLASHLPEN)}}
}

func (p *Periph) FMCLPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(FMCLPEN)}}
}

func (p *Periph) QSPILPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(QSPILPEN)}}
}

func (p *Periph) SDMMC1LPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(SDMMC1LPEN)}}
}

func (p *Periph) D1DTCM1LPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(D1DTCM1LPEN)}}
}

func (p *Periph) DTCM2LPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(DTCM2LPEN)}}
}

func (p *Periph) ITCMLPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(ITCMLPEN)}}
}

func (p *Periph) AXISRAMLPEN() RMAHB3LPENR {
	return RMAHB3LPENR{mmio.UM32{&p.AHB3LPENR.U32, uint32(AXISRAMLPEN)}}
}

type AHB1LPENR uint32

type RAHB1LPENR struct{ mmio.U32 }

func (r *RAHB1LPENR) LoadBits(mask AHB1LPENR) AHB1LPENR {
	return AHB1LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB1LPENR) StoreBits(mask, b AHB1LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1LPENR) SetBits(mask AHB1LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1LPENR) ClearBits(mask AHB1LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1LPENR) Load() AHB1LPENR             { return AHB1LPENR(r.U32.Load()) }
func (r *RAHB1LPENR) Store(b AHB1LPENR)           { r.U32.Store(uint32(b)) }

type RMAHB1LPENR struct{ mmio.UM32 }

func (rm RMAHB1LPENR) Load() AHB1LPENR   { return AHB1LPENR(rm.UM32.Load()) }
func (rm RMAHB1LPENR) Store(b AHB1LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) DMA1LPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(DMA1LPEN)}}
}

func (p *Periph) DMA2LPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(DMA2LPEN)}}
}

func (p *Periph) ADC12LPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(ADC12LPEN)}}
}

func (p *Periph) ETH1MACLPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(ETH1MACLPEN)}}
}

func (p *Periph) ETH1TXLPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(ETH1TXLPEN)}}
}

func (p *Periph) ETH1RXLPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(ETH1RXLPEN)}}
}

func (p *Periph) USB1OTGHSLPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(USB1OTGHSLPEN)}}
}

func (p *Periph) USB1OTGHSULPILPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(USB1OTGHSULPILPEN)}}
}

func (p *Periph) USB2OTGHSLPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(USB2OTGHSLPEN)}}
}

func (p *Periph) USB2OTGHSULPILPEN() RMAHB1LPENR {
	return RMAHB1LPENR{mmio.UM32{&p.AHB1LPENR.U32, uint32(USB2OTGHSULPILPEN)}}
}

type AHB2LPENR uint32

type RAHB2LPENR struct{ mmio.U32 }

func (r *RAHB2LPENR) LoadBits(mask AHB2LPENR) AHB2LPENR {
	return AHB2LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB2LPENR) StoreBits(mask, b AHB2LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2LPENR) SetBits(mask AHB2LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2LPENR) ClearBits(mask AHB2LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2LPENR) Load() AHB2LPENR             { return AHB2LPENR(r.U32.Load()) }
func (r *RAHB2LPENR) Store(b AHB2LPENR)           { r.U32.Store(uint32(b)) }

type RMAHB2LPENR struct{ mmio.UM32 }

func (rm RMAHB2LPENR) Load() AHB2LPENR   { return AHB2LPENR(rm.UM32.Load()) }
func (rm RMAHB2LPENR) Store(b AHB2LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CAMITFLPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(CAMITFLPEN)}}
}

func (p *Periph) CRYPTLPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(CRYPTLPEN)}}
}

func (p *Periph) HASHLPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(HASHLPEN)}}
}

func (p *Periph) RNGLPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(RNGLPEN)}}
}

func (p *Periph) SDMMC2LPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(SDMMC2LPEN)}}
}

func (p *Periph) SRAM1LPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(SRAM1LPEN)}}
}

func (p *Periph) SRAM2LPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(SRAM2LPEN)}}
}

func (p *Periph) SRAM3LPEN() RMAHB2LPENR {
	return RMAHB2LPENR{mmio.UM32{&p.AHB2LPENR.U32, uint32(SRAM3LPEN)}}
}

type AHB4LPENR uint32

type RAHB4LPENR struct{ mmio.U32 }

func (r *RAHB4LPENR) LoadBits(mask AHB4LPENR) AHB4LPENR {
	return AHB4LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAHB4LPENR) StoreBits(mask, b AHB4LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB4LPENR) SetBits(mask AHB4LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB4LPENR) ClearBits(mask AHB4LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB4LPENR) Load() AHB4LPENR             { return AHB4LPENR(r.U32.Load()) }
func (r *RAHB4LPENR) Store(b AHB4LPENR)           { r.U32.Store(uint32(b)) }

type RMAHB4LPENR struct{ mmio.UM32 }

func (rm RMAHB4LPENR) Load() AHB4LPENR   { return AHB4LPENR(rm.UM32.Load()) }
func (rm RMAHB4LPENR) Store(b AHB4LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) GPIOALPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOALPEN)}}
}

func (p *Periph) GPIOBLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOBLPEN)}}
}

func (p *Periph) GPIOCLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOCLPEN)}}
}

func (p *Periph) GPIODLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIODLPEN)}}
}

func (p *Periph) GPIOELPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOELPEN)}}
}

func (p *Periph) GPIOFLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOFLPEN)}}
}

func (p *Periph) GPIOGLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOGLPEN)}}
}

func (p *Periph) GPIOHLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOHLPEN)}}
}

func (p *Periph) GPIOILPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOILPEN)}}
}

func (p *Periph) GPIOJLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOJLPEN)}}
}

func (p *Periph) GPIOKLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(GPIOKLPEN)}}
}

func (p *Periph) CRCLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(CRCLPEN)}}
}

func (p *Periph) BDMALPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(BDMALPEN)}}
}

func (p *Periph) ADC3LPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(ADC3LPEN)}}
}

func (p *Periph) BKPRAMLPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(BKPRAMLPEN)}}
}

func (p *Periph) SRAM4LPEN() RMAHB4LPENR {
	return RMAHB4LPENR{mmio.UM32{&p.AHB4LPENR.U32, uint32(SRAM4LPEN)}}
}

type APB3LPENR uint32

type RAPB3LPENR struct{ mmio.U32 }

func (r *RAPB3LPENR) LoadBits(mask APB3LPENR) APB3LPENR {
	return APB3LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB3LPENR) StoreBits(mask, b APB3LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB3LPENR) SetBits(mask APB3LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB3LPENR) ClearBits(mask APB3LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB3LPENR) Load() APB3LPENR             { return APB3LPENR(r.U32.Load()) }
func (r *RAPB3LPENR) Store(b APB3LPENR)           { r.U32.Store(uint32(b)) }

type RMAPB3LPENR struct{ mmio.UM32 }

func (rm RMAPB3LPENR) Load() APB3LPENR   { return APB3LPENR(rm.UM32.Load()) }
func (rm RMAPB3LPENR) Store(b APB3LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LTDCLPEN() RMAPB3LPENR {
	return RMAPB3LPENR{mmio.UM32{&p.APB3LPENR.U32, uint32(LTDCLPEN)}}
}

func (p *Periph) WWDG1LPEN() RMAPB3LPENR {
	return RMAPB3LPENR{mmio.UM32{&p.APB3LPENR.U32, uint32(WWDG1LPEN)}}
}

type APB1LLPENR uint32

type RAPB1LLPENR struct{ mmio.U32 }

func (r *RAPB1LLPENR) LoadBits(mask APB1LLPENR) APB1LLPENR {
	return APB1LLPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1LLPENR) StoreBits(mask, b APB1LLPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1LLPENR) SetBits(mask APB1LLPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1LLPENR) ClearBits(mask APB1LLPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1LLPENR) Load() APB1LLPENR             { return APB1LLPENR(r.U32.Load()) }
func (r *RAPB1LLPENR) Store(b APB1LLPENR)           { r.U32.Store(uint32(b)) }

type RMAPB1LLPENR struct{ mmio.UM32 }

func (rm RMAPB1LLPENR) Load() APB1LLPENR   { return APB1LLPENR(rm.UM32.Load()) }
func (rm RMAPB1LLPENR) Store(b APB1LLPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM2LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM2LPEN)}}
}

func (p *Periph) TIM3LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM3LPEN)}}
}

func (p *Periph) TIM4LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM4LPEN)}}
}

func (p *Periph) TIM5LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM5LPEN)}}
}

func (p *Periph) TIM6LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM6LPEN)}}
}

func (p *Periph) TIM7LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM7LPEN)}}
}

func (p *Periph) TIM12LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM12LPEN)}}
}

func (p *Periph) TIM13LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM13LPEN)}}
}

func (p *Periph) TIM14LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(TIM14LPEN)}}
}

func (p *Periph) LPTIM1LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(LPTIM1LPEN)}}
}

func (p *Periph) SPI2LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(SPI2LPEN)}}
}

func (p *Periph) SPI3LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(SPI3LPEN)}}
}

func (p *Periph) SPDIFRXLPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(SPDIFRXLPEN)}}
}

func (p *Periph) USART2LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(USART2LPEN)}}
}

func (p *Periph) USART3LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(USART3LPEN)}}
}

func (p *Periph) UART4LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(UART4LPEN)}}
}

func (p *Periph) UART5LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(UART5LPEN)}}
}

func (p *Periph) I2C1LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(I2C1LPEN)}}
}

func (p *Periph) I2C2LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(I2C2LPEN)}}
}

func (p *Periph) I2C3LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(I2C3LPEN)}}
}

func (p *Periph) HDMICECLPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(HDMICECLPEN)}}
}

func (p *Periph) DAC12LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(DAC12LPEN)}}
}

func (p *Periph) USART7LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(USART7LPEN)}}
}

func (p *Periph) USART8LPEN() RMAPB1LLPENR {
	return RMAPB1LLPENR{mmio.UM32{&p.APB1LLPENR.U32, uint32(USART8LPEN)}}
}

type APB1HLPENR uint32

type RAPB1HLPENR struct{ mmio.U32 }

func (r *RAPB1HLPENR) LoadBits(mask APB1HLPENR) APB1HLPENR {
	return APB1HLPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB1HLPENR) StoreBits(mask, b APB1HLPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1HLPENR) SetBits(mask APB1HLPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1HLPENR) ClearBits(mask APB1HLPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1HLPENR) Load() APB1HLPENR             { return APB1HLPENR(r.U32.Load()) }
func (r *RAPB1HLPENR) Store(b APB1HLPENR)           { r.U32.Store(uint32(b)) }

type RMAPB1HLPENR struct{ mmio.UM32 }

func (rm RMAPB1HLPENR) Load() APB1HLPENR   { return APB1HLPENR(rm.UM32.Load()) }
func (rm RMAPB1HLPENR) Store(b APB1HLPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CRSLPEN() RMAPB1HLPENR {
	return RMAPB1HLPENR{mmio.UM32{&p.APB1HLPENR.U32, uint32(CRSLPEN)}}
}

func (p *Periph) SWPLPEN() RMAPB1HLPENR {
	return RMAPB1HLPENR{mmio.UM32{&p.APB1HLPENR.U32, uint32(SWPLPEN)}}
}

func (p *Periph) OPAMPLPEN() RMAPB1HLPENR {
	return RMAPB1HLPENR{mmio.UM32{&p.APB1HLPENR.U32, uint32(OPAMPLPEN)}}
}

func (p *Periph) MDIOSLPEN() RMAPB1HLPENR {
	return RMAPB1HLPENR{mmio.UM32{&p.APB1HLPENR.U32, uint32(MDIOSLPEN)}}
}

func (p *Periph) FDCANLPEN() RMAPB1HLPENR {
	return RMAPB1HLPENR{mmio.UM32{&p.APB1HLPENR.U32, uint32(FDCANLPEN)}}
}

type APB2LPENR uint32

type RAPB2LPENR struct{ mmio.U32 }

func (r *RAPB2LPENR) LoadBits(mask APB2LPENR) APB2LPENR {
	return APB2LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB2LPENR) StoreBits(mask, b APB2LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2LPENR) SetBits(mask APB2LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2LPENR) ClearBits(mask APB2LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2LPENR) Load() APB2LPENR             { return APB2LPENR(r.U32.Load()) }
func (r *RAPB2LPENR) Store(b APB2LPENR)           { r.U32.Store(uint32(b)) }

type RMAPB2LPENR struct{ mmio.UM32 }

func (rm RMAPB2LPENR) Load() APB2LPENR   { return APB2LPENR(rm.UM32.Load()) }
func (rm RMAPB2LPENR) Store(b APB2LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TIM1LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(TIM1LPEN)}}
}

func (p *Periph) TIM8LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(TIM8LPEN)}}
}

func (p *Periph) USART1LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(USART1LPEN)}}
}

func (p *Periph) USART6LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(USART6LPEN)}}
}

func (p *Periph) SPI1LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(SPI1LPEN)}}
}

func (p *Periph) SPI4LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(SPI4LPEN)}}
}

func (p *Periph) TIM15LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(TIM15LPEN)}}
}

func (p *Periph) TIM16LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(TIM16LPEN)}}
}

func (p *Periph) TIM17LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(TIM17LPEN)}}
}

func (p *Periph) SPI5LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(SPI5LPEN)}}
}

func (p *Periph) SAI1LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(SAI1LPEN)}}
}

func (p *Periph) SAI2LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(SAI2LPEN)}}
}

func (p *Periph) SAI3LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(SAI3LPEN)}}
}

func (p *Periph) DFSDM1LPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(DFSDM1LPEN)}}
}

func (p *Periph) HRTIMLPEN() RMAPB2LPENR {
	return RMAPB2LPENR{mmio.UM32{&p.APB2LPENR.U32, uint32(HRTIMLPEN)}}
}

type APB4LPENR uint32

type RAPB4LPENR struct{ mmio.U32 }

func (r *RAPB4LPENR) LoadBits(mask APB4LPENR) APB4LPENR {
	return APB4LPENR(r.U32.LoadBits(uint32(mask)))
}
func (r *RAPB4LPENR) StoreBits(mask, b APB4LPENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB4LPENR) SetBits(mask APB4LPENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB4LPENR) ClearBits(mask APB4LPENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB4LPENR) Load() APB4LPENR             { return APB4LPENR(r.U32.Load()) }
func (r *RAPB4LPENR) Store(b APB4LPENR)           { r.U32.Store(uint32(b)) }

type RMAPB4LPENR struct{ mmio.UM32 }

func (rm RMAPB4LPENR) Load() APB4LPENR   { return APB4LPENR(rm.UM32.Load()) }
func (rm RMAPB4LPENR) Store(b APB4LPENR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SYSCFGLPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(SYSCFGLPEN)}}
}

func (p *Periph) LPUART1LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(LPUART1LPEN)}}
}

func (p *Periph) SPI6LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(SPI6LPEN)}}
}

func (p *Periph) I2C4LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(I2C4LPEN)}}
}

func (p *Periph) LPTIM2LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(LPTIM2LPEN)}}
}

func (p *Periph) LPTIM3LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(LPTIM3LPEN)}}
}

func (p *Periph) LPTIM4LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(LPTIM4LPEN)}}
}

func (p *Periph) LPTIM5LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(LPTIM5LPEN)}}
}

func (p *Periph) COMP12LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(COMP12LPEN)}}
}

func (p *Periph) VREFLPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(VREFLPEN)}}
}

func (p *Periph) RTCAPBLPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(RTCAPBLPEN)}}
}

func (p *Periph) SAI4LPEN() RMAPB4LPENR {
	return RMAPB4LPENR{mmio.UM32{&p.APB4LPENR.U32, uint32(SAI4LPEN)}}
}
