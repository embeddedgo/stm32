// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32h7x3

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         mmio.R32[CR]
	ICSCR      mmio.R32[ICSCR]
	CRRCR      mmio.R32[CRRCR]
	_          uint32
	CFGR       mmio.R32[CFGR]
	_          uint32
	D1CFGR     mmio.R32[D1CFGR]
	D2CFGR     mmio.R32[D2CFGR]
	D3CFGR     mmio.R32[D3CFGR]
	_          uint32
	PLLCKSELR  mmio.R32[PLLCKSELR]
	PLLCFGR    mmio.R32[PLLCFGR]
	PLL1DIVR   mmio.R32[PLL1DIVR]
	PLL1FRACR  mmio.R32[PLL1FRACR]
	PLL2DIVR   mmio.R32[PLL2DIVR]
	PLL2FRACR  mmio.R32[PLL2FRACR]
	PLL3DIVR   mmio.R32[PLL3DIVR]
	PLL3FRACR  mmio.R32[PLL3FRACR]
	_          uint32
	D1CCIPR    mmio.R32[D1CCIPR]
	D2CCIP1R   mmio.R32[D2CCIP1R]
	D2CCIP2R   mmio.R32[D2CCIP2R]
	D3CCIPR    mmio.R32[D3CCIPR]
	_          uint32
	CIER       mmio.R32[CIER]
	CIFR       mmio.R32[CIFR]
	CICR       mmio.R32[CICR]
	_          uint32
	BDCR       mmio.R32[BDCR]
	CSR        mmio.R32[CSR]
	_          uint32
	AHB3RSTR   mmio.R32[AHB3RSTR]
	AHB1RSTR   mmio.R32[AHB1RSTR]
	AHB2RSTR   mmio.R32[AHB2RSTR]
	AHB4RSTR   mmio.R32[AHB4RSTR]
	APB3RSTR   mmio.R32[APB3RSTR]
	APB1LRSTR  mmio.R32[APB1LRSTR]
	APB1HRSTR  mmio.R32[APB1HRSTR]
	APB2RSTR   mmio.R32[APB2RSTR]
	APB4RSTR   mmio.R32[APB4RSTR]
	GCR        mmio.R32[GCR]
	_          uint32
	D3AMR      mmio.R32[D3AMR]
	_          [9]uint32
	RSR        mmio.R32[RSR]
	AHB3ENR    mmio.R32[AHB3ENR]
	AHB1ENR    mmio.R32[AHB1ENR]
	AHB2ENR    mmio.R32[AHB2ENR]
	AHB4ENR    mmio.R32[AHB4ENR]
	APB3ENR    mmio.R32[APB3ENR]
	APB1LENR   mmio.R32[APB1LENR]
	APB1HENR   mmio.R32[APB1HENR]
	APB2ENR    mmio.R32[APB2ENR]
	APB4ENR    mmio.R32[APB4ENR]
	_          uint32
	AHB3LPENR  mmio.R32[AHB3LPENR]
	AHB1LPENR  mmio.R32[AHB1LPENR]
	AHB2LPENR  mmio.R32[AHB2LPENR]
	AHB4LPENR  mmio.R32[AHB4LPENR]
	APB3LPENR  mmio.R32[APB3LPENR]
	APB1LLPENR mmio.R32[APB1LLPENR]
	APB1HLPENR mmio.R32[APB1HLPENR]
	APB2LPENR  mmio.R32[APB2LPENR]
	APB4LPENR  mmio.R32[APB4LPENR]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func HSION_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSION} }
func HSIKERON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, HSIKERON} }
func HSIRDY_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, HSIRDY} }
func HSIDIV_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, HSIDIV} }
func HSIDIVF_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, HSIDIVF} }
func CSION_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, CSION} }
func CSIRDY_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, CSIRDY} }
func CSIKERON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, CSIKERON} }
func RC48ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, RC48ON} }
func RC48RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, RC48RDY} }
func D1CKRDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, D1CKRDY} }
func D2CKRDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, D2CKRDY} }
func HSEON_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, HSEBYP} }
func HSECSSON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, HSECSSON} }
func PLL1ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, PLL1ON} }
func PLL1RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, PLL1RDY} }
func PLL2ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, PLL2ON} }
func PLL2RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, PLL2RDY} }
func PLL3ON_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, PLL3ON} }
func PLL3RDY_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, PLL3RDY} }

type ICSCR uint32

func HSICAL_(p *Periph) mmio.RM32[ICSCR]  { return mmio.RM32[ICSCR]{&p.ICSCR, HSICAL} }
func HSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{&p.ICSCR, HSITRIM} }
func CSICAL_(p *Periph) mmio.RM32[ICSCR]  { return mmio.RM32[ICSCR]{&p.ICSCR, CSICAL} }
func CSITRIM_(p *Periph) mmio.RM32[ICSCR] { return mmio.RM32[ICSCR]{&p.ICSCR, CSITRIM} }

type CRRCR uint32

func RC48CAL_(p *Periph) mmio.RM32[CRRCR] { return mmio.RM32[CRRCR]{&p.CRRCR, RC48CAL} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]          { return mmio.RM32[CFGR]{&p.CFGR, SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]         { return mmio.RM32[CFGR]{&p.CFGR, SWS} }
func STOPWUCK_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{&p.CFGR, STOPWUCK} }
func STOPKERWUCK_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{&p.CFGR, STOPKERWUCK} }
func RTCPRE_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{&p.CFGR, RTCPRE} }
func HRTIMSEL_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{&p.CFGR, HRTIMSEL} }
func TIMPRE_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{&p.CFGR, TIMPRE} }
func MCO1PRE_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{&p.CFGR, MCO1PRE} }
func MCO1SEL_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{&p.CFGR, MCO1SEL} }
func MCO2PRE_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{&p.CFGR, MCO2PRE} }
func MCO2SEL_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{&p.CFGR, MCO2SEL} }

type D1CFGR uint32

func HPRE_(p *Periph) mmio.RM32[D1CFGR]   { return mmio.RM32[D1CFGR]{&p.D1CFGR, HPRE} }
func D1PPRE_(p *Periph) mmio.RM32[D1CFGR] { return mmio.RM32[D1CFGR]{&p.D1CFGR, D1PPRE} }
func D1CPRE_(p *Periph) mmio.RM32[D1CFGR] { return mmio.RM32[D1CFGR]{&p.D1CFGR, D1CPRE} }

type D2CFGR uint32

func D2PPRE1_(p *Periph) mmio.RM32[D2CFGR] { return mmio.RM32[D2CFGR]{&p.D2CFGR, D2PPRE1} }
func D2PPRE2_(p *Periph) mmio.RM32[D2CFGR] { return mmio.RM32[D2CFGR]{&p.D2CFGR, D2PPRE2} }

type D3CFGR uint32

func D3PPRE_(p *Periph) mmio.RM32[D3CFGR] { return mmio.RM32[D3CFGR]{&p.D3CFGR, D3PPRE} }

type PLLCKSELR uint32

func PLLSRC_(p *Periph) mmio.RM32[PLLCKSELR] { return mmio.RM32[PLLCKSELR]{&p.PLLCKSELR, PLLSRC} }
func DIVM1_(p *Periph) mmio.RM32[PLLCKSELR]  { return mmio.RM32[PLLCKSELR]{&p.PLLCKSELR, DIVM1} }
func DIVM2_(p *Periph) mmio.RM32[PLLCKSELR]  { return mmio.RM32[PLLCKSELR]{&p.PLLCKSELR, DIVM2} }
func DIVM3_(p *Periph) mmio.RM32[PLLCKSELR]  { return mmio.RM32[PLLCKSELR]{&p.PLLCKSELR, DIVM3} }

type PLLCFGR uint32

func PLL1FRACEN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL1FRACEN} }
func PLL1VCOSEL_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL1VCOSEL} }
func PLL1RGE_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL1RGE} }
func PLL2FRACEN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL2FRACEN} }
func PLL2VCOSEL_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL2VCOSEL} }
func PLL2RGE_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL2RGE} }
func PLL3FRACEN_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL3FRACEN} }
func PLL3VCOSEL_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL3VCOSEL} }
func PLL3RGE_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLL3RGE} }
func DIVP1EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVP1EN} }
func DIVQ1EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVQ1EN} }
func DIVR1EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVR1EN} }
func DIVP2EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVP2EN} }
func DIVQ2EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVQ2EN} }
func DIVR2EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVR2EN} }
func DIVP3EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVP3EN} }
func DIVQ3EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVQ3EN} }
func DIVR3EN_(p *Periph) mmio.RM32[PLLCFGR]    { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, DIVR3EN} }

type PLL1DIVR uint32

func DIVN1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{&p.PLL1DIVR, DIVN1} }
func DIVP1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{&p.PLL1DIVR, DIVP1} }
func DIVQ1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{&p.PLL1DIVR, DIVQ1} }
func DIVR1_(p *Periph) mmio.RM32[PLL1DIVR] { return mmio.RM32[PLL1DIVR]{&p.PLL1DIVR, DIVR1} }

type PLL1FRACR uint32

func FRACN1_(p *Periph) mmio.RM32[PLL1FRACR] { return mmio.RM32[PLL1FRACR]{&p.PLL1FRACR, FRACN1} }

type PLL2DIVR uint32

func DIVN2_(p *Periph) mmio.RM32[PLL2DIVR] { return mmio.RM32[PLL2DIVR]{&p.PLL2DIVR, DIVN2} }
func DIVP2_(p *Periph) mmio.RM32[PLL2DIVR] { return mmio.RM32[PLL2DIVR]{&p.PLL2DIVR, DIVP2} }
func DIVQ2_(p *Periph) mmio.RM32[PLL2DIVR] { return mmio.RM32[PLL2DIVR]{&p.PLL2DIVR, DIVQ2} }
func DIVR2_(p *Periph) mmio.RM32[PLL2DIVR] { return mmio.RM32[PLL2DIVR]{&p.PLL2DIVR, DIVR2} }

type PLL2FRACR uint32

func FRACN2_(p *Periph) mmio.RM32[PLL2FRACR] { return mmio.RM32[PLL2FRACR]{&p.PLL2FRACR, FRACN2} }

type PLL3DIVR uint32

func DIVN3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{&p.PLL3DIVR, DIVN3} }
func DIVP3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{&p.PLL3DIVR, DIVP3} }
func DIVQ3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{&p.PLL3DIVR, DIVQ3} }
func DIVR3_(p *Periph) mmio.RM32[PLL3DIVR] { return mmio.RM32[PLL3DIVR]{&p.PLL3DIVR, DIVR3} }

type PLL3FRACR uint32

func FRACN3_(p *Periph) mmio.RM32[PLL3FRACR] { return mmio.RM32[PLL3FRACR]{&p.PLL3FRACR, FRACN3} }

type D1CCIPR uint32

func FMCSRC_(p *Periph) mmio.RM32[D1CCIPR]   { return mmio.RM32[D1CCIPR]{&p.D1CCIPR, FMCSRC} }
func QSPISRC_(p *Periph) mmio.RM32[D1CCIPR]  { return mmio.RM32[D1CCIPR]{&p.D1CCIPR, QSPISRC} }
func SDMMCSRC_(p *Periph) mmio.RM32[D1CCIPR] { return mmio.RM32[D1CCIPR]{&p.D1CCIPR, SDMMCSRC} }
func CKPERSRC_(p *Periph) mmio.RM32[D1CCIPR] { return mmio.RM32[D1CCIPR]{&p.D1CCIPR, CKPERSRC} }

type D2CCIP1R uint32

func SAI1SRC_(p *Periph) mmio.RM32[D2CCIP1R]   { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, SAI1SRC} }
func SAI23SRC_(p *Periph) mmio.RM32[D2CCIP1R]  { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, SAI23SRC} }
func SPI123SRC_(p *Periph) mmio.RM32[D2CCIP1R] { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, SPI123SRC} }
func SPI45SRC_(p *Periph) mmio.RM32[D2CCIP1R]  { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, SPI45SRC} }
func SPDIFSRC_(p *Periph) mmio.RM32[D2CCIP1R]  { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, SPDIFSRC} }
func DFSDM1SRC_(p *Periph) mmio.RM32[D2CCIP1R] { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, DFSDM1SRC} }
func FDCANSRC_(p *Periph) mmio.RM32[D2CCIP1R]  { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, FDCANSRC} }
func SWPSRC_(p *Periph) mmio.RM32[D2CCIP1R]    { return mmio.RM32[D2CCIP1R]{&p.D2CCIP1R, SWPSRC} }

type D2CCIP2R uint32

func USART234578SRC_(p *Periph) mmio.RM32[D2CCIP2R] {
	return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, USART234578SRC}
}
func USART16SRC_(p *Periph) mmio.RM32[D2CCIP2R] { return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, USART16SRC} }
func RNGSRC_(p *Periph) mmio.RM32[D2CCIP2R]     { return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, RNGSRC} }
func I2C123SRC_(p *Periph) mmio.RM32[D2CCIP2R]  { return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, I2C123SRC} }
func USBSRC_(p *Periph) mmio.RM32[D2CCIP2R]     { return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, USBSRC} }
func CECSRC_(p *Periph) mmio.RM32[D2CCIP2R]     { return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, CECSRC} }
func LPTIM1SRC_(p *Periph) mmio.RM32[D2CCIP2R]  { return mmio.RM32[D2CCIP2R]{&p.D2CCIP2R, LPTIM1SRC} }

type D3CCIPR uint32

func LPUART1SRC_(p *Periph) mmio.RM32[D3CCIPR]  { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, LPUART1SRC} }
func I2C4SRC_(p *Periph) mmio.RM32[D3CCIPR]     { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, I2C4SRC} }
func LPTIM2SRC_(p *Periph) mmio.RM32[D3CCIPR]   { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, LPTIM2SRC} }
func LPTIM345SRC_(p *Periph) mmio.RM32[D3CCIPR] { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, LPTIM345SRC} }
func ADCSRC_(p *Periph) mmio.RM32[D3CCIPR]      { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, ADCSRC} }
func SAI4ASRC_(p *Periph) mmio.RM32[D3CCIPR]    { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, SAI4ASRC} }
func SAI4BSRC_(p *Periph) mmio.RM32[D3CCIPR]    { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, SAI4BSRC} }
func SPI6SRC_(p *Periph) mmio.RM32[D3CCIPR]     { return mmio.RM32[D3CCIPR]{&p.D3CCIPR, SPI6SRC} }

type CIER uint32

func LSIRDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{&p.CIER, LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{&p.CIER, LSERDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{&p.CIER, HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{&p.CIER, HSERDYIE} }
func CSIRDYIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{&p.CIER, CSIRDYIE} }
func RC48RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{&p.CIER, RC48RDYIE} }
func PLL1RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{&p.CIER, PLL1RDYIE} }
func PLL2RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{&p.CIER, PLL2RDYIE} }
func PLL3RDYIE_(p *Periph) mmio.RM32[CIER] { return mmio.RM32[CIER]{&p.CIER, PLL3RDYIE} }
func LSECSSIE_(p *Periph) mmio.RM32[CIER]  { return mmio.RM32[CIER]{&p.CIER, LSECSSIE} }

type CIFR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, LSERDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, HSERDYF} }
func CSIRDYF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, CSIRDYF} }
func RC48RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{&p.CIFR, RC48RDYF} }
func PLL1RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{&p.CIFR, PLL1RDYF} }
func PLL2RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{&p.CIFR, PLL2RDYF} }
func PLL3RDYF_(p *Periph) mmio.RM32[CIFR] { return mmio.RM32[CIFR]{&p.CIFR, PLL3RDYF} }
func LSECSSF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, LSECSSF} }
func HSECSSF_(p *Periph) mmio.RM32[CIFR]  { return mmio.RM32[CIFR]{&p.CIFR, HSECSSF} }

type CICR uint32

func LSIRDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, LSERDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, HSERDYC} }
func HSE_ready_Interrupt_Clear_(p *Periph) mmio.RM32[CICR] {
	return mmio.RM32[CICR]{&p.CICR, HSE_ready_Interrupt_Clear}
}
func RC48RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, RC48RDYC} }
func PLL1RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, PLL1RDYC} }
func PLL2RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, PLL2RDYC} }
func PLL3RDYC_(p *Periph) mmio.RM32[CICR] { return mmio.RM32[CICR]{&p.CICR, PLL3RDYC} }
func LSECSSC_(p *Periph) mmio.RM32[CICR]  { return mmio.RM32[CICR]{&p.CICR, LSECSSC} }
func HSECSSC_(p *Periph) mmio.RM32[CICR]  { return mmio.RM32[CICR]{&p.CICR, HSECSSC} }

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{&p.BDCR, LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, LSEBYP} }
func LSEDRV_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, LSEDRV} }
func LSECSSON_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{&p.BDCR, LSECSSON} }
func LSECSSD_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, LSECSSD} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]    { return mmio.RM32[BDCR]{&p.BDCR, RTCEN} }
func VSWRST_(p *Periph) mmio.RM32[BDCR]   { return mmio.RM32[BDCR]{&p.BDCR, VSWRST} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, LSIRDY} }

type AHB3RSTR uint32

func MDMARST_(p *Periph) mmio.RM32[AHB3RSTR]   { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, MDMARST} }
func DMA2DRST_(p *Periph) mmio.RM32[AHB3RSTR]  { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, DMA2DRST} }
func JPGDECRST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, JPGDECRST} }
func FMCRST_(p *Periph) mmio.RM32[AHB3RSTR]    { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, FMCRST} }
func QSPIRST_(p *Periph) mmio.RM32[AHB3RSTR]   { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, QSPIRST} }
func SDMMC1RST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, SDMMC1RST} }
func CPURST_(p *Periph) mmio.RM32[AHB3RSTR]    { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, CPURST} }

type AHB1RSTR uint32

func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR]    { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMA1RST} }
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR]    { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMA2RST} }
func ADC12RST_(p *Periph) mmio.RM32[AHB1RSTR]   { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, ADC12RST} }
func ETH1MACRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, ETH1MACRST} }
func USB1OTGRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, USB1OTGRST} }
func USB2OTGRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, USB2OTGRST} }

type AHB2RSTR uint32

func CAMITFRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, CAMITFRST} }
func CRYPTRST_(p *Periph) mmio.RM32[AHB2RSTR]  { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, CRYPTRST} }
func HASHRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, HASHRST} }
func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR]    { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, RNGRST} }
func SDMMC2RST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, SDMMC2RST} }

type AHB4RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOARST} }
func GPIOBRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOBRST} }
func GPIOCRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOCRST} }
func GPIODRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIODRST} }
func GPIOERST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOERST} }
func GPIOFRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOFRST} }
func GPIOGRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOGRST} }
func GPIOHRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOHRST} }
func GPIOIRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOIRST} }
func GPIOJRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOJRST} }
func GPIOKRST_(p *Periph) mmio.RM32[AHB4RSTR] { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, GPIOKRST} }
func CRCRST_(p *Periph) mmio.RM32[AHB4RSTR]   { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, CRCRST} }
func BDMARST_(p *Periph) mmio.RM32[AHB4RSTR]  { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, BDMARST} }
func ADC3RST_(p *Periph) mmio.RM32[AHB4RSTR]  { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, ADC3RST} }
func HSEMRST_(p *Periph) mmio.RM32[AHB4RSTR]  { return mmio.RM32[AHB4RSTR]{&p.AHB4RSTR, HSEMRST} }

type APB3RSTR uint32

func LTDCRST_(p *Periph) mmio.RM32[APB3RSTR] { return mmio.RM32[APB3RSTR]{&p.APB3RSTR, LTDCRST} }

type APB1LRSTR uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM2RST} }
func TIM3RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM3RST} }
func TIM4RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM4RST} }
func TIM5RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM5RST} }
func TIM6RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM6RST} }
func TIM7RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM7RST} }
func TIM12RST_(p *Periph) mmio.RM32[APB1LRSTR]  { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM12RST} }
func TIM13RST_(p *Periph) mmio.RM32[APB1LRSTR]  { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM13RST} }
func TIM14RST_(p *Periph) mmio.RM32[APB1LRSTR]  { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, TIM14RST} }
func LPTIM1RST_(p *Periph) mmio.RM32[APB1LRSTR] { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, LPTIM1RST} }
func SPI2RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, SPI2RST} }
func SPI3RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, SPI3RST} }
func SPDIFRXRST_(p *Periph) mmio.RM32[APB1LRSTR] {
	return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, SPDIFRXRST}
}
func USART2RST_(p *Periph) mmio.RM32[APB1LRSTR] { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, USART2RST} }
func USART3RST_(p *Periph) mmio.RM32[APB1LRSTR] { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, USART3RST} }
func UART4RST_(p *Periph) mmio.RM32[APB1LRSTR]  { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, UART4RST} }
func UART5RST_(p *Periph) mmio.RM32[APB1LRSTR]  { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, UART5RST} }
func I2C1RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, I2C1RST} }
func I2C2RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, I2C2RST} }
func I2C3RST_(p *Periph) mmio.RM32[APB1LRSTR]   { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, I2C3RST} }
func CECRST_(p *Periph) mmio.RM32[APB1LRSTR]    { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, CECRST} }
func DAC12RST_(p *Periph) mmio.RM32[APB1LRSTR]  { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, DAC12RST} }
func USART7RST_(p *Periph) mmio.RM32[APB1LRSTR] { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, USART7RST} }
func USART8RST_(p *Periph) mmio.RM32[APB1LRSTR] { return mmio.RM32[APB1LRSTR]{&p.APB1LRSTR, USART8RST} }

type APB1HRSTR uint32

func CRSRST_(p *Periph) mmio.RM32[APB1HRSTR]   { return mmio.RM32[APB1HRSTR]{&p.APB1HRSTR, CRSRST} }
func SWPRST_(p *Periph) mmio.RM32[APB1HRSTR]   { return mmio.RM32[APB1HRSTR]{&p.APB1HRSTR, SWPRST} }
func OPAMPRST_(p *Periph) mmio.RM32[APB1HRSTR] { return mmio.RM32[APB1HRSTR]{&p.APB1HRSTR, OPAMPRST} }
func MDIOSRST_(p *Periph) mmio.RM32[APB1HRSTR] { return mmio.RM32[APB1HRSTR]{&p.APB1HRSTR, MDIOSRST} }
func FDCANRST_(p *Periph) mmio.RM32[APB1HRSTR] { return mmio.RM32[APB1HRSTR]{&p.APB1HRSTR, FDCANRST} }

type APB2RSTR uint32

func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM1RST} }
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM8RST} }
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, USART1RST} }
func USART6RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, USART6RST} }
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI1RST} }
func SPI4RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI4RST} }
func TIM15RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM15RST} }
func TIM16RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM16RST} }
func TIM17RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM17RST} }
func SPI5RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI5RST} }
func SAI1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SAI1RST} }
func SAI2RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SAI2RST} }
func SAI3RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SAI3RST} }
func DFSDM1RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, DFSDM1RST} }
func HRTIMRST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, HRTIMRST} }

type APB4RSTR uint32

func SYSCFGRST_(p *Periph) mmio.RM32[APB4RSTR]  { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, SYSCFGRST} }
func LPUART1RST_(p *Periph) mmio.RM32[APB4RSTR] { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, LPUART1RST} }
func SPI6RST_(p *Periph) mmio.RM32[APB4RSTR]    { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, SPI6RST} }
func I2C4RST_(p *Periph) mmio.RM32[APB4RSTR]    { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, I2C4RST} }
func LPTIM2RST_(p *Periph) mmio.RM32[APB4RSTR]  { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, LPTIM2RST} }
func LPTIM3RST_(p *Periph) mmio.RM32[APB4RSTR]  { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, LPTIM3RST} }
func LPTIM4RST_(p *Periph) mmio.RM32[APB4RSTR]  { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, LPTIM4RST} }
func LPTIM5RST_(p *Periph) mmio.RM32[APB4RSTR]  { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, LPTIM5RST} }
func COMP12RST_(p *Periph) mmio.RM32[APB4RSTR]  { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, COMP12RST} }
func VREFRST_(p *Periph) mmio.RM32[APB4RSTR]    { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, VREFRST} }
func SAI4RST_(p *Periph) mmio.RM32[APB4RSTR]    { return mmio.RM32[APB4RSTR]{&p.APB4RSTR, SAI4RST} }

type GCR uint32

func WW1RSC_(p *Periph) mmio.RM32[GCR] { return mmio.RM32[GCR]{&p.GCR, WW1RSC} }

type D3AMR uint32

func BDMAAMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{&p.D3AMR, BDMAAMEN} }
func LPUART1AMEN_(p *Periph) mmio.RM32[D3AMR] { return mmio.RM32[D3AMR]{&p.D3AMR, LPUART1AMEN} }
func SPI6AMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{&p.D3AMR, SPI6AMEN} }
func I2C4AMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{&p.D3AMR, I2C4AMEN} }
func LPTIM2AMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{&p.D3AMR, LPTIM2AMEN} }
func LPTIM3AMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{&p.D3AMR, LPTIM3AMEN} }
func LPTIM4AMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{&p.D3AMR, LPTIM4AMEN} }
func LPTIM5AMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{&p.D3AMR, LPTIM5AMEN} }
func COMP12AMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{&p.D3AMR, COMP12AMEN} }
func VREFAMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{&p.D3AMR, VREFAMEN} }
func RTCAMEN_(p *Periph) mmio.RM32[D3AMR]     { return mmio.RM32[D3AMR]{&p.D3AMR, RTCAMEN} }
func CRCAMEN_(p *Periph) mmio.RM32[D3AMR]     { return mmio.RM32[D3AMR]{&p.D3AMR, CRCAMEN} }
func SAI4AMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{&p.D3AMR, SAI4AMEN} }
func ADC3AMEN_(p *Periph) mmio.RM32[D3AMR]    { return mmio.RM32[D3AMR]{&p.D3AMR, ADC3AMEN} }
func BKPRAMAMEN_(p *Periph) mmio.RM32[D3AMR]  { return mmio.RM32[D3AMR]{&p.D3AMR, BKPRAMAMEN} }
func SRAM4AMEN_(p *Periph) mmio.RM32[D3AMR]   { return mmio.RM32[D3AMR]{&p.D3AMR, SRAM4AMEN} }

type RSR uint32

func RMVF_(p *Periph) mmio.RM32[RSR]      { return mmio.RM32[RSR]{&p.RSR, RMVF} }
func CPURSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{&p.RSR, CPURSTF} }
func D1RSTF_(p *Periph) mmio.RM32[RSR]    { return mmio.RM32[RSR]{&p.RSR, D1RSTF} }
func D2RSTF_(p *Periph) mmio.RM32[RSR]    { return mmio.RM32[RSR]{&p.RSR, D2RSTF} }
func BORRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{&p.RSR, BORRSTF} }
func PINRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{&p.RSR, PINRSTF} }
func PORRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{&p.RSR, PORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[RSR]   { return mmio.RM32[RSR]{&p.RSR, SFTRSTF} }
func IWDG1RSTF_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{&p.RSR, IWDG1RSTF} }
func WWDG1RSTF_(p *Periph) mmio.RM32[RSR] { return mmio.RM32[RSR]{&p.RSR, WWDG1RSTF} }
func LPWRRSTF_(p *Periph) mmio.RM32[RSR]  { return mmio.RM32[RSR]{&p.RSR, LPWRRSTF} }

type AHB3ENR uint32

func MDMAEN_(p *Periph) mmio.RM32[AHB3ENR]   { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, MDMAEN} }
func DMA2DEN_(p *Periph) mmio.RM32[AHB3ENR]  { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, DMA2DEN} }
func JPGDECEN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, JPGDECEN} }
func FMCEN_(p *Periph) mmio.RM32[AHB3ENR]    { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, FMCEN} }
func QSPIEN_(p *Periph) mmio.RM32[AHB3ENR]   { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, QSPIEN} }
func SDMMC1EN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, SDMMC1EN} }

type AHB1ENR uint32

func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR]    { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR]    { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMA2EN} }
func ADC12EN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ADC12EN} }
func ETH1MACEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETH1MACEN} }
func ETH1TXEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETH1TXEN} }
func ETH1RXEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETH1RXEN} }
func USB2OTGHSULPIEN_(p *Periph) mmio.RM32[AHB1ENR] {
	return mmio.RM32[AHB1ENR]{&p.AHB1ENR, USB2OTGHSULPIEN}
}
func USB1OTGEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, USB1OTGEN} }
func USB1ULPIEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, USB1ULPIEN} }
func USB2OTGEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, USB2OTGEN} }
func USB2ULPIEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, USB2ULPIEN} }

type AHB2ENR uint32

func CAMITFEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, CAMITFEN} }
func CRYPTEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, CRYPTEN} }
func HASHEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, HASHEN} }
func RNGEN_(p *Periph) mmio.RM32[AHB2ENR]    { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, RNGEN} }
func SDMMC2EN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, SDMMC2EN} }
func SRAM1EN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, SRAM1EN} }
func SRAM2EN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, SRAM2EN} }
func SRAM3EN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, SRAM3EN} }

type AHB4ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOGEN} }
func GPIOHEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOHEN} }
func GPIOIEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOIEN} }
func GPIOJEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOJEN} }
func GPIOKEN_(p *Periph) mmio.RM32[AHB4ENR]  { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, GPIOKEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB4ENR]    { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, CRCEN} }
func BDMAEN_(p *Periph) mmio.RM32[AHB4ENR]   { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, BDMAEN} }
func ADC3EN_(p *Periph) mmio.RM32[AHB4ENR]   { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, ADC3EN} }
func HSEMEN_(p *Periph) mmio.RM32[AHB4ENR]   { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, HSEMEN} }
func BKPRAMEN_(p *Periph) mmio.RM32[AHB4ENR] { return mmio.RM32[AHB4ENR]{&p.AHB4ENR, BKPRAMEN} }

type APB3ENR uint32

func LTDCEN_(p *Periph) mmio.RM32[APB3ENR]  { return mmio.RM32[APB3ENR]{&p.APB3ENR, LTDCEN} }
func WWDG1EN_(p *Periph) mmio.RM32[APB3ENR] { return mmio.RM32[APB3ENR]{&p.APB3ENR, WWDG1EN} }

type APB1LENR uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM7EN} }
func TIM12EN_(p *Periph) mmio.RM32[APB1LENR]   { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM12EN} }
func TIM13EN_(p *Periph) mmio.RM32[APB1LENR]   { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM13EN} }
func TIM14EN_(p *Periph) mmio.RM32[APB1LENR]   { return mmio.RM32[APB1LENR]{&p.APB1LENR, TIM14EN} }
func LPTIM1EN_(p *Periph) mmio.RM32[APB1LENR]  { return mmio.RM32[APB1LENR]{&p.APB1LENR, LPTIM1EN} }
func SPI2EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, SPI3EN} }
func SPDIFRXEN_(p *Periph) mmio.RM32[APB1LENR] { return mmio.RM32[APB1LENR]{&p.APB1LENR, SPDIFRXEN} }
func USART2EN_(p *Periph) mmio.RM32[APB1LENR]  { return mmio.RM32[APB1LENR]{&p.APB1LENR, USART2EN} }
func USART3EN_(p *Periph) mmio.RM32[APB1LENR]  { return mmio.RM32[APB1LENR]{&p.APB1LENR, USART3EN} }
func UART4EN_(p *Periph) mmio.RM32[APB1LENR]   { return mmio.RM32[APB1LENR]{&p.APB1LENR, UART4EN} }
func UART5EN_(p *Periph) mmio.RM32[APB1LENR]   { return mmio.RM32[APB1LENR]{&p.APB1LENR, UART5EN} }
func I2C1EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, I2C2EN} }
func I2C3EN_(p *Periph) mmio.RM32[APB1LENR]    { return mmio.RM32[APB1LENR]{&p.APB1LENR, I2C3EN} }
func CECEN_(p *Periph) mmio.RM32[APB1LENR]     { return mmio.RM32[APB1LENR]{&p.APB1LENR, CECEN} }
func DAC12EN_(p *Periph) mmio.RM32[APB1LENR]   { return mmio.RM32[APB1LENR]{&p.APB1LENR, DAC12EN} }
func USART7EN_(p *Periph) mmio.RM32[APB1LENR]  { return mmio.RM32[APB1LENR]{&p.APB1LENR, USART7EN} }
func USART8EN_(p *Periph) mmio.RM32[APB1LENR]  { return mmio.RM32[APB1LENR]{&p.APB1LENR, USART8EN} }

type APB1HENR uint32

func CRSEN_(p *Periph) mmio.RM32[APB1HENR]   { return mmio.RM32[APB1HENR]{&p.APB1HENR, CRSEN} }
func SWPEN_(p *Periph) mmio.RM32[APB1HENR]   { return mmio.RM32[APB1HENR]{&p.APB1HENR, SWPEN} }
func OPAMPEN_(p *Periph) mmio.RM32[APB1HENR] { return mmio.RM32[APB1HENR]{&p.APB1HENR, OPAMPEN} }
func MDIOSEN_(p *Periph) mmio.RM32[APB1HENR] { return mmio.RM32[APB1HENR]{&p.APB1HENR, MDIOSEN} }
func FDCANEN_(p *Periph) mmio.RM32[APB1HENR] { return mmio.RM32[APB1HENR]{&p.APB1HENR, FDCANEN} }

type APB2ENR uint32

func TIM1EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, USART1EN} }
func USART6EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, USART6EN} }
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI1EN} }
func SPI4EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI4EN} }
func TIM15EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM15EN} }
func TIM16EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM16EN} }
func TIM17EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM17EN} }
func SPI5EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI5EN} }
func SAI1EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SAI1EN} }
func SAI2EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SAI2EN} }
func SAI3EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SAI3EN} }
func DFSDM1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, DFSDM1EN} }
func HRTIMEN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, HRTIMEN} }

type APB4ENR uint32

func SYSCFGEN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, SYSCFGEN} }
func LPUART1EN_(p *Periph) mmio.RM32[APB4ENR] { return mmio.RM32[APB4ENR]{&p.APB4ENR, LPUART1EN} }
func SPI6EN_(p *Periph) mmio.RM32[APB4ENR]    { return mmio.RM32[APB4ENR]{&p.APB4ENR, SPI6EN} }
func I2C4EN_(p *Periph) mmio.RM32[APB4ENR]    { return mmio.RM32[APB4ENR]{&p.APB4ENR, I2C4EN} }
func LPTIM2EN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, LPTIM2EN} }
func LPTIM3EN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, LPTIM3EN} }
func LPTIM4EN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, LPTIM4EN} }
func LPTIM5EN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, LPTIM5EN} }
func COMP12EN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, COMP12EN} }
func VREFEN_(p *Periph) mmio.RM32[APB4ENR]    { return mmio.RM32[APB4ENR]{&p.APB4ENR, VREFEN} }
func RTCAPBEN_(p *Periph) mmio.RM32[APB4ENR]  { return mmio.RM32[APB4ENR]{&p.APB4ENR, RTCAPBEN} }
func SAI4EN_(p *Periph) mmio.RM32[APB4ENR]    { return mmio.RM32[APB4ENR]{&p.APB4ENR, SAI4EN} }

type AHB3LPENR uint32

func MDMALPEN_(p *Periph) mmio.RM32[AHB3LPENR]  { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, MDMALPEN} }
func DMA2DLPEN_(p *Periph) mmio.RM32[AHB3LPENR] { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, DMA2DLPEN} }
func JPGDECLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, JPGDECLPEN}
}
func FLASHLPEN_(p *Periph) mmio.RM32[AHB3LPENR] { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, FLASHLPEN} }
func FMCLPEN_(p *Periph) mmio.RM32[AHB3LPENR]   { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, FMCLPEN} }
func QSPILPEN_(p *Periph) mmio.RM32[AHB3LPENR]  { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, QSPILPEN} }
func SDMMC1LPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, SDMMC1LPEN}
}
func D1DTCM1LPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, D1DTCM1LPEN}
}
func DTCM2LPEN_(p *Periph) mmio.RM32[AHB3LPENR] { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, DTCM2LPEN} }
func ITCMLPEN_(p *Periph) mmio.RM32[AHB3LPENR]  { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, ITCMLPEN} }
func AXISRAMLPEN_(p *Periph) mmio.RM32[AHB3LPENR] {
	return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, AXISRAMLPEN}
}

type AHB1LPENR uint32

func DMA1LPEN_(p *Periph) mmio.RM32[AHB1LPENR]  { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, DMA1LPEN} }
func DMA2LPEN_(p *Periph) mmio.RM32[AHB1LPENR]  { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, DMA2LPEN} }
func ADC12LPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ADC12LPEN} }
func ETH1MACLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETH1MACLPEN}
}
func ETH1TXLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETH1TXLPEN}
}
func ETH1RXLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETH1RXLPEN}
}
func USB1OTGHSLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, USB1OTGHSLPEN}
}
func USB1OTGHSULPILPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, USB1OTGHSULPILPEN}
}
func USB2OTGHSLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, USB2OTGHSLPEN}
}
func USB2OTGHSULPILPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, USB2OTGHSULPILPEN}
}

type AHB2LPENR uint32

func CAMITFLPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, CAMITFLPEN}
}
func CRYPTLPEN_(p *Periph) mmio.RM32[AHB2LPENR] { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, CRYPTLPEN} }
func HASHLPEN_(p *Periph) mmio.RM32[AHB2LPENR]  { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, HASHLPEN} }
func RNGLPEN_(p *Periph) mmio.RM32[AHB2LPENR]   { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, RNGLPEN} }
func SDMMC2LPEN_(p *Periph) mmio.RM32[AHB2LPENR] {
	return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, SDMMC2LPEN}
}
func SRAM1LPEN_(p *Periph) mmio.RM32[AHB2LPENR] { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, SRAM1LPEN} }
func SRAM2LPEN_(p *Periph) mmio.RM32[AHB2LPENR] { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, SRAM2LPEN} }
func SRAM3LPEN_(p *Periph) mmio.RM32[AHB2LPENR] { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, SRAM3LPEN} }

type AHB4LPENR uint32

func GPIOALPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOALPEN} }
func GPIOBLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOBLPEN} }
func GPIOCLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOCLPEN} }
func GPIODLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIODLPEN} }
func GPIOELPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOELPEN} }
func GPIOFLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOFLPEN} }
func GPIOGLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOGLPEN} }
func GPIOHLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOHLPEN} }
func GPIOILPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOILPEN} }
func GPIOJLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOJLPEN} }
func GPIOKLPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, GPIOKLPEN} }
func CRCLPEN_(p *Periph) mmio.RM32[AHB4LPENR]   { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, CRCLPEN} }
func BDMALPEN_(p *Periph) mmio.RM32[AHB4LPENR]  { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, BDMALPEN} }
func ADC3LPEN_(p *Periph) mmio.RM32[AHB4LPENR]  { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, ADC3LPEN} }
func BKPRAMLPEN_(p *Periph) mmio.RM32[AHB4LPENR] {
	return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, BKPRAMLPEN}
}
func SRAM4LPEN_(p *Periph) mmio.RM32[AHB4LPENR] { return mmio.RM32[AHB4LPENR]{&p.AHB4LPENR, SRAM4LPEN} }

type APB3LPENR uint32

func LTDCLPEN_(p *Periph) mmio.RM32[APB3LPENR]  { return mmio.RM32[APB3LPENR]{&p.APB3LPENR, LTDCLPEN} }
func WWDG1LPEN_(p *Periph) mmio.RM32[APB3LPENR] { return mmio.RM32[APB3LPENR]{&p.APB3LPENR, WWDG1LPEN} }

type APB1LLPENR uint32

func TIM2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM2LPEN}
}
func TIM3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM3LPEN}
}
func TIM4LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM4LPEN}
}
func TIM5LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM5LPEN}
}
func TIM6LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM6LPEN}
}
func TIM7LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM7LPEN}
}
func TIM12LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM12LPEN}
}
func TIM13LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM13LPEN}
}
func TIM14LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, TIM14LPEN}
}
func LPTIM1LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, LPTIM1LPEN}
}
func SPI2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, SPI2LPEN}
}
func SPI3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, SPI3LPEN}
}
func SPDIFRXLPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, SPDIFRXLPEN}
}
func USART2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, USART2LPEN}
}
func USART3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, USART3LPEN}
}
func UART4LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, UART4LPEN}
}
func UART5LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, UART5LPEN}
}
func I2C1LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, I2C1LPEN}
}
func I2C2LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, I2C2LPEN}
}
func I2C3LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, I2C3LPEN}
}
func HDMICECLPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, HDMICECLPEN}
}
func DAC12LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, DAC12LPEN}
}
func USART7LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, USART7LPEN}
}
func USART8LPEN_(p *Periph) mmio.RM32[APB1LLPENR] {
	return mmio.RM32[APB1LLPENR]{&p.APB1LLPENR, USART8LPEN}
}

type APB1HLPENR uint32

func CRSLPEN_(p *Periph) mmio.RM32[APB1HLPENR] { return mmio.RM32[APB1HLPENR]{&p.APB1HLPENR, CRSLPEN} }
func SWPLPEN_(p *Periph) mmio.RM32[APB1HLPENR] { return mmio.RM32[APB1HLPENR]{&p.APB1HLPENR, SWPLPEN} }
func OPAMPLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{&p.APB1HLPENR, OPAMPLPEN}
}
func MDIOSLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{&p.APB1HLPENR, MDIOSLPEN}
}
func FDCANLPEN_(p *Periph) mmio.RM32[APB1HLPENR] {
	return mmio.RM32[APB1HLPENR]{&p.APB1HLPENR, FDCANLPEN}
}

type APB2LPENR uint32

func TIM1LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM1LPEN} }
func TIM8LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM8LPEN} }
func USART1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{&p.APB2LPENR, USART1LPEN}
}
func USART6LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{&p.APB2LPENR, USART6LPEN}
}
func SPI1LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SPI1LPEN} }
func SPI4LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SPI4LPEN} }
func TIM15LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM15LPEN} }
func TIM16LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM16LPEN} }
func TIM17LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM17LPEN} }
func SPI5LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SPI5LPEN} }
func SAI1LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SAI1LPEN} }
func SAI2LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SAI2LPEN} }
func SAI3LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SAI3LPEN} }
func DFSDM1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{&p.APB2LPENR, DFSDM1LPEN}
}
func HRTIMLPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, HRTIMLPEN} }

type APB4LPENR uint32

func SYSCFGLPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, SYSCFGLPEN}
}
func LPUART1LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, LPUART1LPEN}
}
func SPI6LPEN_(p *Periph) mmio.RM32[APB4LPENR] { return mmio.RM32[APB4LPENR]{&p.APB4LPENR, SPI6LPEN} }
func I2C4LPEN_(p *Periph) mmio.RM32[APB4LPENR] { return mmio.RM32[APB4LPENR]{&p.APB4LPENR, I2C4LPEN} }
func LPTIM2LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, LPTIM2LPEN}
}
func LPTIM3LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, LPTIM3LPEN}
}
func LPTIM4LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, LPTIM4LPEN}
}
func LPTIM5LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, LPTIM5LPEN}
}
func COMP12LPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, COMP12LPEN}
}
func VREFLPEN_(p *Periph) mmio.RM32[APB4LPENR] { return mmio.RM32[APB4LPENR]{&p.APB4LPENR, VREFLPEN} }
func RTCAPBLPEN_(p *Periph) mmio.RM32[APB4LPENR] {
	return mmio.RM32[APB4LPENR]{&p.APB4LPENR, RTCAPBLPEN}
}
func SAI4LPEN_(p *Periph) mmio.RM32[APB4LPENR] { return mmio.RM32[APB4LPENR]{&p.APB4LPENR, SAI4LPEN} }
