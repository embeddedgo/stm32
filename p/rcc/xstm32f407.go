// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32f407

package rcc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR         mmio.R32[CR]
	PLLCFGR    mmio.R32[PLLCFGR]
	CFGR       mmio.R32[CFGR]
	CIR        mmio.R32[CIR]
	AHB1RSTR   mmio.R32[AHB1RSTR]
	AHB2RSTR   mmio.R32[AHB2RSTR]
	AHB3RSTR   mmio.R32[AHB3RSTR]
	_          uint32
	APB1RSTR   mmio.R32[APB1RSTR]
	APB2RSTR   mmio.R32[APB2RSTR]
	_          [2]uint32
	AHB1ENR    mmio.R32[AHB1ENR]
	AHB2ENR    mmio.R32[AHB2ENR]
	AHB3ENR    mmio.R32[AHB3ENR]
	_          uint32
	APB1ENR    mmio.R32[APB1ENR]
	APB2ENR    mmio.R32[APB2ENR]
	_          [2]uint32
	AHB1LPENR  mmio.R32[AHB1LPENR]
	AHB2LPENR  mmio.R32[AHB2LPENR]
	AHB3LPENR  mmio.R32[AHB3LPENR]
	_          uint32
	APB1LPENR  mmio.R32[APB1LPENR]
	APB2LPENR  mmio.R32[APB2LPENR]
	_          [2]uint32
	BDCR       mmio.R32[BDCR]
	CSR        mmio.R32[CSR]
	_          [2]uint32
	SSCGR      mmio.R32[SSCGR]
	PLLI2SCFGR mmio.R32[PLLI2SCFGR]
}

func RCC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR uint32

func HSION_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, HSION} }
func HSIRDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSIRDY} }
func HSITRIM_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, HSITRIM} }
func HSICAL_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSICAL} }
func HSEON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, HSEON} }
func HSERDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSERDY} }
func HSEBYP_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, HSEBYP} }
func CSSON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, CSSON} }
func PLLON_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, PLLON} }
func PLLRDY_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, PLLRDY} }
func PLLI2SON_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, PLLI2SON} }
func PLLI2SRDY_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, PLLI2SRDY} }

type PLLCFGR uint32

func PLLM_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLLM} }
func PLLN_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLLN} }
func PLLP_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLLP} }
func PLLSRC_(p *Periph) mmio.RM32[PLLCFGR] { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLLSRC} }
func PLLQ_(p *Periph) mmio.RM32[PLLCFGR]   { return mmio.RM32[PLLCFGR]{&p.PLLCFGR, PLLQ} }

type CFGR uint32

func SW_(p *Periph) mmio.RM32[CFGR]      { return mmio.RM32[CFGR]{&p.CFGR, SW} }
func SWS_(p *Periph) mmio.RM32[CFGR]     { return mmio.RM32[CFGR]{&p.CFGR, SWS} }
func HPRE_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{&p.CFGR, HPRE} }
func PPRE1_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{&p.CFGR, PPRE1} }
func PPRE2_(p *Periph) mmio.RM32[CFGR]   { return mmio.RM32[CFGR]{&p.CFGR, PPRE2} }
func RTCPRE_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{&p.CFGR, RTCPRE} }
func MCO1_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{&p.CFGR, MCO1} }
func I2SSRC_(p *Periph) mmio.RM32[CFGR]  { return mmio.RM32[CFGR]{&p.CFGR, I2SSRC} }
func MCO1PRE_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{&p.CFGR, MCO1PRE} }
func MCO2PRE_(p *Periph) mmio.RM32[CFGR] { return mmio.RM32[CFGR]{&p.CFGR, MCO2PRE} }
func MCO2_(p *Periph) mmio.RM32[CFGR]    { return mmio.RM32[CFGR]{&p.CFGR, MCO2} }

type CIR uint32

func LSIRDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, LSIRDYF} }
func LSERDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, LSERDYF} }
func HSIRDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, HSIRDYF} }
func HSERDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, HSERDYF} }
func PLLRDYF_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, PLLRDYF} }
func PLLI2SRDYF_(p *Periph) mmio.RM32[CIR]  { return mmio.RM32[CIR]{&p.CIR, PLLI2SRDYF} }
func CSSF_(p *Periph) mmio.RM32[CIR]        { return mmio.RM32[CIR]{&p.CIR, CSSF} }
func LSIRDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{&p.CIR, LSIRDYIE} }
func LSERDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{&p.CIR, LSERDYIE} }
func HSIRDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{&p.CIR, HSIRDYIE} }
func HSERDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{&p.CIR, HSERDYIE} }
func PLLRDYIE_(p *Periph) mmio.RM32[CIR]    { return mmio.RM32[CIR]{&p.CIR, PLLRDYIE} }
func PLLI2SRDYIE_(p *Periph) mmio.RM32[CIR] { return mmio.RM32[CIR]{&p.CIR, PLLI2SRDYIE} }
func LSIRDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, LSIRDYC} }
func LSERDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, LSERDYC} }
func HSIRDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, HSIRDYC} }
func HSERDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, HSERDYC} }
func PLLRDYC_(p *Periph) mmio.RM32[CIR]     { return mmio.RM32[CIR]{&p.CIR, PLLRDYC} }
func PLLI2SRDYC_(p *Periph) mmio.RM32[CIR]  { return mmio.RM32[CIR]{&p.CIR, PLLI2SRDYC} }
func CSSC_(p *Periph) mmio.RM32[CIR]        { return mmio.RM32[CIR]{&p.CIR, CSSC} }

type AHB1RSTR uint32

func GPIOARST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOARST} }
func GPIOBRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOBRST} }
func GPIOCRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOCRST} }
func GPIODRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIODRST} }
func GPIOERST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOERST} }
func GPIOFRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOFRST} }
func GPIOGRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOGRST} }
func GPIOHRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOHRST} }
func GPIOIRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, GPIOIRST} }
func CRCRST_(p *Periph) mmio.RM32[AHB1RSTR]    { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, CRCRST} }
func DMA1RST_(p *Periph) mmio.RM32[AHB1RSTR]   { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMA1RST} }
func DMA2RST_(p *Periph) mmio.RM32[AHB1RSTR]   { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, DMA2RST} }
func ETHMACRST_(p *Periph) mmio.RM32[AHB1RSTR] { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, ETHMACRST} }
func OTGHSRST_(p *Periph) mmio.RM32[AHB1RSTR]  { return mmio.RM32[AHB1RSTR]{&p.AHB1RSTR, OTGHSRST} }

type AHB2RSTR uint32

func DCMIRST_(p *Periph) mmio.RM32[AHB2RSTR]  { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, DCMIRST} }
func CRYPRST_(p *Periph) mmio.RM32[AHB2RSTR]  { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, CRYPRST} }
func RNGRST_(p *Periph) mmio.RM32[AHB2RSTR]   { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, RNGRST} }
func OTGFSRST_(p *Periph) mmio.RM32[AHB2RSTR] { return mmio.RM32[AHB2RSTR]{&p.AHB2RSTR, OTGFSRST} }

type AHB3RSTR uint32

func FSMCRST_(p *Periph) mmio.RM32[AHB3RSTR] { return mmio.RM32[AHB3RSTR]{&p.AHB3RSTR, FSMCRST} }

type APB1RSTR uint32

func TIM2RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM2RST} }
func TIM3RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM3RST} }
func TIM4RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM4RST} }
func TIM5RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM5RST} }
func TIM6RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM6RST} }
func TIM7RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM7RST} }
func TIM12RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM12RST} }
func TIM13RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM13RST} }
func TIM14RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, TIM14RST} }
func WWDGRST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, WWDGRST} }
func SPI2RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, SPI2RST} }
func SPI3RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, SPI3RST} }
func UART2RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, UART2RST} }
func UART3RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, UART3RST} }
func UART4RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, UART4RST} }
func UART5RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, UART5RST} }
func I2C1RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, I2C1RST} }
func I2C2RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, I2C2RST} }
func I2C3RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, I2C3RST} }
func CAN1RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, CAN1RST} }
func CAN2RST_(p *Periph) mmio.RM32[APB1RSTR]  { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, CAN2RST} }
func PWRRST_(p *Periph) mmio.RM32[APB1RSTR]   { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, PWRRST} }
func DACRST_(p *Periph) mmio.RM32[APB1RSTR]   { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, DACRST} }
func UART7RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, UART7RST} }
func UART8RST_(p *Periph) mmio.RM32[APB1RSTR] { return mmio.RM32[APB1RSTR]{&p.APB1RSTR, UART8RST} }

type APB2RSTR uint32

func TIM1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM1RST} }
func TIM8RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM8RST} }
func USART1RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, USART1RST} }
func USART6RST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, USART6RST} }
func ADCRST_(p *Periph) mmio.RM32[APB2RSTR]    { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, ADCRST} }
func SDIORST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SDIORST} }
func SPI1RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI1RST} }
func SPI4RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI4RST} }
func SYSCFGRST_(p *Periph) mmio.RM32[APB2RSTR] { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SYSCFGRST} }
func TIM9RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM9RST} }
func TIM10RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM10RST} }
func TIM11RST_(p *Periph) mmio.RM32[APB2RSTR]  { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, TIM11RST} }
func SPI5RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI5RST} }
func SPI6RST_(p *Periph) mmio.RM32[APB2RSTR]   { return mmio.RM32[APB2RSTR]{&p.APB2RSTR, SPI6RST} }

type AHB1ENR uint32

func GPIOAEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOAEN} }
func GPIOBEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOBEN} }
func GPIOCEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOCEN} }
func GPIODEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIODEN} }
func GPIOEEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOEEN} }
func GPIOFEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOFEN} }
func GPIOGEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOGEN} }
func GPIOHEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOHEN} }
func GPIOIEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, GPIOIEN} }
func CRCEN_(p *Periph) mmio.RM32[AHB1ENR]       { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, CRCEN} }
func BKPSRAMEN_(p *Periph) mmio.RM32[AHB1ENR]   { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, BKPSRAMEN} }
func DMA1EN_(p *Periph) mmio.RM32[AHB1ENR]      { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMA1EN} }
func DMA2EN_(p *Periph) mmio.RM32[AHB1ENR]      { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, DMA2EN} }
func ETHMACEN_(p *Periph) mmio.RM32[AHB1ENR]    { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETHMACEN} }
func ETHMACTXEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETHMACTXEN} }
func ETHMACRXEN_(p *Periph) mmio.RM32[AHB1ENR]  { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETHMACRXEN} }
func ETHMACPTPEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, ETHMACPTPEN} }
func OTGHSEN_(p *Periph) mmio.RM32[AHB1ENR]     { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, OTGHSEN} }
func OTGHSULPIEN_(p *Periph) mmio.RM32[AHB1ENR] { return mmio.RM32[AHB1ENR]{&p.AHB1ENR, OTGHSULPIEN} }

type AHB2ENR uint32

func DCMIEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, DCMIEN} }
func CRYPEN_(p *Periph) mmio.RM32[AHB2ENR]  { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, CRYPEN} }
func RNGEN_(p *Periph) mmio.RM32[AHB2ENR]   { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, RNGEN} }
func OTGFSEN_(p *Periph) mmio.RM32[AHB2ENR] { return mmio.RM32[AHB2ENR]{&p.AHB2ENR, OTGFSEN} }

type AHB3ENR uint32

func FSMCEN_(p *Periph) mmio.RM32[AHB3ENR] { return mmio.RM32[AHB3ENR]{&p.AHB3ENR, FSMCEN} }

type APB1ENR uint32

func TIM2EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM2EN} }
func TIM3EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM3EN} }
func TIM4EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM4EN} }
func TIM5EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM5EN} }
func TIM6EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM6EN} }
func TIM7EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM7EN} }
func TIM12EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM12EN} }
func TIM13EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM13EN} }
func TIM14EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, TIM14EN} }
func WWDGEN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, WWDGEN} }
func SPI2EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, SPI2EN} }
func SPI3EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, SPI3EN} }
func USART2EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{&p.APB1ENR, USART2EN} }
func USART3EN_(p *Periph) mmio.RM32[APB1ENR] { return mmio.RM32[APB1ENR]{&p.APB1ENR, USART3EN} }
func UART4EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, UART4EN} }
func UART5EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, UART5EN} }
func I2C1EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, I2C1EN} }
func I2C2EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, I2C2EN} }
func I2C3EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, I2C3EN} }
func CAN1EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, CAN1EN} }
func CAN2EN_(p *Periph) mmio.RM32[APB1ENR]   { return mmio.RM32[APB1ENR]{&p.APB1ENR, CAN2EN} }
func PWREN_(p *Periph) mmio.RM32[APB1ENR]    { return mmio.RM32[APB1ENR]{&p.APB1ENR, PWREN} }
func DACEN_(p *Periph) mmio.RM32[APB1ENR]    { return mmio.RM32[APB1ENR]{&p.APB1ENR, DACEN} }
func UART7EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, UART7EN} }
func UART8EN_(p *Periph) mmio.RM32[APB1ENR]  { return mmio.RM32[APB1ENR]{&p.APB1ENR, UART8EN} }

type APB2ENR uint32

func TIM1EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM1EN} }
func TIM8EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM8EN} }
func USART1EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, USART1EN} }
func USART6EN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, USART6EN} }
func ADC1EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, ADC1EN} }
func ADC2EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, ADC2EN} }
func ADC3EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, ADC3EN} }
func SDIOEN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SDIOEN} }
func SPI1EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI1EN} }
func SPI4EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI4EN} }
func SYSCFGEN_(p *Periph) mmio.RM32[APB2ENR] { return mmio.RM32[APB2ENR]{&p.APB2ENR, SYSCFGEN} }
func TIM9EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM9EN} }
func TIM10EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM10EN} }
func TIM11EN_(p *Periph) mmio.RM32[APB2ENR]  { return mmio.RM32[APB2ENR]{&p.APB2ENR, TIM11EN} }
func SPI5EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI5EN} }
func SPI6EN_(p *Periph) mmio.RM32[APB2ENR]   { return mmio.RM32[APB2ENR]{&p.APB2ENR, SPI6EN} }

type AHB1LPENR uint32

func GPIOALPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOALPEN} }
func GPIOBLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOBLPEN} }
func GPIOCLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOCLPEN} }
func GPIODLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIODLPEN} }
func GPIOELPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOELPEN} }
func GPIOFLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOFLPEN} }
func GPIOGLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOGLPEN} }
func GPIOHLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOHLPEN} }
func GPIOILPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, GPIOILPEN} }
func CRCLPEN_(p *Periph) mmio.RM32[AHB1LPENR]   { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, CRCLPEN} }
func FLITFLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, FLITFLPEN} }
func SRAM1LPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, SRAM1LPEN} }
func SRAM2LPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, SRAM2LPEN} }
func BKPSRAMLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, BKPSRAMLPEN}
}
func DMA1LPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, DMA1LPEN} }
func DMA2LPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, DMA2LPEN} }
func ETHMACLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETHMACLPEN}
}
func ETHMACTXLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETHMACTXLPEN}
}
func ETHMACRXLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETHMACRXLPEN}
}
func ETHMACPTPLPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, ETHMACPTPLPEN}
}
func OTGHSLPEN_(p *Periph) mmio.RM32[AHB1LPENR] { return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, OTGHSLPEN} }
func OTGHSULPILPEN_(p *Periph) mmio.RM32[AHB1LPENR] {
	return mmio.RM32[AHB1LPENR]{&p.AHB1LPENR, OTGHSULPILPEN}
}

type AHB2LPENR uint32

func DCMILPEN_(p *Periph) mmio.RM32[AHB2LPENR]  { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, DCMILPEN} }
func RNGLPEN_(p *Periph) mmio.RM32[AHB2LPENR]   { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, RNGLPEN} }
func OTGFSLPEN_(p *Periph) mmio.RM32[AHB2LPENR] { return mmio.RM32[AHB2LPENR]{&p.AHB2LPENR, OTGFSLPEN} }

type AHB3LPENR uint32

func FSMCLPEN_(p *Periph) mmio.RM32[AHB3LPENR] { return mmio.RM32[AHB3LPENR]{&p.AHB3LPENR, FSMCLPEN} }

type APB1LPENR uint32

func TIM2LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM2LPEN} }
func TIM3LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM3LPEN} }
func TIM4LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM4LPEN} }
func TIM5LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM5LPEN} }
func TIM6LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM6LPEN} }
func TIM7LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM7LPEN} }
func TIM12LPEN_(p *Periph) mmio.RM32[APB1LPENR] { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM12LPEN} }
func TIM13LPEN_(p *Periph) mmio.RM32[APB1LPENR] { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM13LPEN} }
func TIM14LPEN_(p *Periph) mmio.RM32[APB1LPENR] { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, TIM14LPEN} }
func WWDGLPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, WWDGLPEN} }
func SPI2LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, SPI2LPEN} }
func SPI3LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, SPI3LPEN} }
func USART2LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{&p.APB1LPENR, USART2LPEN}
}
func USART3LPEN_(p *Periph) mmio.RM32[APB1LPENR] {
	return mmio.RM32[APB1LPENR]{&p.APB1LPENR, USART3LPEN}
}
func UART4LPEN_(p *Periph) mmio.RM32[APB1LPENR] { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, UART4LPEN} }
func UART5LPEN_(p *Periph) mmio.RM32[APB1LPENR] { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, UART5LPEN} }
func I2C1LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, I2C1LPEN} }
func I2C2LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, I2C2LPEN} }
func I2C3LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, I2C3LPEN} }
func CAN1LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, CAN1LPEN} }
func CAN2LPEN_(p *Periph) mmio.RM32[APB1LPENR]  { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, CAN2LPEN} }
func PWRLPEN_(p *Periph) mmio.RM32[APB1LPENR]   { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, PWRLPEN} }
func DACLPEN_(p *Periph) mmio.RM32[APB1LPENR]   { return mmio.RM32[APB1LPENR]{&p.APB1LPENR, DACLPEN} }

type APB2LPENR uint32

func TIM1LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM1LPEN} }
func TIM8LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM8LPEN} }
func USART1LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{&p.APB2LPENR, USART1LPEN}
}
func USART6LPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{&p.APB2LPENR, USART6LPEN}
}
func ADC1LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, ADC1LPEN} }
func ADC2LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, ADC2LPEN} }
func ADC3LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, ADC3LPEN} }
func SDIOLPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SDIOLPEN} }
func SPI1LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SPI1LPEN} }
func SYSCFGLPEN_(p *Periph) mmio.RM32[APB2LPENR] {
	return mmio.RM32[APB2LPENR]{&p.APB2LPENR, SYSCFGLPEN}
}
func TIM9LPEN_(p *Periph) mmio.RM32[APB2LPENR]  { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM9LPEN} }
func TIM10LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM10LPEN} }
func TIM11LPEN_(p *Periph) mmio.RM32[APB2LPENR] { return mmio.RM32[APB2LPENR]{&p.APB2LPENR, TIM11LPEN} }

type BDCR uint32

func LSEON_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, LSEON} }
func LSERDY_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{&p.BDCR, LSERDY} }
func LSEBYP_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{&p.BDCR, LSEBYP} }
func RTCSEL_(p *Periph) mmio.RM32[BDCR] { return mmio.RM32[BDCR]{&p.BDCR, RTCSEL} }
func RTCEN_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, RTCEN} }
func BDRST_(p *Periph) mmio.RM32[BDCR]  { return mmio.RM32[BDCR]{&p.BDCR, BDRST} }

type CSR uint32

func LSION_(p *Periph) mmio.RM32[CSR]    { return mmio.RM32[CSR]{&p.CSR, LSION} }
func LSIRDY_(p *Periph) mmio.RM32[CSR]   { return mmio.RM32[CSR]{&p.CSR, LSIRDY} }
func RMVF_(p *Periph) mmio.RM32[CSR]     { return mmio.RM32[CSR]{&p.CSR, RMVF} }
func BORRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, BORRSTF} }
func PADRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, PADRSTF} }
func PORRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, PORRSTF} }
func SFTRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SFTRSTF} }
func WDGRSTF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, WDGRSTF} }
func WWDGRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, WWDGRSTF} }
func LPWRRSTF_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, LPWRRSTF} }

type SSCGR uint32

func MODPER_(p *Periph) mmio.RM32[SSCGR]    { return mmio.RM32[SSCGR]{&p.SSCGR, MODPER} }
func INCSTEP_(p *Periph) mmio.RM32[SSCGR]   { return mmio.RM32[SSCGR]{&p.SSCGR, INCSTEP} }
func SPREADSEL_(p *Periph) mmio.RM32[SSCGR] { return mmio.RM32[SSCGR]{&p.SSCGR, SPREADSEL} }
func SSCGEN_(p *Periph) mmio.RM32[SSCGR]    { return mmio.RM32[SSCGR]{&p.SSCGR, SSCGEN} }

type PLLI2SCFGR uint32

func PLLI2SNx_(p *Periph) mmio.RM32[PLLI2SCFGR] {
	return mmio.RM32[PLLI2SCFGR]{&p.PLLI2SCFGR, PLLI2SNx}
}
func PLLI2SRx_(p *Periph) mmio.RM32[PLLI2SCFGR] {
	return mmio.RM32[PLLI2SCFGR]{&p.PLLI2SCFGR, PLLI2SRx}
}
