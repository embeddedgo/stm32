// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32f407

package gpio

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MODER   mmio.R32[MODER]
	OTYPER  mmio.R32[OTYPER]
	OSPEEDR mmio.R32[OSPEEDR]
	PUPDR   mmio.R32[PUPDR]
	IDR     mmio.R32[IDR]
	ODR     mmio.R32[ODR]
	BSRR    mmio.R32[BSRR]
	LCKR    mmio.R32[LCKR]
	AFRL    mmio.R32[AFRL]
	AFRH    mmio.R32[AFRH]
}

func GPIOA() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOA_BASE))) }
func GPIOB() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOB_BASE))) }
func GPIOC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOC_BASE))) }
func GPIOD() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOD_BASE))) }
func GPIOE() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOE_BASE))) }
func GPIOF() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOF_BASE))) }
func GPIOG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOG_BASE))) }
func GPIOH() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOH_BASE))) }
func GPIOI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOI_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB1
}

type MODER uint32

func MODER0_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER0} }
func MODER1_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER1} }
func MODER2_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER2} }
func MODER3_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER3} }
func MODER4_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER4} }
func MODER5_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER5} }
func MODER6_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER6} }
func MODER7_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER7} }
func MODER8_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER8} }
func MODER9_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER9} }
func MODER10_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER10} }
func MODER11_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER11} }
func MODER12_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER12} }
func MODER13_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER13} }
func MODER14_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER14} }
func MODER15_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODER15} }

type OTYPER uint32

func OT0_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT0} }
func OT1_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT1} }
func OT2_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT2} }
func OT3_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT3} }
func OT4_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT4} }
func OT5_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT5} }
func OT6_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT6} }
func OT7_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT7} }
func OT8_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT8} }
func OT9_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT9} }
func OT10_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT10} }
func OT11_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT11} }
func OT12_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT12} }
func OT13_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT13} }
func OT14_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT14} }
func OT15_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT15} }

type OSPEEDR uint32

func OSPEEDR0_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR0}
}
func OSPEEDR1_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR1}
}
func OSPEEDR2_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR2}
}
func OSPEEDR3_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR3}
}
func OSPEEDR4_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR4}
}
func OSPEEDR5_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR5}
}
func OSPEEDR6_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR6}
}
func OSPEEDR7_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR7}
}
func OSPEEDR8_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR8}
}
func OSPEEDR9_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR9}
}
func OSPEEDR10_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR10}
}
func OSPEEDR11_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR11}
}
func OSPEEDR12_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR12}
}
func OSPEEDR13_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR13}
}
func OSPEEDR14_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR14}
}
func OSPEEDR15_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEEDR15}
}

type PUPDR uint32

func PUPDR0_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR0} }
func PUPDR1_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR1} }
func PUPDR2_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR2} }
func PUPDR3_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR3} }
func PUPDR4_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR4} }
func PUPDR5_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR5} }
func PUPDR6_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR6} }
func PUPDR7_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR7} }
func PUPDR8_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR8} }
func PUPDR9_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR9} }
func PUPDR10_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR10} }
func PUPDR11_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR11} }
func PUPDR12_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR12} }
func PUPDR13_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR13} }
func PUPDR14_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR14} }
func PUPDR15_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPDR15} }

type IDR uint32

func IDR0_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR0} }
func IDR1_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR1} }
func IDR2_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR2} }
func IDR3_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR3} }
func IDR4_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR4} }
func IDR5_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR5} }
func IDR6_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR6} }
func IDR7_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR7} }
func IDR8_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR8} }
func IDR9_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR9} }
func IDR10_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR10} }
func IDR11_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR11} }
func IDR12_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR12} }
func IDR13_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR13} }
func IDR14_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR14} }
func IDR15_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: IDR15} }

type ODR uint32

func ODR0_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR0} }
func ODR1_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR1} }
func ODR2_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR2} }
func ODR3_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR3} }
func ODR4_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR4} }
func ODR5_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR5} }
func ODR6_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR6} }
func ODR7_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR7} }
func ODR8_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR8} }
func ODR9_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR9} }
func ODR10_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR10} }
func ODR11_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR11} }
func ODR12_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR12} }
func ODR13_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR13} }
func ODR14_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR14} }
func ODR15_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: ODR15} }

type BSRR uint32

func BS0_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS0} }
func BS1_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS1} }
func BS2_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS2} }
func BS3_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS3} }
func BS4_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS4} }
func BS5_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS5} }
func BS6_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS6} }
func BS7_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS7} }
func BS8_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS8} }
func BS9_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS9} }
func BS10_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS10} }
func BS11_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS11} }
func BS12_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS12} }
func BS13_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS13} }
func BS14_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS14} }
func BS15_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS15} }
func BR0_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR0} }
func BR1_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR1} }
func BR2_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR2} }
func BR3_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR3} }
func BR4_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR4} }
func BR5_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR5} }
func BR6_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR6} }
func BR7_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR7} }
func BR8_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR8} }
func BR9_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR9} }
func BR10_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR10} }
func BR11_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR11} }
func BR12_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR12} }
func BR13_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR13} }
func BR14_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR14} }
func BR15_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR15} }

type LCKR uint32

func LCK0_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK0} }
func LCK1_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK1} }
func LCK2_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK2} }
func LCK3_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK3} }
func LCK4_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK4} }
func LCK5_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK5} }
func LCK6_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK6} }
func LCK7_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK7} }
func LCK8_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK8} }
func LCK9_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK9} }
func LCK10_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK10} }
func LCK11_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK11} }
func LCK12_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK12} }
func LCK13_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK13} }
func LCK14_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK14} }
func LCK15_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK15} }
func LCKK_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCKK} }

type AFRL uint32

func AFRL0_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL0} }
func AFRL1_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL1} }
func AFRL2_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL2} }
func AFRL3_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL3} }
func AFRL4_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL4} }
func AFRL5_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL5} }
func AFRL6_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL6} }
func AFRL7_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFRL7} }

type AFRH uint32

func AFRH8_(p *Periph) mmio.RM32[AFRH]  { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH8} }
func AFRH9_(p *Periph) mmio.RM32[AFRH]  { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH9} }
func AFRH10_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH10} }
func AFRH11_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH11} }
func AFRH12_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH12} }
func AFRH13_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH13} }
func AFRH14_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH14} }
func AFRH15_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFRH15} }
