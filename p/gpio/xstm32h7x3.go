// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32h7x3

package gpio

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MODER   RMODER
	OTYPER  ROTYPER
	OSPEEDR ROSPEEDR
	PUPDR   RPUPDR
	IDR     RIDR
	ODR     RODR
	BSRR    RBSRR
	LCKR    RLCKR
	AFRL    RAFRL
	AFRH    RAFRH
}

func GPIOA() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOA_BASE))) }
func GPIOB() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOB_BASE))) }
func GPIOC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOC_BASE))) }
func GPIOD() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOD_BASE))) }
func GPIOE() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOE_BASE))) }
func GPIOF() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOF_BASE))) }
func GPIOG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOG_BASE))) }
func GPIOH() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOH_BASE))) }
func GPIOI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOI_BASE))) }
func GPIOJ() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOJ_BASE))) }
func GPIOK() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOK_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB4
}

type MODER uint32

type RMODER struct{ mmio.U32 }

func (r *RMODER) LoadBits(mask MODER) MODER { return MODER(r.U32.LoadBits(uint32(mask))) }
func (r *RMODER) StoreBits(mask, b MODER)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMODER) SetBits(mask MODER)        { r.U32.SetBits(uint32(mask)) }
func (r *RMODER) ClearBits(mask MODER)      { r.U32.ClearBits(uint32(mask)) }
func (r *RMODER) Load() MODER               { return MODER(r.U32.Load()) }
func (r *RMODER) Store(b MODER)             { r.U32.Store(uint32(b)) }

type RMMODER struct{ mmio.UM32 }

func (rm RMMODER) Load() MODER   { return MODER(rm.UM32.Load()) }
func (rm RMMODER) Store(b MODER) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MODE0() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE0)}}
}

func (p *Periph) MODE1() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE1)}}
}

func (p *Periph) MODE2() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE2)}}
}

func (p *Periph) MODE3() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE3)}}
}

func (p *Periph) MODE4() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE4)}}
}

func (p *Periph) MODE5() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE5)}}
}

func (p *Periph) MODE6() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE6)}}
}

func (p *Periph) MODE7() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE7)}}
}

func (p *Periph) MODE8() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE8)}}
}

func (p *Periph) MODE9() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE9)}}
}

func (p *Periph) MODE10() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE10)}}
}

func (p *Periph) MODE11() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE11)}}
}

func (p *Periph) MODE12() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE12)}}
}

func (p *Periph) MODE13() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE13)}}
}

func (p *Periph) MODE14() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE14)}}
}

func (p *Periph) MODE15() RMMODER {
	return RMMODER{mmio.UM32{&p.MODER.U32, uint32(MODE15)}}
}

type OTYPER uint32

type ROTYPER struct{ mmio.U32 }

func (r *ROTYPER) LoadBits(mask OTYPER) OTYPER { return OTYPER(r.U32.LoadBits(uint32(mask))) }
func (r *ROTYPER) StoreBits(mask, b OTYPER)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROTYPER) SetBits(mask OTYPER)         { r.U32.SetBits(uint32(mask)) }
func (r *ROTYPER) ClearBits(mask OTYPER)       { r.U32.ClearBits(uint32(mask)) }
func (r *ROTYPER) Load() OTYPER                { return OTYPER(r.U32.Load()) }
func (r *ROTYPER) Store(b OTYPER)              { r.U32.Store(uint32(b)) }

type RMOTYPER struct{ mmio.UM32 }

func (rm RMOTYPER) Load() OTYPER   { return OTYPER(rm.UM32.Load()) }
func (rm RMOTYPER) Store(b OTYPER) { rm.UM32.Store(uint32(b)) }

func (p *Periph) OT0() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT0)}}
}

func (p *Periph) OT1() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT1)}}
}

func (p *Periph) OT2() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT2)}}
}

func (p *Periph) OT3() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT3)}}
}

func (p *Periph) OT4() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT4)}}
}

func (p *Periph) OT5() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT5)}}
}

func (p *Periph) OT6() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT6)}}
}

func (p *Periph) OT7() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT7)}}
}

func (p *Periph) OT8() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT8)}}
}

func (p *Periph) OT9() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT9)}}
}

func (p *Periph) OT10() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT10)}}
}

func (p *Periph) OT11() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT11)}}
}

func (p *Periph) OT12() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT12)}}
}

func (p *Periph) OT13() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT13)}}
}

func (p *Periph) OT14() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT14)}}
}

func (p *Periph) OT15() RMOTYPER {
	return RMOTYPER{mmio.UM32{&p.OTYPER.U32, uint32(OT15)}}
}

type OSPEEDR uint32

type ROSPEEDR struct{ mmio.U32 }

func (r *ROSPEEDR) LoadBits(mask OSPEEDR) OSPEEDR { return OSPEEDR(r.U32.LoadBits(uint32(mask))) }
func (r *ROSPEEDR) StoreBits(mask, b OSPEEDR)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROSPEEDR) SetBits(mask OSPEEDR)          { r.U32.SetBits(uint32(mask)) }
func (r *ROSPEEDR) ClearBits(mask OSPEEDR)        { r.U32.ClearBits(uint32(mask)) }
func (r *ROSPEEDR) Load() OSPEEDR                 { return OSPEEDR(r.U32.Load()) }
func (r *ROSPEEDR) Store(b OSPEEDR)               { r.U32.Store(uint32(b)) }

type RMOSPEEDR struct{ mmio.UM32 }

func (rm RMOSPEEDR) Load() OSPEEDR   { return OSPEEDR(rm.UM32.Load()) }
func (rm RMOSPEEDR) Store(b OSPEEDR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) OSPEED0() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED0)}}
}

func (p *Periph) OSPEED1() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED1)}}
}

func (p *Periph) OSPEED2() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED2)}}
}

func (p *Periph) OSPEED3() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED3)}}
}

func (p *Periph) OSPEED4() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED4)}}
}

func (p *Periph) OSPEED5() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED5)}}
}

func (p *Periph) OSPEED6() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED6)}}
}

func (p *Periph) OSPEED7() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED7)}}
}

func (p *Periph) OSPEED8() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED8)}}
}

func (p *Periph) OSPEED9() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED9)}}
}

func (p *Periph) OSPEED10() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED10)}}
}

func (p *Periph) OSPEED11() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED11)}}
}

func (p *Periph) OSPEED12() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED12)}}
}

func (p *Periph) OSPEED13() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED13)}}
}

func (p *Periph) OSPEED14() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED14)}}
}

func (p *Periph) OSPEED15() RMOSPEEDR {
	return RMOSPEEDR{mmio.UM32{&p.OSPEEDR.U32, uint32(OSPEED15)}}
}

type PUPDR uint32

type RPUPDR struct{ mmio.U32 }

func (r *RPUPDR) LoadBits(mask PUPDR) PUPDR { return PUPDR(r.U32.LoadBits(uint32(mask))) }
func (r *RPUPDR) StoreBits(mask, b PUPDR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPUPDR) SetBits(mask PUPDR)        { r.U32.SetBits(uint32(mask)) }
func (r *RPUPDR) ClearBits(mask PUPDR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RPUPDR) Load() PUPDR               { return PUPDR(r.U32.Load()) }
func (r *RPUPDR) Store(b PUPDR)             { r.U32.Store(uint32(b)) }

type RMPUPDR struct{ mmio.UM32 }

func (rm RMPUPDR) Load() PUPDR   { return PUPDR(rm.UM32.Load()) }
func (rm RMPUPDR) Store(b PUPDR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PUPD0() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD0)}}
}

func (p *Periph) PUPD1() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD1)}}
}

func (p *Periph) PUPD2() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD2)}}
}

func (p *Periph) PUPD3() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD3)}}
}

func (p *Periph) PUPD4() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD4)}}
}

func (p *Periph) PUPD5() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD5)}}
}

func (p *Periph) PUPD6() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD6)}}
}

func (p *Periph) PUPD7() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD7)}}
}

func (p *Periph) PUPD8() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD8)}}
}

func (p *Periph) PUPD9() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD9)}}
}

func (p *Periph) PUPD10() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD10)}}
}

func (p *Periph) PUPD11() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD11)}}
}

func (p *Periph) PUPD12() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD12)}}
}

func (p *Periph) PUPD13() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD13)}}
}

func (p *Periph) PUPD14() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD14)}}
}

func (p *Periph) PUPD15() RMPUPDR {
	return RMPUPDR{mmio.UM32{&p.PUPDR.U32, uint32(PUPD15)}}
}

type IDR uint32

type RIDR struct{ mmio.U32 }

func (r *RIDR) LoadBits(mask IDR) IDR { return IDR(r.U32.LoadBits(uint32(mask))) }
func (r *RIDR) StoreBits(mask, b IDR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIDR) SetBits(mask IDR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIDR) ClearBits(mask IDR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIDR) Load() IDR             { return IDR(r.U32.Load()) }
func (r *RIDR) Store(b IDR)           { r.U32.Store(uint32(b)) }

type RMIDR struct{ mmio.UM32 }

func (rm RMIDR) Load() IDR   { return IDR(rm.UM32.Load()) }
func (rm RMIDR) Store(b IDR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ID0() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID0)}}
}

func (p *Periph) ID1() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID1)}}
}

func (p *Periph) ID2() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID2)}}
}

func (p *Periph) ID3() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID3)}}
}

func (p *Periph) ID4() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID4)}}
}

func (p *Periph) ID5() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID5)}}
}

func (p *Periph) ID6() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID6)}}
}

func (p *Periph) ID7() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID7)}}
}

func (p *Periph) ID8() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID8)}}
}

func (p *Periph) ID9() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID9)}}
}

func (p *Periph) ID10() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID10)}}
}

func (p *Periph) ID11() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID11)}}
}

func (p *Periph) ID12() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID12)}}
}

func (p *Periph) ID13() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID13)}}
}

func (p *Periph) ID14() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID14)}}
}

func (p *Periph) ID15() RMIDR {
	return RMIDR{mmio.UM32{&p.IDR.U32, uint32(ID15)}}
}

type ODR uint32

type RODR struct{ mmio.U32 }

func (r *RODR) LoadBits(mask ODR) ODR { return ODR(r.U32.LoadBits(uint32(mask))) }
func (r *RODR) StoreBits(mask, b ODR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RODR) SetBits(mask ODR)      { r.U32.SetBits(uint32(mask)) }
func (r *RODR) ClearBits(mask ODR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RODR) Load() ODR             { return ODR(r.U32.Load()) }
func (r *RODR) Store(b ODR)           { r.U32.Store(uint32(b)) }

type RMODR struct{ mmio.UM32 }

func (rm RMODR) Load() ODR   { return ODR(rm.UM32.Load()) }
func (rm RMODR) Store(b ODR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) OD0() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD0)}}
}

func (p *Periph) OD1() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD1)}}
}

func (p *Periph) OD2() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD2)}}
}

func (p *Periph) OD3() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD3)}}
}

func (p *Periph) OD4() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD4)}}
}

func (p *Periph) OD5() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD5)}}
}

func (p *Periph) OD6() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD6)}}
}

func (p *Periph) OD7() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD7)}}
}

func (p *Periph) OD8() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD8)}}
}

func (p *Periph) OD9() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD9)}}
}

func (p *Periph) OD10() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD10)}}
}

func (p *Periph) OD11() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD11)}}
}

func (p *Periph) OD12() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD12)}}
}

func (p *Periph) OD13() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD13)}}
}

func (p *Periph) OD14() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD14)}}
}

func (p *Periph) OD15() RMODR {
	return RMODR{mmio.UM32{&p.ODR.U32, uint32(OD15)}}
}

type BSRR uint32

type RBSRR struct{ mmio.U32 }

func (r *RBSRR) LoadBits(mask BSRR) BSRR { return BSRR(r.U32.LoadBits(uint32(mask))) }
func (r *RBSRR) StoreBits(mask, b BSRR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBSRR) SetBits(mask BSRR)       { r.U32.SetBits(uint32(mask)) }
func (r *RBSRR) ClearBits(mask BSRR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RBSRR) Load() BSRR              { return BSRR(r.U32.Load()) }
func (r *RBSRR) Store(b BSRR)            { r.U32.Store(uint32(b)) }

type RMBSRR struct{ mmio.UM32 }

func (rm RMBSRR) Load() BSRR   { return BSRR(rm.UM32.Load()) }
func (rm RMBSRR) Store(b BSRR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) BS0() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS0)}}
}

func (p *Periph) BS1() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS1)}}
}

func (p *Periph) BS2() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS2)}}
}

func (p *Periph) BS3() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS3)}}
}

func (p *Periph) BS4() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS4)}}
}

func (p *Periph) BS5() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS5)}}
}

func (p *Periph) BS6() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS6)}}
}

func (p *Periph) BS7() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS7)}}
}

func (p *Periph) BS8() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS8)}}
}

func (p *Periph) BS9() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS9)}}
}

func (p *Periph) BS10() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS10)}}
}

func (p *Periph) BS11() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS11)}}
}

func (p *Periph) BS12() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS12)}}
}

func (p *Periph) BS13() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS13)}}
}

func (p *Periph) BS14() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS14)}}
}

func (p *Periph) BS15() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BS15)}}
}

func (p *Periph) BR0() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR0)}}
}

func (p *Periph) BR1() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR1)}}
}

func (p *Periph) BR2() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR2)}}
}

func (p *Periph) BR3() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR3)}}
}

func (p *Periph) BR4() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR4)}}
}

func (p *Periph) BR5() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR5)}}
}

func (p *Periph) BR6() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR6)}}
}

func (p *Periph) BR7() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR7)}}
}

func (p *Periph) BR8() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR8)}}
}

func (p *Periph) BR9() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR9)}}
}

func (p *Periph) BR10() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR10)}}
}

func (p *Periph) BR11() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR11)}}
}

func (p *Periph) BR12() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR12)}}
}

func (p *Periph) BR13() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR13)}}
}

func (p *Periph) BR14() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR14)}}
}

func (p *Periph) BR15() RMBSRR {
	return RMBSRR{mmio.UM32{&p.BSRR.U32, uint32(BR15)}}
}

type LCKR uint32

type RLCKR struct{ mmio.U32 }

func (r *RLCKR) LoadBits(mask LCKR) LCKR { return LCKR(r.U32.LoadBits(uint32(mask))) }
func (r *RLCKR) StoreBits(mask, b LCKR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RLCKR) SetBits(mask LCKR)       { r.U32.SetBits(uint32(mask)) }
func (r *RLCKR) ClearBits(mask LCKR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RLCKR) Load() LCKR              { return LCKR(r.U32.Load()) }
func (r *RLCKR) Store(b LCKR)            { r.U32.Store(uint32(b)) }

type RMLCKR struct{ mmio.UM32 }

func (rm RMLCKR) Load() LCKR   { return LCKR(rm.UM32.Load()) }
func (rm RMLCKR) Store(b LCKR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) LCK0() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK0)}}
}

func (p *Periph) LCK1() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK1)}}
}

func (p *Periph) LCK2() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK2)}}
}

func (p *Periph) LCK3() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK3)}}
}

func (p *Periph) LCK4() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK4)}}
}

func (p *Periph) LCK5() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK5)}}
}

func (p *Periph) LCK6() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK6)}}
}

func (p *Periph) LCK7() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK7)}}
}

func (p *Periph) LCK8() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK8)}}
}

func (p *Periph) LCK9() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK9)}}
}

func (p *Periph) LCK10() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK10)}}
}

func (p *Periph) LCK11() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK11)}}
}

func (p *Periph) LCK12() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK12)}}
}

func (p *Periph) LCK13() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK13)}}
}

func (p *Periph) LCK14() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK14)}}
}

func (p *Periph) LCK15() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCK15)}}
}

func (p *Periph) LCKK() RMLCKR {
	return RMLCKR{mmio.UM32{&p.LCKR.U32, uint32(LCKK)}}
}

type AFRL uint32

type RAFRL struct{ mmio.U32 }

func (r *RAFRL) LoadBits(mask AFRL) AFRL { return AFRL(r.U32.LoadBits(uint32(mask))) }
func (r *RAFRL) StoreBits(mask, b AFRL)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAFRL) SetBits(mask AFRL)       { r.U32.SetBits(uint32(mask)) }
func (r *RAFRL) ClearBits(mask AFRL)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAFRL) Load() AFRL              { return AFRL(r.U32.Load()) }
func (r *RAFRL) Store(b AFRL)            { r.U32.Store(uint32(b)) }

type RMAFRL struct{ mmio.UM32 }

func (rm RMAFRL) Load() AFRL   { return AFRL(rm.UM32.Load()) }
func (rm RMAFRL) Store(b AFRL) { rm.UM32.Store(uint32(b)) }

func (p *Periph) AFSEL0() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL0)}}
}

func (p *Periph) AFSEL1() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL1)}}
}

func (p *Periph) AFSEL2() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL2)}}
}

func (p *Periph) AFSEL3() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL3)}}
}

func (p *Periph) AFSEL4() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL4)}}
}

func (p *Periph) AFSEL5() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL5)}}
}

func (p *Periph) AFSEL6() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL6)}}
}

func (p *Periph) AFSEL7() RMAFRL {
	return RMAFRL{mmio.UM32{&p.AFRL.U32, uint32(AFSEL7)}}
}

type AFRH uint32

type RAFRH struct{ mmio.U32 }

func (r *RAFRH) LoadBits(mask AFRH) AFRH { return AFRH(r.U32.LoadBits(uint32(mask))) }
func (r *RAFRH) StoreBits(mask, b AFRH)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAFRH) SetBits(mask AFRH)       { r.U32.SetBits(uint32(mask)) }
func (r *RAFRH) ClearBits(mask AFRH)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAFRH) Load() AFRH              { return AFRH(r.U32.Load()) }
func (r *RAFRH) Store(b AFRH)            { r.U32.Store(uint32(b)) }

type RMAFRH struct{ mmio.UM32 }

func (rm RMAFRH) Load() AFRH   { return AFRH(rm.UM32.Load()) }
func (rm RMAFRH) Store(b AFRH) { rm.UM32.Store(uint32(b)) }

func (p *Periph) AFSEL8() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL8)}}
}

func (p *Periph) AFSEL9() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL9)}}
}

func (p *Periph) AFSEL10() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL10)}}
}

func (p *Periph) AFSEL11() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL11)}}
}

func (p *Periph) AFSEL12() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL12)}}
}

func (p *Periph) AFSEL13() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL13)}}
}

func (p *Periph) AFSEL14() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL14)}}
}

func (p *Periph) AFSEL15() RMAFRH {
	return RMAFRH{mmio.UM32{&p.AFRH.U32, uint32(AFSEL15)}}
}
