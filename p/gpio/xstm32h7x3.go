// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32h7x3

package gpio

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MODER   mmio.R32[MODER]
	OTYPER  mmio.R32[OTYPER]
	OSPEEDR mmio.R32[OSPEEDR]
	PUPDR   mmio.R32[PUPDR]
	IDR     mmio.R32[IDR]
	ODR     mmio.R32[ODR]
	BSRR    mmio.R32[BSRR]
	LCKR    mmio.R32[LCKR]
	AFRL    mmio.R32[AFRL]
	AFRH    mmio.R32[AFRH]
}

func GPIOA() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOA_BASE))) }
func GPIOB() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOB_BASE))) }
func GPIOC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOC_BASE))) }
func GPIOD() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOD_BASE))) }
func GPIOE() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOE_BASE))) }
func GPIOF() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOF_BASE))) }
func GPIOG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOG_BASE))) }
func GPIOH() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOH_BASE))) }
func GPIOI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOI_BASE))) }
func GPIOJ() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOJ_BASE))) }
func GPIOK() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.GPIOK_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.AHB4
}

type MODER uint32

func MODE0_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE0} }
func MODE1_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE1} }
func MODE2_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE2} }
func MODE3_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE3} }
func MODE4_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE4} }
func MODE5_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE5} }
func MODE6_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE6} }
func MODE7_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE7} }
func MODE8_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE8} }
func MODE9_(p *Periph) mmio.RM32[MODER]  { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE9} }
func MODE10_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE10} }
func MODE11_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE11} }
func MODE12_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE12} }
func MODE13_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE13} }
func MODE14_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE14} }
func MODE15_(p *Periph) mmio.RM32[MODER] { return mmio.RM32[MODER]{R: &p.MODER, Mask: MODE15} }

type OTYPER uint32

func OT0_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT0} }
func OT1_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT1} }
func OT2_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT2} }
func OT3_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT3} }
func OT4_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT4} }
func OT5_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT5} }
func OT6_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT6} }
func OT7_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT7} }
func OT8_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT8} }
func OT9_(p *Periph) mmio.RM32[OTYPER]  { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT9} }
func OT10_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT10} }
func OT11_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT11} }
func OT12_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT12} }
func OT13_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT13} }
func OT14_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT14} }
func OT15_(p *Periph) mmio.RM32[OTYPER] { return mmio.RM32[OTYPER]{R: &p.OTYPER, Mask: OT15} }

type OSPEEDR uint32

func OSPEED0_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED0} }
func OSPEED1_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED1} }
func OSPEED2_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED2} }
func OSPEED3_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED3} }
func OSPEED4_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED4} }
func OSPEED5_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED5} }
func OSPEED6_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED6} }
func OSPEED7_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED7} }
func OSPEED8_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED8} }
func OSPEED9_(p *Periph) mmio.RM32[OSPEEDR] { return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED9} }
func OSPEED10_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED10}
}
func OSPEED11_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED11}
}
func OSPEED12_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED12}
}
func OSPEED13_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED13}
}
func OSPEED14_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED14}
}
func OSPEED15_(p *Periph) mmio.RM32[OSPEEDR] {
	return mmio.RM32[OSPEEDR]{R: &p.OSPEEDR, Mask: OSPEED15}
}

type PUPDR uint32

func PUPD0_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD0} }
func PUPD1_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD1} }
func PUPD2_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD2} }
func PUPD3_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD3} }
func PUPD4_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD4} }
func PUPD5_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD5} }
func PUPD6_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD6} }
func PUPD7_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD7} }
func PUPD8_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD8} }
func PUPD9_(p *Periph) mmio.RM32[PUPDR]  { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD9} }
func PUPD10_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD10} }
func PUPD11_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD11} }
func PUPD12_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD12} }
func PUPD13_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD13} }
func PUPD14_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD14} }
func PUPD15_(p *Periph) mmio.RM32[PUPDR] { return mmio.RM32[PUPDR]{R: &p.PUPDR, Mask: PUPD15} }

type IDR uint32

func ID0_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID0} }
func ID1_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID1} }
func ID2_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID2} }
func ID3_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID3} }
func ID4_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID4} }
func ID5_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID5} }
func ID6_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID6} }
func ID7_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID7} }
func ID8_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID8} }
func ID9_(p *Periph) mmio.RM32[IDR]  { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID9} }
func ID10_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID10} }
func ID11_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID11} }
func ID12_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID12} }
func ID13_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID13} }
func ID14_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID14} }
func ID15_(p *Periph) mmio.RM32[IDR] { return mmio.RM32[IDR]{R: &p.IDR, Mask: ID15} }

type ODR uint32

func OD0_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD0} }
func OD1_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD1} }
func OD2_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD2} }
func OD3_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD3} }
func OD4_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD4} }
func OD5_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD5} }
func OD6_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD6} }
func OD7_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD7} }
func OD8_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD8} }
func OD9_(p *Periph) mmio.RM32[ODR]  { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD9} }
func OD10_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD10} }
func OD11_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD11} }
func OD12_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD12} }
func OD13_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD13} }
func OD14_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD14} }
func OD15_(p *Periph) mmio.RM32[ODR] { return mmio.RM32[ODR]{R: &p.ODR, Mask: OD15} }

type BSRR uint32

func BS0_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS0} }
func BS1_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS1} }
func BS2_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS2} }
func BS3_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS3} }
func BS4_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS4} }
func BS5_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS5} }
func BS6_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS6} }
func BS7_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS7} }
func BS8_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS8} }
func BS9_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS9} }
func BS10_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS10} }
func BS11_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS11} }
func BS12_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS12} }
func BS13_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS13} }
func BS14_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS14} }
func BS15_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BS15} }
func BR0_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR0} }
func BR1_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR1} }
func BR2_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR2} }
func BR3_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR3} }
func BR4_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR4} }
func BR5_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR5} }
func BR6_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR6} }
func BR7_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR7} }
func BR8_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR8} }
func BR9_(p *Periph) mmio.RM32[BSRR]  { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR9} }
func BR10_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR10} }
func BR11_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR11} }
func BR12_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR12} }
func BR13_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR13} }
func BR14_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR14} }
func BR15_(p *Periph) mmio.RM32[BSRR] { return mmio.RM32[BSRR]{R: &p.BSRR, Mask: BR15} }

type LCKR uint32

func LCK0_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK0} }
func LCK1_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK1} }
func LCK2_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK2} }
func LCK3_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK3} }
func LCK4_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK4} }
func LCK5_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK5} }
func LCK6_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK6} }
func LCK7_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK7} }
func LCK8_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK8} }
func LCK9_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK9} }
func LCK10_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK10} }
func LCK11_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK11} }
func LCK12_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK12} }
func LCK13_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK13} }
func LCK14_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK14} }
func LCK15_(p *Periph) mmio.RM32[LCKR] { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCK15} }
func LCKK_(p *Periph) mmio.RM32[LCKR]  { return mmio.RM32[LCKR]{R: &p.LCKR, Mask: LCKK} }

type AFRL uint32

func AFSEL0_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL0} }
func AFSEL1_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL1} }
func AFSEL2_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL2} }
func AFSEL3_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL3} }
func AFSEL4_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL4} }
func AFSEL5_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL5} }
func AFSEL6_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL6} }
func AFSEL7_(p *Periph) mmio.RM32[AFRL] { return mmio.RM32[AFRL]{R: &p.AFRL, Mask: AFSEL7} }

type AFRH uint32

func AFSEL8_(p *Periph) mmio.RM32[AFRH]  { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL8} }
func AFSEL9_(p *Periph) mmio.RM32[AFRH]  { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL9} }
func AFSEL10_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL10} }
func AFSEL11_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL11} }
func AFSEL12_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL12} }
func AFSEL13_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL13} }
func AFSEL14_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL14} }
func AFSEL15_(p *Periph) mmio.RM32[AFRH] { return mmio.RM32[AFRH]{R: &p.AFRH, Mask: AFSEL15} }
