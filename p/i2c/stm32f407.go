// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32f407

// Package i2c provides access to the registers of the I2C peripheral.
//
// Instances:
//
//	I2C1  I2C1_BASE  APB1  I2C1_EV,I2C1_ER  Inter-integrated circuit
//	I2C2  I2C2_BASE  APB1  I2C2_EV,I2C2_ER  Inter-integrated circuit
//	I2C3  I2C3_BASE  APB1  I2C3_EV,I2C3_ER  Inter-integrated circuit
//
// Registers:
//
//	0x000 32  CR1    Control register 1
//	0x004 32  CR2    Control register 2
//	0x008 32  OAR1   Own address register 1
//	0x00C 32  OAR2   Own address register 2
//	0x010 32  DR     Data register
//	0x014 32  SR1    Status register 1
//	0x018 32  SR2    Status register 2
//	0x01C 32  CCR    Clock control register
//	0x020 32  TRISE  TRISE register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/bus
//	github.com/embeddedgo/stm32/p/mmap
package i2c

const (
	PE        CR1 = 0x01 << 0  //+ Peripheral enable
	SMBUS     CR1 = 0x01 << 1  //+ SMBus mode
	SMBTYPE   CR1 = 0x01 << 3  //+ SMBus type
	ENARP     CR1 = 0x01 << 4  //+ ARP enable
	ENPEC     CR1 = 0x01 << 5  //+ PEC enable
	ENGC      CR1 = 0x01 << 6  //+ General call enable
	NOSTRETCH CR1 = 0x01 << 7  //+ Clock stretching disable (Slave mode)
	START     CR1 = 0x01 << 8  //+ Start generation
	STOP      CR1 = 0x01 << 9  //+ Stop generation
	ACK       CR1 = 0x01 << 10 //+ Acknowledge enable
	POS       CR1 = 0x01 << 11 //+ Acknowledge/PEC Position (for data reception)
	PEC       CR1 = 0x01 << 12 //+ Packet error checking
	ALERT     CR1 = 0x01 << 13 //+ SMBus alert
	SWRST     CR1 = 0x01 << 15 //+ Software reset
)

const (
	PEn        = 0
	SMBUSn     = 1
	SMBTYPEn   = 3
	ENARPn     = 4
	ENPECn     = 5
	ENGCn      = 6
	NOSTRETCHn = 7
	STARTn     = 8
	STOPn      = 9
	ACKn       = 10
	POSn       = 11
	PECn       = 12
	ALERTn     = 13
	SWRSTn     = 15
)

const (
	FREQ    CR2 = 0x3F << 0  //+ Peripheral clock frequency
	ITERREN CR2 = 0x01 << 8  //+ Error interrupt enable
	ITEVTEN CR2 = 0x01 << 9  //+ Event interrupt enable
	ITBUFEN CR2 = 0x01 << 10 //+ Buffer interrupt enable
	DMAEN   CR2 = 0x01 << 11 //+ DMA requests enable
	LAST    CR2 = 0x01 << 12 //+ DMA last transfer
)

const (
	FREQn    = 0
	ITERRENn = 8
	ITEVTENn = 9
	ITBUFENn = 10
	DMAENn   = 11
	LASTn    = 12
)

const (
	ADD0    OAR1 = 0x01 << 0  //+ Interface address
	ADD7    OAR1 = 0x7F << 1  //+ Interface address
	ADD10   OAR1 = 0x03 << 8  //+ Interface address
	ADDMODE OAR1 = 0x01 << 15 //+ Addressing mode (slave mode)
)

const (
	ADD0n    = 0
	ADD7n    = 1
	ADD10n   = 8
	ADDMODEn = 15
)

const (
	ENDUAL OAR2 = 0x01 << 0 //+ Dual addressing mode enable
	ADD2   OAR2 = 0x7F << 1 //+ Interface address
)

const (
	ENDUALn = 0
	ADD2n   = 1
)

const (
	DR DR = 0xFF << 0 //+ 8-bit data register
)

const (
	DRn = 0
)

const (
	SB       SR1 = 0x01 << 0  //+ Start bit (Master mode)
	ADDR     SR1 = 0x01 << 1  //+ Address sent (master mode)/matched (slave mode)
	BTF      SR1 = 0x01 << 2  //+ Byte transfer finished
	ADD10    SR1 = 0x01 << 3  //+ 10-bit header sent (Master mode)
	STOPF    SR1 = 0x01 << 4  //+ Stop detection (slave mode)
	RxNE     SR1 = 0x01 << 6  //+ Data register not empty (receivers)
	TxE      SR1 = 0x01 << 7  //+ Data register empty (transmitters)
	BERR     SR1 = 0x01 << 8  //+ Bus error
	ARLO     SR1 = 0x01 << 9  //+ Arbitration lost (master mode)
	AF       SR1 = 0x01 << 10 //+ Acknowledge failure
	OVR      SR1 = 0x01 << 11 //+ Overrun/Underrun
	PECERR   SR1 = 0x01 << 12 //+ PEC Error in reception
	TIMEOUT  SR1 = 0x01 << 14 //+ Timeout or Tlow error
	SMBALERT SR1 = 0x01 << 15 //+ SMBus alert
)

const (
	SBn       = 0
	ADDRn     = 1
	BTFn      = 2
	ADD10n    = 3
	STOPFn    = 4
	RxNEn     = 6
	TxEn      = 7
	BERRn     = 8
	ARLOn     = 9
	AFn       = 10
	OVRn      = 11
	PECERRn   = 12
	TIMEOUTn  = 14
	SMBALERTn = 15
)

const (
	MSL        SR2 = 0x01 << 0 //+ Master/slave
	BUSY       SR2 = 0x01 << 1 //+ Bus busy
	TRA        SR2 = 0x01 << 2 //+ Transmitter/receiver
	GENCALL    SR2 = 0x01 << 4 //+ General call address (Slave mode)
	SMBDEFAULT SR2 = 0x01 << 5 //+ SMBus device default address (Slave mode)
	SMBHOST    SR2 = 0x01 << 6 //+ SMBus host header (Slave mode)
	DUALF      SR2 = 0x01 << 7 //+ Dual flag (Slave mode)
	PEC        SR2 = 0xFF << 8 //+ acket error checking register
)

const (
	MSLn        = 0
	BUSYn       = 1
	TRAn        = 2
	GENCALLn    = 4
	SMBDEFAULTn = 5
	SMBHOSTn    = 6
	DUALFn      = 7
	PECn        = 8
)

const (
	CCR  CCR = 0xFFF << 0 //+ Clock control register in Fast/Standard mode (Master mode)
	DUTY CCR = 0x01 << 14 //+ Fast mode duty cycle
	F_S  CCR = 0x01 << 15 //+ I2C master mode selection
)

const (
	CCRn  = 0
	DUTYn = 14
	F_Sn  = 15
)

const (
	TRISE TRISE = 0x3F << 0 //+ Maximum rise time in Fast/Standard mode (Master mode)
)

const (
	TRISEn = 0
)
