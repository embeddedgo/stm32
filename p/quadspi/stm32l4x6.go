// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32l4x6

// Package quadspi provides access to the registers of the QUADSPI peripheral.
//
// Instances:
//
//	QUADSPI  QUADSPI_BASE  -  QUADSPI  QuadSPI interface
//
// Registers:
//
//	0x000 32  CR     control register
//	0x004 32  DCR    device configuration register
//	0x008 32  SR     status register
//	0x00C 32  FCR    flag clear register
//	0x010 32  DLR    data length register
//	0x014 32  CCR    communication configuration register
//	0x018 32  AR     address register
//	0x01C 32  ABR    ABR
//	0x020 32  DR     data register
//	0x024 32  PSMKR  polling status mask register
//	0x028 32  PSMAR  polling status match register
//	0x02C 32  PIR    polling interval register
//	0x030 32  LPTR   low-power timeout register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package quadspi

const (
	EN        CR = 0x01 << 0  //+ Enable
	ABORT     CR = 0x01 << 1  //+ Abort request
	DMAEN     CR = 0x01 << 2  //+ DMA enable
	TCEN      CR = 0x01 << 3  //+ Timeout counter enable
	SSHIFT    CR = 0x01 << 4  //+ Sample shift
	DFM       CR = 0x01 << 6  //+ Dual-flash mode
	FSEL      CR = 0x01 << 7  //+ FLASH memory selection
	FTHRES    CR = 0x1F << 8  //+ IFO threshold level
	TEIE      CR = 0x01 << 16 //+ Transfer error interrupt enable
	TCIE      CR = 0x01 << 17 //+ Transfer complete interrupt enable
	FTIE      CR = 0x01 << 18 //+ FIFO threshold interrupt enable
	SMIE      CR = 0x01 << 19 //+ Status match interrupt enable
	TOIE      CR = 0x01 << 20 //+ TimeOut interrupt enable
	APMS      CR = 0x01 << 22 //+ Automatic poll mode stop
	PMM       CR = 0x01 << 23 //+ Polling match mode
	PRESCALER CR = 0xFF << 24 //+ Clock prescaler
)

const (
	ENn        = 0
	ABORTn     = 1
	DMAENn     = 2
	TCENn      = 3
	SSHIFTn    = 4
	DFMn       = 6
	FSELn      = 7
	FTHRESn    = 8
	TEIEn      = 16
	TCIEn      = 17
	FTIEn      = 18
	SMIEn      = 19
	TOIEn      = 20
	APMSn      = 22
	PMMn       = 23
	PRESCALERn = 24
)

const (
	CKMODE DCR = 0x01 << 0  //+ Mode 0 / mode 3
	CSHT   DCR = 0x07 << 8  //+ Chip select high time
	FSIZE  DCR = 0x1F << 16 //+ FLASH memory size
)

const (
	CKMODEn = 0
	CSHTn   = 8
	FSIZEn  = 16
)

const (
	TEF    SR = 0x01 << 0 //+ Transfer error flag
	TCF    SR = 0x01 << 1 //+ Transfer complete flag
	FTF    SR = 0x01 << 2 //+ FIFO threshold flag
	SMF    SR = 0x01 << 3 //+ Status match flag
	TOF    SR = 0x01 << 4 //+ Timeout flag
	BUSY   SR = 0x01 << 5 //+ Busy
	FLEVEL SR = 0x7F << 8 //+ FIFO level
)

const (
	TEFn    = 0
	TCFn    = 1
	FTFn    = 2
	SMFn    = 3
	TOFn    = 4
	BUSYn   = 5
	FLEVELn = 8
)

const (
	CTEF FCR = 0x01 << 0 //+ Clear transfer error flag
	CTCF FCR = 0x01 << 1 //+ Clear transfer complete flag
	CSMF FCR = 0x01 << 3 //+ Clear status match flag
	CTOF FCR = 0x01 << 4 //+ Clear timeout flag
)

const (
	CTEFn = 0
	CTCFn = 1
	CSMFn = 3
	CTOFn = 4
)

const (
	DL DLR = 0xFFFFFFFF << 0 //+ Data length
)

const (
	DLn = 0
)

const (
	INSTRUCTION CCR = 0xFF << 0  //+ Instruction
	IMODE       CCR = 0x03 << 8  //+ Instruction mode
	ADMODE      CCR = 0x03 << 10 //+ Address mode
	ADSIZE      CCR = 0x03 << 12 //+ Address size
	ABMODE      CCR = 0x03 << 14 //+ Alternate bytes mode
	ABSIZE      CCR = 0x03 << 16 //+ Alternate bytes size
	DCYC        CCR = 0x1F << 18 //+ Number of dummy cycles
	DMODE       CCR = 0x03 << 24 //+ Data mode
	FMODE       CCR = 0x03 << 26 //+ Functional mode
	SIOO        CCR = 0x01 << 28 //+ Send instruction only once mode
	DHHC        CCR = 0x01 << 30 //+ DDR hold half cycle
	DDRM        CCR = 0x01 << 31 //+ Double data rate mode
)

const (
	INSTRUCTIONn = 0
	IMODEn       = 8
	ADMODEn      = 10
	ADSIZEn      = 12
	ABMODEn      = 14
	ABSIZEn      = 16
	DCYCn        = 18
	DMODEn       = 24
	FMODEn       = 26
	SIOOn        = 28
	DHHCn        = 30
	DDRMn        = 31
)

const (
	ADDRESS AR = 0xFFFFFFFF << 0 //+ Address
)

const (
	ADDRESSn = 0
)

const (
	ALTERNATE ABR = 0xFFFFFFFF << 0 //+ ALTERNATE
)

const (
	ALTERNATEn = 0
)

const (
	DATA DR = 0xFFFFFFFF << 0 //+ Data
)

const (
	DATAn = 0
)

const (
	MASK PSMKR = 0xFFFFFFFF << 0 //+ Status mask
)

const (
	MASKn = 0
)

const (
	MATCH PSMAR = 0xFFFFFFFF << 0 //+ Status match
)

const (
	MATCHn = 0
)

const (
	INTERVAL PIR = 0xFFFF << 0 //+ Polling interval
)

const (
	INTERVALn = 0
)

const (
	TIMEOUT LPTR = 0xFFFF << 0 //+ Timeout period
)

const (
	TIMEOUTn = 0
)
