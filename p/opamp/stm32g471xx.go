// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32g471xx

// Package opamp provides access to the registers of the OPAMP peripheral.
//
// Instances:
//
//	OPAMP  OPAMP_BASE  -  -  Operational amplifiers
//
// Registers:
//
//	0x000 32  OPAMP1_CSR   OPAMP1 control/status register
//	0x004 32  OPAMP2_CSR   OPAMP2 control/status register
//	0x008 32  OPAMP3_CSR   OPAMP3 control/status register
//	0x018 32  OPAMP1_TCMR  OPAMP1 control/status register
//	0x01C 32  OPAMP2_TCMR  OPAMP2 control/status register
//	0x020 32  OPAMP3_TCMR  OPAMP3 control/status register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package opamp

const (
	OPAEN       OPAMP1_CSR = 0x01 << 0  //+ Operational amplifier Enable
	FORCE_VP    OPAMP1_CSR = 0x01 << 1  //+ FORCE_VP
	VP_SEL      OPAMP1_CSR = 0x03 << 2  //+ VP_SEL
	USERTRIM    OPAMP1_CSR = 0x01 << 4  //+ USERTRIM
	VM_SEL      OPAMP1_CSR = 0x03 << 5  //+ VM_SEL
	OPAHSM      OPAMP1_CSR = 0x01 << 7  //+ OPAHSM
	OPAINTOEN   OPAMP1_CSR = 0x01 << 8  //+ OPAINTOEN
	CALON       OPAMP1_CSR = 0x01 << 11 //+ CALON
	CALSEL      OPAMP1_CSR = 0x03 << 12 //+ CALSEL
	PGA_GAIN    OPAMP1_CSR = 0x1F << 14 //+ PGA_GAIN
	TRIMOFFSETP OPAMP1_CSR = 0x1F << 19 //+ TRIMOFFSETP
	TRIMOFFSETN OPAMP1_CSR = 0x1F << 24 //+ TRIMOFFSETN
	CALOUT      OPAMP1_CSR = 0x01 << 30 //+ CALOUT
	LOCK        OPAMP1_CSR = 0x01 << 31 //+ LOCK
)

const (
	OPAENn       = 0
	FORCE_VPn    = 1
	VP_SELn      = 2
	USERTRIMn    = 4
	VM_SELn      = 5
	OPAHSMn      = 7
	OPAINTOENn   = 8
	CALONn       = 11
	CALSELn      = 12
	PGA_GAINn    = 14
	TRIMOFFSETPn = 19
	TRIMOFFSETNn = 24
	CALOUTn      = 30
	LOCKn        = 31
)

const (
	OPAEN       OPAMP2_CSR = 0x01 << 0  //+ Operational amplifier Enable
	FORCE_VP    OPAMP2_CSR = 0x01 << 1  //+ FORCE_VP
	VP_SEL      OPAMP2_CSR = 0x03 << 2  //+ VP_SEL
	USERTRIM    OPAMP2_CSR = 0x01 << 4  //+ USERTRIM
	VM_SEL      OPAMP2_CSR = 0x03 << 5  //+ VM_SEL
	OPAHSM      OPAMP2_CSR = 0x01 << 7  //+ OPAHSM
	OPAINTOEN   OPAMP2_CSR = 0x01 << 8  //+ OPAINTOEN
	CALON       OPAMP2_CSR = 0x01 << 11 //+ CALON
	CALSEL      OPAMP2_CSR = 0x03 << 12 //+ CALSEL
	PGA_GAIN    OPAMP2_CSR = 0x1F << 14 //+ PGA_GAIN
	TRIMOFFSETP OPAMP2_CSR = 0x1F << 19 //+ TRIMOFFSETP
	TRIMOFFSETN OPAMP2_CSR = 0x1F << 24 //+ TRIMOFFSETN
	CALOUT      OPAMP2_CSR = 0x01 << 30 //+ CALOUT
	LOCK        OPAMP2_CSR = 0x01 << 31 //+ LOCK
)

const (
	OPAENn       = 0
	FORCE_VPn    = 1
	VP_SELn      = 2
	USERTRIMn    = 4
	VM_SELn      = 5
	OPAHSMn      = 7
	OPAINTOENn   = 8
	CALONn       = 11
	CALSELn      = 12
	PGA_GAINn    = 14
	TRIMOFFSETPn = 19
	TRIMOFFSETNn = 24
	CALOUTn      = 30
	LOCKn        = 31
)

const (
	OPAEN       OPAMP3_CSR = 0x01 << 0  //+ Operational amplifier Enable
	FORCE_VP    OPAMP3_CSR = 0x01 << 1  //+ FORCE_VP
	VP_SEL      OPAMP3_CSR = 0x03 << 2  //+ VP_SEL
	USERTRIM    OPAMP3_CSR = 0x01 << 4  //+ USERTRIM
	VM_SEL      OPAMP3_CSR = 0x03 << 5  //+ VM_SEL
	OPAHSM      OPAMP3_CSR = 0x01 << 7  //+ OPAHSM
	OPAINTOEN   OPAMP3_CSR = 0x01 << 8  //+ OPAINTOEN
	CALON       OPAMP3_CSR = 0x01 << 11 //+ CALON
	CALSEL      OPAMP3_CSR = 0x03 << 12 //+ CALSEL
	PGA_GAIN    OPAMP3_CSR = 0x1F << 14 //+ PGA_GAIN
	TRIMOFFSETP OPAMP3_CSR = 0x1F << 19 //+ TRIMOFFSETP
	TRIMOFFSETN OPAMP3_CSR = 0x1F << 24 //+ TRIMOFFSETN
	CALOUT      OPAMP3_CSR = 0x01 << 30 //+ CALOUT
	LOCK        OPAMP3_CSR = 0x01 << 31 //+ LOCK
)

const (
	OPAENn       = 0
	FORCE_VPn    = 1
	VP_SELn      = 2
	USERTRIMn    = 4
	VM_SELn      = 5
	OPAHSMn      = 7
	OPAINTOENn   = 8
	CALONn       = 11
	CALSELn      = 12
	PGA_GAINn    = 14
	TRIMOFFSETPn = 19
	TRIMOFFSETNn = 24
	CALOUTn      = 30
	LOCKn        = 31
)

const (
	VMS_SEL  OPAMP1_TCMR = 0x01 << 0  //+ VMS_SEL
	VPS_SEL  OPAMP1_TCMR = 0x03 << 1  //+ VPS_SEL
	T1CM_EN  OPAMP1_TCMR = 0x01 << 3  //+ T1CM_EN
	T8CM_EN  OPAMP1_TCMR = 0x01 << 4  //+ T8CM_EN
	T20CM_EN OPAMP1_TCMR = 0x01 << 5  //+ T20CM_EN
	LOCK     OPAMP1_TCMR = 0x01 << 31 //+ LOCK
)

const (
	VMS_SELn  = 0
	VPS_SELn  = 1
	T1CM_ENn  = 3
	T8CM_ENn  = 4
	T20CM_ENn = 5
	LOCKn     = 31
)

const (
	VMS_SEL  OPAMP2_TCMR = 0x01 << 0  //+ VMS_SEL
	VPS_SEL  OPAMP2_TCMR = 0x03 << 1  //+ VPS_SEL
	T1CM_EN  OPAMP2_TCMR = 0x01 << 3  //+ T1CM_EN
	T8CM_EN  OPAMP2_TCMR = 0x01 << 4  //+ T8CM_EN
	T20CM_EN OPAMP2_TCMR = 0x01 << 5  //+ T20CM_EN
	LOCK     OPAMP2_TCMR = 0x01 << 31 //+ LOCK
)

const (
	VMS_SELn  = 0
	VPS_SELn  = 1
	T1CM_ENn  = 3
	T8CM_ENn  = 4
	T20CM_ENn = 5
	LOCKn     = 31
)

const (
	VMS_SEL  OPAMP3_TCMR = 0x01 << 0  //+ VMS_SEL
	VPS_SEL  OPAMP3_TCMR = 0x03 << 1  //+ VPS_SEL
	T1CM_EN  OPAMP3_TCMR = 0x01 << 3  //+ T1CM_EN
	T8CM_EN  OPAMP3_TCMR = 0x01 << 4  //+ T8CM_EN
	T20CM_EN OPAMP3_TCMR = 0x01 << 5  //+ T20CM_EN
	LOCK     OPAMP3_TCMR = 0x01 << 31 //+ LOCK
)

const (
	VMS_SELn  = 0
	VPS_SELn  = 1
	T1CM_ENn  = 3
	T8CM_ENn  = 4
	T20CM_ENn = 5
	LOCKn     = 31
)
