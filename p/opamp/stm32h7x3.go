// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32h7x3

// Package opamp provides access to the registers of the OPAMP peripheral.
//
// Instances:
//
//	OPAMP  OPAMP_BASE  APB1  -  Operational amplifiers
//
// Registers:
//
//	0x000 32  OPAMP1_CSR    OPAMP1 control/status register
//	0x004 32  OPAMP1_OTR    OPAMP1 offset trimming register in normal mode
//	0x008 32  OPAMP1_HSOTR  OPAMP1 offset trimming register in low-power mode
//	0x010 32  OPAMP2_CSR    OPAMP2 control/status register
//	0x014 32  OPAMP2_OTR    OPAMP2 offset trimming register in normal mode
//	0x018 32  OPAMP2_HSOTR  OPAMP2 offset trimming register in low-power mode
//
// Import:
//
//	github.com/embeddedgo/stm32/p/bus
//	github.com/embeddedgo/stm32/p/mmap
package opamp

const (
	OPAEN    OPAMP1_CSR = 0x01 << 0  //+ Operational amplifier Enable
	FORCE_VP OPAMP1_CSR = 0x01 << 1  //+ Force internal reference on VP (reserved for test
	VP_SEL   OPAMP1_CSR = 0x03 << 2  //+ Operational amplifier PGA mode
	VM_SEL   OPAMP1_CSR = 0x03 << 5  //+ Inverting input selection
	OPAHSM   OPAMP1_CSR = 0x01 << 8  //+ Operational amplifier high-speed mode
	CALON    OPAMP1_CSR = 0x01 << 11 //+ Calibration mode enabled
	CALSEL   OPAMP1_CSR = 0x03 << 12 //+ Calibration selection
	PGA_GAIN OPAMP1_CSR = 0x0F << 14 //+ allows to switch from AOP offset trimmed values to AOP offset
	USERTRIM OPAMP1_CSR = 0x01 << 18 //+ User trimming enable
	TSTREF   OPAMP1_CSR = 0x01 << 29 //+ OPAMP calibration reference voltage output control (reserved for test)
	CALOUT   OPAMP1_CSR = 0x01 << 30 //+ Operational amplifier calibration output
)

const (
	OPAENn    = 0
	FORCE_VPn = 1
	VP_SELn   = 2
	VM_SELn   = 5
	OPAHSMn   = 8
	CALONn    = 11
	CALSELn   = 12
	PGA_GAINn = 14
	USERTRIMn = 18
	TSTREFn   = 29
	CALOUTn   = 30
)

const (
	TRIMOFFSETN OPAMP1_OTR = 0x1F << 0 //+ Trim for NMOS differential pairs
	TRIMOFFSETP OPAMP1_OTR = 0x1F << 8 //+ Trim for PMOS differential pairs
)

const (
	TRIMOFFSETNn = 0
	TRIMOFFSETPn = 8
)

const (
	TRIMLPOFFSETN OPAMP1_HSOTR = 0x1F << 0 //+ Trim for NMOS differential pairs
	TRIMLPOFFSETP OPAMP1_HSOTR = 0x1F << 8 //+ Trim for PMOS differential pairs
)

const (
	TRIMLPOFFSETNn = 0
	TRIMLPOFFSETPn = 8
)

const (
	OPAEN    OPAMP2_CSR = 0x01 << 0  //+ Operational amplifier Enable
	FORCE_VP OPAMP2_CSR = 0x01 << 1  //+ Force internal reference on VP (reserved for test)
	VM_SEL   OPAMP2_CSR = 0x03 << 5  //+ Inverting input selection
	OPAHSM   OPAMP2_CSR = 0x01 << 8  //+ Operational amplifier high-speed mode
	CALON    OPAMP2_CSR = 0x01 << 11 //+ Calibration mode enabled
	CALSEL   OPAMP2_CSR = 0x03 << 12 //+ Calibration selection
	PGA_GAIN OPAMP2_CSR = 0x0F << 14 //+ Operational amplifier Programmable amplifier gain value
	USERTRIM OPAMP2_CSR = 0x01 << 18 //+ User trimming enable
	TSTREF   OPAMP2_CSR = 0x01 << 29 //+ OPAMP calibration reference voltage output control (reserved for test)
	CALOUT   OPAMP2_CSR = 0x01 << 30 //+ Operational amplifier calibration output
)

const (
	OPAENn    = 0
	FORCE_VPn = 1
	VM_SELn   = 5
	OPAHSMn   = 8
	CALONn    = 11
	CALSELn   = 12
	PGA_GAINn = 14
	USERTRIMn = 18
	TSTREFn   = 29
	CALOUTn   = 30
)

const (
	TRIMOFFSETN OPAMP2_OTR = 0x1F << 0 //+ Trim for NMOS differential pairs
	TRIMOFFSETP OPAMP2_OTR = 0x1F << 8 //+ Trim for PMOS differential pairs
)

const (
	TRIMOFFSETNn = 0
	TRIMOFFSETPn = 8
)

const (
	TRIMLPOFFSETN OPAMP2_HSOTR = 0x1F << 0 //+ Trim for NMOS differential pairs
	TRIMLPOFFSETP OPAMP2_HSOTR = 0x1F << 8 //+ Trim for PMOS differential pairs
)

const (
	TRIMLPOFFSETNn = 0
	TRIMLPOFFSETPn = 8
)
