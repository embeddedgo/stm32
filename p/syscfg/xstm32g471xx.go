// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32g471xx

package syscfg

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MEMRMP RMEMRMP
	CFGR1  RCFGR1
	EXTICR [4]REXTICR
	SCSR   RSCSR
	CFGR2  RCFGR2
	SWPR   RSWPR
	SKR    RSKR
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB2
}

func SYSCFG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SYSCFG_BASE))) }

type MEMRMP uint32

type RMEMRMP struct{ mmio.U32 }

func (r *RMEMRMP) LoadBits(mask MEMRMP) MEMRMP { return MEMRMP(r.U32.LoadBits(uint32(mask))) }
func (r *RMEMRMP) StoreBits(mask, b MEMRMP)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMEMRMP) SetBits(mask MEMRMP)         { r.U32.SetBits(uint32(mask)) }
func (r *RMEMRMP) ClearBits(mask MEMRMP)       { r.U32.ClearBits(uint32(mask)) }
func (r *RMEMRMP) Load() MEMRMP                { return MEMRMP(r.U32.Load()) }
func (r *RMEMRMP) Store(b MEMRMP)              { r.U32.Store(uint32(b)) }

type RMMEMRMP struct{ mmio.UM32 }

func (rm RMMEMRMP) Load() MEMRMP   { return MEMRMP(rm.UM32.Load()) }
func (rm RMMEMRMP) Store(b MEMRMP) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MEM_MODE() RMMEMRMP {
	return RMMEMRMP{mmio.UM32{&p.MEMRMP.U32, uint32(MEM_MODE)}}
}

func (p *Periph) FB_mode() RMMEMRMP {
	return RMMEMRMP{mmio.UM32{&p.MEMRMP.U32, uint32(FB_mode)}}
}

type CFGR1 uint32

type RCFGR1 struct{ mmio.U32 }

func (r *RCFGR1) LoadBits(mask CFGR1) CFGR1 { return CFGR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCFGR1) StoreBits(mask, b CFGR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR1) SetBits(mask CFGR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR1) ClearBits(mask CFGR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR1) Load() CFGR1               { return CFGR1(r.U32.Load()) }
func (r *RCFGR1) Store(b CFGR1)             { r.U32.Store(uint32(b)) }

type RMCFGR1 struct{ mmio.UM32 }

func (rm RMCFGR1) Load() CFGR1   { return CFGR1(rm.UM32.Load()) }
func (rm RMCFGR1) Store(b CFGR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) BOOSTEN() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(BOOSTEN)}}
}

func (p *Periph) ANASWVDD() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(ANASWVDD)}}
}

func (p *Periph) I2C_PB6_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB6_FMP)}}
}

func (p *Periph) I2C_PB7_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB7_FMP)}}
}

func (p *Periph) I2C_PB8_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB8_FMP)}}
}

func (p *Periph) I2C_PB9_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB9_FMP)}}
}

func (p *Periph) I2C1_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C1_FMP)}}
}

func (p *Periph) I2C2_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C2_FMP)}}
}

func (p *Periph) I2C3_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C3_FMP)}}
}

func (p *Periph) I2C4_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C4_FMP)}}
}

func (p *Periph) FPU_IE() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(FPU_IE)}}
}

type EXTICR uint32

type REXTICR struct{ mmio.U32 }

func (r *REXTICR) LoadBits(mask EXTICR) EXTICR { return EXTICR(r.U32.LoadBits(uint32(mask))) }
func (r *REXTICR) StoreBits(mask, b EXTICR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REXTICR) SetBits(mask EXTICR)         { r.U32.SetBits(uint32(mask)) }
func (r *REXTICR) ClearBits(mask EXTICR)       { r.U32.ClearBits(uint32(mask)) }
func (r *REXTICR) Load() EXTICR                { return EXTICR(r.U32.Load()) }
func (r *REXTICR) Store(b EXTICR)              { r.U32.Store(uint32(b)) }

type RMEXTICR struct{ mmio.UM32 }

func (rm RMEXTICR) Load() EXTICR   { return EXTICR(rm.UM32.Load()) }
func (rm RMEXTICR) Store(b EXTICR) { rm.UM32.Store(uint32(b)) }

type SCSR uint32

type RSCSR struct{ mmio.U32 }

func (r *RSCSR) LoadBits(mask SCSR) SCSR { return SCSR(r.U32.LoadBits(uint32(mask))) }
func (r *RSCSR) StoreBits(mask, b SCSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSCSR) SetBits(mask SCSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RSCSR) ClearBits(mask SCSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RSCSR) Load() SCSR              { return SCSR(r.U32.Load()) }
func (r *RSCSR) Store(b SCSR)            { r.U32.Store(uint32(b)) }

type RMSCSR struct{ mmio.UM32 }

func (rm RMSCSR) Load() SCSR   { return SCSR(rm.UM32.Load()) }
func (rm RMSCSR) Store(b SCSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CCMER() RMSCSR {
	return RMSCSR{mmio.UM32{&p.SCSR.U32, uint32(CCMER)}}
}

func (p *Periph) CCMBSY() RMSCSR {
	return RMSCSR{mmio.UM32{&p.SCSR.U32, uint32(CCMBSY)}}
}

type CFGR2 uint32

type RCFGR2 struct{ mmio.U32 }

func (r *RCFGR2) LoadBits(mask CFGR2) CFGR2 { return CFGR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCFGR2) StoreBits(mask, b CFGR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR2) SetBits(mask CFGR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR2) ClearBits(mask CFGR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR2) Load() CFGR2               { return CFGR2(r.U32.Load()) }
func (r *RCFGR2) Store(b CFGR2)             { r.U32.Store(uint32(b)) }

type RMCFGR2 struct{ mmio.UM32 }

func (rm RMCFGR2) Load() CFGR2   { return CFGR2(rm.UM32.Load()) }
func (rm RMCFGR2) Store(b CFGR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CLL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(CLL)}}
}

func (p *Periph) SPL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(SPL)}}
}

func (p *Periph) PVDL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(PVDL)}}
}

func (p *Periph) ECCL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(ECCL)}}
}

func (p *Periph) SPF() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(SPF)}}
}

type SWPR uint32

type RSWPR struct{ mmio.U32 }

func (r *RSWPR) LoadBits(mask SWPR) SWPR { return SWPR(r.U32.LoadBits(uint32(mask))) }
func (r *RSWPR) StoreBits(mask, b SWPR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSWPR) SetBits(mask SWPR)       { r.U32.SetBits(uint32(mask)) }
func (r *RSWPR) ClearBits(mask SWPR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RSWPR) Load() SWPR              { return SWPR(r.U32.Load()) }
func (r *RSWPR) Store(b SWPR)            { r.U32.Store(uint32(b)) }

type RMSWPR struct{ mmio.UM32 }

func (rm RMSWPR) Load() SWPR   { return SWPR(rm.UM32.Load()) }
func (rm RMSWPR) Store(b SWPR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) Page0_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page0_WP)}}
}

func (p *Periph) Page1_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page1_WP)}}
}

func (p *Periph) Page2_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page2_WP)}}
}

func (p *Periph) Page3_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page3_WP)}}
}

func (p *Periph) Page4_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page4_WP)}}
}

func (p *Periph) Page5_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page5_WP)}}
}

func (p *Periph) Page6_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page6_WP)}}
}

func (p *Periph) Page7_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page7_WP)}}
}

func (p *Periph) Page8_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page8_WP)}}
}

func (p *Periph) Page9_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page9_WP)}}
}

func (p *Periph) Page10_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page10_WP)}}
}

func (p *Periph) Page11_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page11_WP)}}
}

func (p *Periph) Page12_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page12_WP)}}
}

func (p *Periph) Page13_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page13_WP)}}
}

func (p *Periph) Page14_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page14_WP)}}
}

func (p *Periph) Page15_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page15_WP)}}
}

func (p *Periph) Page16_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page16_WP)}}
}

func (p *Periph) Page17_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page17_WP)}}
}

func (p *Periph) Page18_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page18_WP)}}
}

func (p *Periph) Page19_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page19_WP)}}
}

func (p *Periph) Page20_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page20_WP)}}
}

func (p *Periph) Page21_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page21_WP)}}
}

func (p *Periph) Page22_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page22_WP)}}
}

func (p *Periph) Page23_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page23_WP)}}
}

func (p *Periph) Page24_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page24_WP)}}
}

func (p *Periph) Page25_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page25_WP)}}
}

func (p *Periph) Page26_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page26_WP)}}
}

func (p *Periph) Page27_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page27_WP)}}
}

func (p *Periph) Page28_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page28_WP)}}
}

func (p *Periph) Page29_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page29_WP)}}
}

func (p *Periph) Page30_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page30_WP)}}
}

func (p *Periph) Page31_WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(Page31_WP)}}
}

type SKR uint32

type RSKR struct{ mmio.U32 }

func (r *RSKR) LoadBits(mask SKR) SKR { return SKR(r.U32.LoadBits(uint32(mask))) }
func (r *RSKR) StoreBits(mask, b SKR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSKR) SetBits(mask SKR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSKR) ClearBits(mask SKR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSKR) Load() SKR             { return SKR(r.U32.Load()) }
func (r *RSKR) Store(b SKR)           { r.U32.Store(uint32(b)) }

type RMSKR struct{ mmio.UM32 }

func (rm RMSKR) Load() SKR   { return SKR(rm.UM32.Load()) }
func (rm RMSKR) Store(b SKR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) KEY() RMSKR {
	return RMSKR{mmio.UM32{&p.SKR.U32, uint32(KEY)}}
}
