// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32h7x3

package syscfg

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	_      uint32
	PMCR   RPMCR
	EXTICR [4]REXTICR
	_      [2]uint32
	CCCSR  RCCCSR
	CCVR   RCCVR
	CCCR   RCCCR
	PWRCR  RPWRCR
	_      [61]uint32
	PKGR   RPKGR
	_      [118]uint32
	UR0    RUR0
	_      uint32
	UR2    RUR2
	UR3    RUR3
	UR4    RUR4
	UR5    RUR5
	UR6    RUR6
	UR7    RUR7
	UR8    RUR8
	UR9    RUR9
	UR10   RUR10
	UR11   RUR11
	UR12   RUR12
	UR13   RUR13
	UR14   RUR14
	UR15   RUR15
	UR16   RUR16
	UR17   RUR17
}

func SYSCFG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SYSCFG_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB4
}

type PMCR uint32

type RPMCR struct{ mmio.U32 }

func (r *RPMCR) LoadBits(mask PMCR) PMCR { return PMCR(r.U32.LoadBits(uint32(mask))) }
func (r *RPMCR) StoreBits(mask, b PMCR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPMCR) SetBits(mask PMCR)       { r.U32.SetBits(uint32(mask)) }
func (r *RPMCR) ClearBits(mask PMCR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RPMCR) Load() PMCR              { return PMCR(r.U32.Load()) }
func (r *RPMCR) Store(b PMCR)            { r.U32.Store(uint32(b)) }

type RMPMCR struct{ mmio.UM32 }

func (rm RMPMCR) Load() PMCR   { return PMCR(rm.UM32.Load()) }
func (rm RMPMCR) Store(b PMCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) I2C1FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(I2C1FMP)}}
}

func (p *Periph) I2C2FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(I2C2FMP)}}
}

func (p *Periph) I2C3FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(I2C3FMP)}}
}

func (p *Periph) I2C4FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(I2C4FMP)}}
}

func (p *Periph) PB6FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PB6FMP)}}
}

func (p *Periph) PB7FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PB7FMP)}}
}

func (p *Periph) PB8FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PB8FMP)}}
}

func (p *Periph) PB9FMP() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PB9FMP)}}
}

func (p *Periph) BOOSTE() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(BOOSTE)}}
}

func (p *Periph) BOOSTVDDSEL() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(BOOSTVDDSEL)}}
}

func (p *Periph) EPIS() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(EPIS)}}
}

func (p *Periph) PA0SO() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PA0SO)}}
}

func (p *Periph) PA1SO() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PA1SO)}}
}

func (p *Periph) PC2SO() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PC2SO)}}
}

func (p *Periph) PC3SO() RMPMCR {
	return RMPMCR{mmio.UM32{&p.PMCR.U32, uint32(PC3SO)}}
}

type EXTICR uint32

type REXTICR struct{ mmio.U32 }

func (r *REXTICR) LoadBits(mask EXTICR) EXTICR { return EXTICR(r.U32.LoadBits(uint32(mask))) }
func (r *REXTICR) StoreBits(mask, b EXTICR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REXTICR) SetBits(mask EXTICR)         { r.U32.SetBits(uint32(mask)) }
func (r *REXTICR) ClearBits(mask EXTICR)       { r.U32.ClearBits(uint32(mask)) }
func (r *REXTICR) Load() EXTICR                { return EXTICR(r.U32.Load()) }
func (r *REXTICR) Store(b EXTICR)              { r.U32.Store(uint32(b)) }

type RMEXTICR struct{ mmio.UM32 }

func (rm RMEXTICR) Load() EXTICR   { return EXTICR(rm.UM32.Load()) }
func (rm RMEXTICR) Store(b EXTICR) { rm.UM32.Store(uint32(b)) }

type CCCSR uint32

type RCCCSR struct{ mmio.U32 }

func (r *RCCCSR) LoadBits(mask CCCSR) CCCSR { return CCCSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCCSR) StoreBits(mask, b CCCSR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCCSR) SetBits(mask CCCSR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCCCSR) ClearBits(mask CCCSR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCCCSR) Load() CCCSR               { return CCCSR(r.U32.Load()) }
func (r *RCCCSR) Store(b CCCSR)             { r.U32.Store(uint32(b)) }

type RMCCCSR struct{ mmio.UM32 }

func (rm RMCCCSR) Load() CCCSR   { return CCCSR(rm.UM32.Load()) }
func (rm RMCCCSR) Store(b CCCSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) EN() RMCCCSR {
	return RMCCCSR{mmio.UM32{&p.CCCSR.U32, uint32(EN)}}
}

func (p *Periph) CS() RMCCCSR {
	return RMCCCSR{mmio.UM32{&p.CCCSR.U32, uint32(CS)}}
}

func (p *Periph) READY() RMCCCSR {
	return RMCCCSR{mmio.UM32{&p.CCCSR.U32, uint32(READY)}}
}

func (p *Periph) HSLV() RMCCCSR {
	return RMCCCSR{mmio.UM32{&p.CCCSR.U32, uint32(HSLV)}}
}

type CCVR uint32

type RCCVR struct{ mmio.U32 }

func (r *RCCVR) LoadBits(mask CCVR) CCVR { return CCVR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCVR) StoreBits(mask, b CCVR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCVR) SetBits(mask CCVR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCCVR) ClearBits(mask CCVR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCCVR) Load() CCVR              { return CCVR(r.U32.Load()) }
func (r *RCCVR) Store(b CCVR)            { r.U32.Store(uint32(b)) }

type RMCCVR struct{ mmio.UM32 }

func (rm RMCCVR) Load() CCVR   { return CCVR(rm.UM32.Load()) }
func (rm RMCCVR) Store(b CCVR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) NCV() RMCCVR {
	return RMCCVR{mmio.UM32{&p.CCVR.U32, uint32(NCV)}}
}

func (p *Periph) PCV() RMCCVR {
	return RMCCVR{mmio.UM32{&p.CCVR.U32, uint32(PCV)}}
}

type CCCR uint32

type RCCCR struct{ mmio.U32 }

func (r *RCCCR) LoadBits(mask CCCR) CCCR { return CCCR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCCR) StoreBits(mask, b CCCR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCCR) SetBits(mask CCCR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCCCR) ClearBits(mask CCCR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCCCR) Load() CCCR              { return CCCR(r.U32.Load()) }
func (r *RCCCR) Store(b CCCR)            { r.U32.Store(uint32(b)) }

type RMCCCR struct{ mmio.UM32 }

func (rm RMCCCR) Load() CCCR   { return CCCR(rm.UM32.Load()) }
func (rm RMCCCR) Store(b CCCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) NCC() RMCCCR {
	return RMCCCR{mmio.UM32{&p.CCCR.U32, uint32(NCC)}}
}

func (p *Periph) PCC() RMCCCR {
	return RMCCCR{mmio.UM32{&p.CCCR.U32, uint32(PCC)}}
}

type PWRCR uint32

type RPWRCR struct{ mmio.U32 }

func (r *RPWRCR) LoadBits(mask PWRCR) PWRCR { return PWRCR(r.U32.LoadBits(uint32(mask))) }
func (r *RPWRCR) StoreBits(mask, b PWRCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPWRCR) SetBits(mask PWRCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RPWRCR) ClearBits(mask PWRCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RPWRCR) Load() PWRCR               { return PWRCR(r.U32.Load()) }
func (r *RPWRCR) Store(b PWRCR)             { r.U32.Store(uint32(b)) }

type RMPWRCR struct{ mmio.UM32 }

func (rm RMPWRCR) Load() PWRCR   { return PWRCR(rm.UM32.Load()) }
func (rm RMPWRCR) Store(b PWRCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ODEN() RMPWRCR {
	return RMPWRCR{mmio.UM32{&p.PWRCR.U32, uint32(ODEN)}}
}

type PKGR uint32

type RPKGR struct{ mmio.U32 }

func (r *RPKGR) LoadBits(mask PKGR) PKGR { return PKGR(r.U32.LoadBits(uint32(mask))) }
func (r *RPKGR) StoreBits(mask, b PKGR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPKGR) SetBits(mask PKGR)       { r.U32.SetBits(uint32(mask)) }
func (r *RPKGR) ClearBits(mask PKGR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RPKGR) Load() PKGR              { return PKGR(r.U32.Load()) }
func (r *RPKGR) Store(b PKGR)            { r.U32.Store(uint32(b)) }

type RMPKGR struct{ mmio.UM32 }

func (rm RMPKGR) Load() PKGR   { return PKGR(rm.UM32.Load()) }
func (rm RMPKGR) Store(b PKGR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PKG() RMPKGR {
	return RMPKGR{mmio.UM32{&p.PKGR.U32, uint32(PKG)}}
}

type UR0 uint32

type RUR0 struct{ mmio.U32 }

func (r *RUR0) LoadBits(mask UR0) UR0 { return UR0(r.U32.LoadBits(uint32(mask))) }
func (r *RUR0) StoreBits(mask, b UR0) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR0) SetBits(mask UR0)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR0) ClearBits(mask UR0)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR0) Load() UR0             { return UR0(r.U32.Load()) }
func (r *RUR0) Store(b UR0)           { r.U32.Store(uint32(b)) }

type RMUR0 struct{ mmio.UM32 }

func (rm RMUR0) Load() UR0   { return UR0(rm.UM32.Load()) }
func (rm RMUR0) Store(b UR0) { rm.UM32.Store(uint32(b)) }

func (p *Periph) BKS() RMUR0 {
	return RMUR0{mmio.UM32{&p.UR0.U32, uint32(BKS)}}
}

func (p *Periph) RDP() RMUR0 {
	return RMUR0{mmio.UM32{&p.UR0.U32, uint32(RDP)}}
}

type UR2 uint32

type RUR2 struct{ mmio.U32 }

func (r *RUR2) LoadBits(mask UR2) UR2 { return UR2(r.U32.LoadBits(uint32(mask))) }
func (r *RUR2) StoreBits(mask, b UR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR2) SetBits(mask UR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR2) ClearBits(mask UR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR2) Load() UR2             { return UR2(r.U32.Load()) }
func (r *RUR2) Store(b UR2)           { r.U32.Store(uint32(b)) }

type RMUR2 struct{ mmio.UM32 }

func (rm RMUR2) Load() UR2   { return UR2(rm.UM32.Load()) }
func (rm RMUR2) Store(b UR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) BORH() RMUR2 {
	return RMUR2{mmio.UM32{&p.UR2.U32, uint32(BORH)}}
}

func (p *Periph) BOOT_ADD0() RMUR2 {
	return RMUR2{mmio.UM32{&p.UR2.U32, uint32(BOOT_ADD0)}}
}

type UR3 uint32

type RUR3 struct{ mmio.U32 }

func (r *RUR3) LoadBits(mask UR3) UR3 { return UR3(r.U32.LoadBits(uint32(mask))) }
func (r *RUR3) StoreBits(mask, b UR3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR3) SetBits(mask UR3)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR3) ClearBits(mask UR3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR3) Load() UR3             { return UR3(r.U32.Load()) }
func (r *RUR3) Store(b UR3)           { r.U32.Store(uint32(b)) }

type RMUR3 struct{ mmio.UM32 }

func (rm RMUR3) Load() UR3   { return UR3(rm.UM32.Load()) }
func (rm RMUR3) Store(b UR3) { rm.UM32.Store(uint32(b)) }

func (p *Periph) BOOT_ADD1() RMUR3 {
	return RMUR3{mmio.UM32{&p.UR3.U32, uint32(BOOT_ADD1)}}
}

type UR4 uint32

type RUR4 struct{ mmio.U32 }

func (r *RUR4) LoadBits(mask UR4) UR4 { return UR4(r.U32.LoadBits(uint32(mask))) }
func (r *RUR4) StoreBits(mask, b UR4) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR4) SetBits(mask UR4)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR4) ClearBits(mask UR4)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR4) Load() UR4             { return UR4(r.U32.Load()) }
func (r *RUR4) Store(b UR4)           { r.U32.Store(uint32(b)) }

type RMUR4 struct{ mmio.UM32 }

func (rm RMUR4) Load() UR4   { return UR4(rm.UM32.Load()) }
func (rm RMUR4) Store(b UR4) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MEPAD_1() RMUR4 {
	return RMUR4{mmio.UM32{&p.UR4.U32, uint32(MEPAD_1)}}
}

type UR5 uint32

type RUR5 struct{ mmio.U32 }

func (r *RUR5) LoadBits(mask UR5) UR5 { return UR5(r.U32.LoadBits(uint32(mask))) }
func (r *RUR5) StoreBits(mask, b UR5) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR5) SetBits(mask UR5)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR5) ClearBits(mask UR5)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR5) Load() UR5             { return UR5(r.U32.Load()) }
func (r *RUR5) Store(b UR5)           { r.U32.Store(uint32(b)) }

type RMUR5 struct{ mmio.UM32 }

func (rm RMUR5) Load() UR5   { return UR5(rm.UM32.Load()) }
func (rm RMUR5) Store(b UR5) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MESAD_1() RMUR5 {
	return RMUR5{mmio.UM32{&p.UR5.U32, uint32(MESAD_1)}}
}

func (p *Periph) WRPN_1() RMUR5 {
	return RMUR5{mmio.UM32{&p.UR5.U32, uint32(WRPN_1)}}
}

type UR6 uint32

type RUR6 struct{ mmio.U32 }

func (r *RUR6) LoadBits(mask UR6) UR6 { return UR6(r.U32.LoadBits(uint32(mask))) }
func (r *RUR6) StoreBits(mask, b UR6) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR6) SetBits(mask UR6)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR6) ClearBits(mask UR6)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR6) Load() UR6             { return UR6(r.U32.Load()) }
func (r *RUR6) Store(b UR6)           { r.U32.Store(uint32(b)) }

type RMUR6 struct{ mmio.UM32 }

func (rm RMUR6) Load() UR6   { return UR6(rm.UM32.Load()) }
func (rm RMUR6) Store(b UR6) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PA_BEG_1() RMUR6 {
	return RMUR6{mmio.UM32{&p.UR6.U32, uint32(PA_BEG_1)}}
}

func (p *Periph) PA_END_1() RMUR6 {
	return RMUR6{mmio.UM32{&p.UR6.U32, uint32(PA_END_1)}}
}

type UR7 uint32

type RUR7 struct{ mmio.U32 }

func (r *RUR7) LoadBits(mask UR7) UR7 { return UR7(r.U32.LoadBits(uint32(mask))) }
func (r *RUR7) StoreBits(mask, b UR7) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR7) SetBits(mask UR7)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR7) ClearBits(mask UR7)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR7) Load() UR7             { return UR7(r.U32.Load()) }
func (r *RUR7) Store(b UR7)           { r.U32.Store(uint32(b)) }

type RMUR7 struct{ mmio.UM32 }

func (rm RMUR7) Load() UR7   { return UR7(rm.UM32.Load()) }
func (rm RMUR7) Store(b UR7) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SA_BEG_1() RMUR7 {
	return RMUR7{mmio.UM32{&p.UR7.U32, uint32(SA_BEG_1)}}
}

func (p *Periph) SA_END_1() RMUR7 {
	return RMUR7{mmio.UM32{&p.UR7.U32, uint32(SA_END_1)}}
}

type UR8 uint32

type RUR8 struct{ mmio.U32 }

func (r *RUR8) LoadBits(mask UR8) UR8 { return UR8(r.U32.LoadBits(uint32(mask))) }
func (r *RUR8) StoreBits(mask, b UR8) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR8) SetBits(mask UR8)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR8) ClearBits(mask UR8)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR8) Load() UR8             { return UR8(r.U32.Load()) }
func (r *RUR8) Store(b UR8)           { r.U32.Store(uint32(b)) }

type RMUR8 struct{ mmio.UM32 }

func (rm RMUR8) Load() UR8   { return UR8(rm.UM32.Load()) }
func (rm RMUR8) Store(b UR8) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MEPAD_2() RMUR8 {
	return RMUR8{mmio.UM32{&p.UR8.U32, uint32(MEPAD_2)}}
}

func (p *Periph) MESAD_2() RMUR8 {
	return RMUR8{mmio.UM32{&p.UR8.U32, uint32(MESAD_2)}}
}

type UR9 uint32

type RUR9 struct{ mmio.U32 }

func (r *RUR9) LoadBits(mask UR9) UR9 { return UR9(r.U32.LoadBits(uint32(mask))) }
func (r *RUR9) StoreBits(mask, b UR9) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR9) SetBits(mask UR9)      { r.U32.SetBits(uint32(mask)) }
func (r *RUR9) ClearBits(mask UR9)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUR9) Load() UR9             { return UR9(r.U32.Load()) }
func (r *RUR9) Store(b UR9)           { r.U32.Store(uint32(b)) }

type RMUR9 struct{ mmio.UM32 }

func (rm RMUR9) Load() UR9   { return UR9(rm.UM32.Load()) }
func (rm RMUR9) Store(b UR9) { rm.UM32.Store(uint32(b)) }

func (p *Periph) WRPN_2() RMUR9 {
	return RMUR9{mmio.UM32{&p.UR9.U32, uint32(WRPN_2)}}
}

func (p *Periph) PA_BEG_2() RMUR9 {
	return RMUR9{mmio.UM32{&p.UR9.U32, uint32(PA_BEG_2)}}
}

type UR10 uint32

type RUR10 struct{ mmio.U32 }

func (r *RUR10) LoadBits(mask UR10) UR10 { return UR10(r.U32.LoadBits(uint32(mask))) }
func (r *RUR10) StoreBits(mask, b UR10)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR10) SetBits(mask UR10)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR10) ClearBits(mask UR10)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR10) Load() UR10              { return UR10(r.U32.Load()) }
func (r *RUR10) Store(b UR10)            { r.U32.Store(uint32(b)) }

type RMUR10 struct{ mmio.UM32 }

func (rm RMUR10) Load() UR10   { return UR10(rm.UM32.Load()) }
func (rm RMUR10) Store(b UR10) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PA_END_2() RMUR10 {
	return RMUR10{mmio.UM32{&p.UR10.U32, uint32(PA_END_2)}}
}

func (p *Periph) SA_BEG_2() RMUR10 {
	return RMUR10{mmio.UM32{&p.UR10.U32, uint32(SA_BEG_2)}}
}

type UR11 uint32

type RUR11 struct{ mmio.U32 }

func (r *RUR11) LoadBits(mask UR11) UR11 { return UR11(r.U32.LoadBits(uint32(mask))) }
func (r *RUR11) StoreBits(mask, b UR11)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR11) SetBits(mask UR11)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR11) ClearBits(mask UR11)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR11) Load() UR11              { return UR11(r.U32.Load()) }
func (r *RUR11) Store(b UR11)            { r.U32.Store(uint32(b)) }

type RMUR11 struct{ mmio.UM32 }

func (rm RMUR11) Load() UR11   { return UR11(rm.UM32.Load()) }
func (rm RMUR11) Store(b UR11) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SA_END_2() RMUR11 {
	return RMUR11{mmio.UM32{&p.UR11.U32, uint32(SA_END_2)}}
}

func (p *Periph) IWDG1M() RMUR11 {
	return RMUR11{mmio.UM32{&p.UR11.U32, uint32(IWDG1M)}}
}

type UR12 uint32

type RUR12 struct{ mmio.U32 }

func (r *RUR12) LoadBits(mask UR12) UR12 { return UR12(r.U32.LoadBits(uint32(mask))) }
func (r *RUR12) StoreBits(mask, b UR12)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR12) SetBits(mask UR12)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR12) ClearBits(mask UR12)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR12) Load() UR12              { return UR12(r.U32.Load()) }
func (r *RUR12) Store(b UR12)            { r.U32.Store(uint32(b)) }

type RMUR12 struct{ mmio.UM32 }

func (rm RMUR12) Load() UR12   { return UR12(rm.UM32.Load()) }
func (rm RMUR12) Store(b UR12) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SECURE() RMUR12 {
	return RMUR12{mmio.UM32{&p.UR12.U32, uint32(SECURE)}}
}

type UR13 uint32

type RUR13 struct{ mmio.U32 }

func (r *RUR13) LoadBits(mask UR13) UR13 { return UR13(r.U32.LoadBits(uint32(mask))) }
func (r *RUR13) StoreBits(mask, b UR13)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR13) SetBits(mask UR13)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR13) ClearBits(mask UR13)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR13) Load() UR13              { return UR13(r.U32.Load()) }
func (r *RUR13) Store(b UR13)            { r.U32.Store(uint32(b)) }

type RMUR13 struct{ mmio.UM32 }

func (rm RMUR13) Load() UR13   { return UR13(rm.UM32.Load()) }
func (rm RMUR13) Store(b UR13) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SDRS() RMUR13 {
	return RMUR13{mmio.UM32{&p.UR13.U32, uint32(SDRS)}}
}

func (p *Periph) D1SBRST() RMUR13 {
	return RMUR13{mmio.UM32{&p.UR13.U32, uint32(D1SBRST)}}
}

type UR14 uint32

type RUR14 struct{ mmio.U32 }

func (r *RUR14) LoadBits(mask UR14) UR14 { return UR14(r.U32.LoadBits(uint32(mask))) }
func (r *RUR14) StoreBits(mask, b UR14)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR14) SetBits(mask UR14)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR14) ClearBits(mask UR14)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR14) Load() UR14              { return UR14(r.U32.Load()) }
func (r *RUR14) Store(b UR14)            { r.U32.Store(uint32(b)) }

type RMUR14 struct{ mmio.UM32 }

func (rm RMUR14) Load() UR14   { return UR14(rm.UM32.Load()) }
func (rm RMUR14) Store(b UR14) { rm.UM32.Store(uint32(b)) }

func (p *Periph) D1STPRST() RMUR14 {
	return RMUR14{mmio.UM32{&p.UR14.U32, uint32(D1STPRST)}}
}

type UR15 uint32

type RUR15 struct{ mmio.U32 }

func (r *RUR15) LoadBits(mask UR15) UR15 { return UR15(r.U32.LoadBits(uint32(mask))) }
func (r *RUR15) StoreBits(mask, b UR15)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR15) SetBits(mask UR15)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR15) ClearBits(mask UR15)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR15) Load() UR15              { return UR15(r.U32.Load()) }
func (r *RUR15) Store(b UR15)            { r.U32.Store(uint32(b)) }

type RMUR15 struct{ mmio.UM32 }

func (rm RMUR15) Load() UR15   { return UR15(rm.UM32.Load()) }
func (rm RMUR15) Store(b UR15) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FZIWDGSTB() RMUR15 {
	return RMUR15{mmio.UM32{&p.UR15.U32, uint32(FZIWDGSTB)}}
}

type UR16 uint32

type RUR16 struct{ mmio.U32 }

func (r *RUR16) LoadBits(mask UR16) UR16 { return UR16(r.U32.LoadBits(uint32(mask))) }
func (r *RUR16) StoreBits(mask, b UR16)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR16) SetBits(mask UR16)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR16) ClearBits(mask UR16)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR16) Load() UR16              { return UR16(r.U32.Load()) }
func (r *RUR16) Store(b UR16)            { r.U32.Store(uint32(b)) }

type RMUR16 struct{ mmio.UM32 }

func (rm RMUR16) Load() UR16   { return UR16(rm.UM32.Load()) }
func (rm RMUR16) Store(b UR16) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FZIWDGSTP() RMUR16 {
	return RMUR16{mmio.UM32{&p.UR16.U32, uint32(FZIWDGSTP)}}
}

func (p *Periph) PKP() RMUR16 {
	return RMUR16{mmio.UM32{&p.UR16.U32, uint32(PKP)}}
}

type UR17 uint32

type RUR17 struct{ mmio.U32 }

func (r *RUR17) LoadBits(mask UR17) UR17 { return UR17(r.U32.LoadBits(uint32(mask))) }
func (r *RUR17) StoreBits(mask, b UR17)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUR17) SetBits(mask UR17)       { r.U32.SetBits(uint32(mask)) }
func (r *RUR17) ClearBits(mask UR17)     { r.U32.ClearBits(uint32(mask)) }
func (r *RUR17) Load() UR17              { return UR17(r.U32.Load()) }
func (r *RUR17) Store(b UR17)            { r.U32.Store(uint32(b)) }

type RMUR17 struct{ mmio.UM32 }

func (rm RMUR17) Load() UR17   { return UR17(rm.UM32.Load()) }
func (rm RMUR17) Store(b UR17) { rm.UM32.Store(uint32(b)) }

func (p *Periph) IO_HSLV() RMUR17 {
	return RMUR17{mmio.UM32{&p.UR17.U32, uint32(IO_HSLV)}}
}
