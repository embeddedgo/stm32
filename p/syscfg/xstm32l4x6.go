// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32l4x6

package syscfg

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MEMRMP mmio.R32[MEMRMP]
	CFGR1  mmio.R32[CFGR1]
	EXTICR [4]mmio.R32[uint32]
	SCSR   mmio.R32[SCSR]
	CFGR2  mmio.R32[CFGR2]
	SWPR   mmio.R32[SWPR]
	SKR    mmio.R32[SKR]
}

func SYSCFG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SYSCFG_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB2
}

type MEMRMP uint32

func MEM_MODE_(p *Periph) mmio.RM32[MEMRMP] { return mmio.RM32[MEMRMP]{&p.MEMRMP, MEM_MODE} }
func QFS_(p *Periph) mmio.RM32[MEMRMP]      { return mmio.RM32[MEMRMP]{&p.MEMRMP, QFS} }
func FB_MODE_(p *Periph) mmio.RM32[MEMRMP]  { return mmio.RM32[MEMRMP]{&p.MEMRMP, FB_MODE} }

type CFGR1 uint32

func FWDIS_(p *Periph) mmio.RM32[CFGR1]       { return mmio.RM32[CFGR1]{&p.CFGR1, FWDIS} }
func BOOSTEN_(p *Periph) mmio.RM32[CFGR1]     { return mmio.RM32[CFGR1]{&p.CFGR1, BOOSTEN} }
func I2C_PB6_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{&p.CFGR1, I2C_PB6_FMP} }
func I2C_PB7_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{&p.CFGR1, I2C_PB7_FMP} }
func I2C_PB8_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{&p.CFGR1, I2C_PB8_FMP} }
func I2C_PB9_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{&p.CFGR1, I2C_PB9_FMP} }
func I2C1_FMP_(p *Periph) mmio.RM32[CFGR1]    { return mmio.RM32[CFGR1]{&p.CFGR1, I2C1_FMP} }
func I2C2_FMP_(p *Periph) mmio.RM32[CFGR1]    { return mmio.RM32[CFGR1]{&p.CFGR1, I2C2_FMP} }
func I2C3_FMP_(p *Periph) mmio.RM32[CFGR1]    { return mmio.RM32[CFGR1]{&p.CFGR1, I2C3_FMP} }
func FPU_IE_(p *Periph) mmio.RM32[CFGR1]      { return mmio.RM32[CFGR1]{&p.CFGR1, FPU_IE} }

type SCSR uint32

func SRAM2ER_(p *Periph) mmio.RM32[SCSR]  { return mmio.RM32[SCSR]{&p.SCSR, SRAM2ER} }
func SRAM2BSY_(p *Periph) mmio.RM32[SCSR] { return mmio.RM32[SCSR]{&p.SCSR, SRAM2BSY} }

type CFGR2 uint32

func CLL_(p *Periph) mmio.RM32[CFGR2]  { return mmio.RM32[CFGR2]{&p.CFGR2, CLL} }
func SPL_(p *Periph) mmio.RM32[CFGR2]  { return mmio.RM32[CFGR2]{&p.CFGR2, SPL} }
func PVDL_(p *Periph) mmio.RM32[CFGR2] { return mmio.RM32[CFGR2]{&p.CFGR2, PVDL} }
func ECCL_(p *Periph) mmio.RM32[CFGR2] { return mmio.RM32[CFGR2]{&p.CFGR2, ECCL} }
func SPF_(p *Periph) mmio.RM32[CFGR2]  { return mmio.RM32[CFGR2]{&p.CFGR2, SPF} }

type SWPR uint32

func P0WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P0WP} }
func P1WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P1WP} }
func P2WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P2WP} }
func P3WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P3WP} }
func P4WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P4WP} }
func P5WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P5WP} }
func P6WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P6WP} }
func P7WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P7WP} }
func P8WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P8WP} }
func P9WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{&p.SWPR, P9WP} }
func P10WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P10WP} }
func P11WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P11WP} }
func P12WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P12WP} }
func P13WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P13WP} }
func P14WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P14WP} }
func P15WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P15WP} }
func P16WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P16WP} }
func P17WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P17WP} }
func P18WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P18WP} }
func P19WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P19WP} }
func P20WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P20WP} }
func P21WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P21WP} }
func P22WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P22WP} }
func P23WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P23WP} }
func P24WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P24WP} }
func P25WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P25WP} }
func P26WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P26WP} }
func P27WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P27WP} }
func P28WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P28WP} }
func P29WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P29WP} }
func P30WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P30WP} }
func P31WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{&p.SWPR, P31WP} }

type SKR uint32

func KEY_(p *Periph) mmio.RM32[SKR] { return mmio.RM32[SKR]{&p.SKR, KEY} }
