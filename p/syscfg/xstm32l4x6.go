// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32l4x6

package syscfg

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MEMRMP mmio.R32[MEMRMP]
	CFGR1  mmio.R32[CFGR1]
	EXTICR [4]mmio.R32[uint32]
	SCSR   mmio.R32[SCSR]
	CFGR2  mmio.R32[CFGR2]
	SWPR   mmio.R32[SWPR]
	SKR    mmio.R32[SKR]
}

func SYSCFG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SYSCFG_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB2
}

type MEMRMP uint32

func MEM_MODE_(p *Periph) mmio.RM32[MEMRMP] { return mmio.RM32[MEMRMP]{R: &p.MEMRMP, Mask: MEM_MODE} }
func QFS_(p *Periph) mmio.RM32[MEMRMP]      { return mmio.RM32[MEMRMP]{R: &p.MEMRMP, Mask: QFS} }
func FB_MODE_(p *Periph) mmio.RM32[MEMRMP]  { return mmio.RM32[MEMRMP]{R: &p.MEMRMP, Mask: FB_MODE} }

type CFGR1 uint32

func FWDIS_(p *Periph) mmio.RM32[CFGR1]   { return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: FWDIS} }
func BOOSTEN_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: BOOSTEN} }
func I2C_PB6_FMP_(p *Periph) mmio.RM32[CFGR1] {
	return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C_PB6_FMP}
}
func I2C_PB7_FMP_(p *Periph) mmio.RM32[CFGR1] {
	return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C_PB7_FMP}
}
func I2C_PB8_FMP_(p *Periph) mmio.RM32[CFGR1] {
	return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C_PB8_FMP}
}
func I2C_PB9_FMP_(p *Periph) mmio.RM32[CFGR1] {
	return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C_PB9_FMP}
}
func I2C1_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C1_FMP} }
func I2C2_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C2_FMP} }
func I2C3_FMP_(p *Periph) mmio.RM32[CFGR1] { return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: I2C3_FMP} }
func FPU_IE_(p *Periph) mmio.RM32[CFGR1]   { return mmio.RM32[CFGR1]{R: &p.CFGR1, Mask: FPU_IE} }

type SCSR uint32

func SRAM2ER_(p *Periph) mmio.RM32[SCSR]  { return mmio.RM32[SCSR]{R: &p.SCSR, Mask: SRAM2ER} }
func SRAM2BSY_(p *Periph) mmio.RM32[SCSR] { return mmio.RM32[SCSR]{R: &p.SCSR, Mask: SRAM2BSY} }

type CFGR2 uint32

func CLL_(p *Periph) mmio.RM32[CFGR2]  { return mmio.RM32[CFGR2]{R: &p.CFGR2, Mask: CLL} }
func SPL_(p *Periph) mmio.RM32[CFGR2]  { return mmio.RM32[CFGR2]{R: &p.CFGR2, Mask: SPL} }
func PVDL_(p *Periph) mmio.RM32[CFGR2] { return mmio.RM32[CFGR2]{R: &p.CFGR2, Mask: PVDL} }
func ECCL_(p *Periph) mmio.RM32[CFGR2] { return mmio.RM32[CFGR2]{R: &p.CFGR2, Mask: ECCL} }
func SPF_(p *Periph) mmio.RM32[CFGR2]  { return mmio.RM32[CFGR2]{R: &p.CFGR2, Mask: SPF} }

type SWPR uint32

func P0WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P0WP} }
func P1WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P1WP} }
func P2WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P2WP} }
func P3WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P3WP} }
func P4WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P4WP} }
func P5WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P5WP} }
func P6WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P6WP} }
func P7WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P7WP} }
func P8WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P8WP} }
func P9WP_(p *Periph) mmio.RM32[SWPR]  { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P9WP} }
func P10WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P10WP} }
func P11WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P11WP} }
func P12WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P12WP} }
func P13WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P13WP} }
func P14WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P14WP} }
func P15WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P15WP} }
func P16WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P16WP} }
func P17WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P17WP} }
func P18WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P18WP} }
func P19WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P19WP} }
func P20WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P20WP} }
func P21WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P21WP} }
func P22WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P22WP} }
func P23WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P23WP} }
func P24WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P24WP} }
func P25WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P25WP} }
func P26WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P26WP} }
func P27WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P27WP} }
func P28WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P28WP} }
func P29WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P29WP} }
func P30WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P30WP} }
func P31WP_(p *Periph) mmio.RM32[SWPR] { return mmio.RM32[SWPR]{R: &p.SWPR, Mask: P31WP} }

type SKR uint32

func KEY_(p *Periph) mmio.RM32[SKR] { return mmio.RM32[SKR]{R: &p.SKR, Mask: KEY} }
