// DO NOT EDIT THIS FILE. GENERATED BY xgen.

// +build stm32l4x6

package syscfg

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	MEMRMP RMEMRMP
	CFGR1  RCFGR1
	EXTICR [4]REXTICR
	SCSR   RSCSR
	CFGR2  RCFGR2
	SWPR   RSWPR
	SKR    RSKR
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB2
}

func SYSCFG() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SYSCFG_BASE))) }

type MEMRMP uint32

type RMEMRMP struct{ mmio.U32 }

func (r *RMEMRMP) Bits(mask MEMRMP) MEMRMP  { return MEMRMP(r.U32.Bits(uint32(mask))) }
func (r *RMEMRMP) StoreBits(mask, b MEMRMP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMEMRMP) SetBits(mask MEMRMP)      { r.U32.SetBits(uint32(mask)) }
func (r *RMEMRMP) ClearBits(mask MEMRMP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMEMRMP) Load() MEMRMP             { return MEMRMP(r.U32.Load()) }
func (r *RMEMRMP) Store(b MEMRMP)           { r.U32.Store(uint32(b)) }

type RMMEMRMP struct{ mmio.UM32 }

func (rm RMMEMRMP) Load() MEMRMP   { return MEMRMP(rm.UM32.Load()) }
func (rm RMMEMRMP) Store(b MEMRMP) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MEM_MODE() RMMEMRMP {
	return RMMEMRMP{mmio.UM32{&p.MEMRMP.U32, uint32(MEM_MODE)}}
}

func (p *Periph) QFS() RMMEMRMP {
	return RMMEMRMP{mmio.UM32{&p.MEMRMP.U32, uint32(QFS)}}
}

func (p *Periph) FB_MODE() RMMEMRMP {
	return RMMEMRMP{mmio.UM32{&p.MEMRMP.U32, uint32(FB_MODE)}}
}

type CFGR1 uint32

type RCFGR1 struct{ mmio.U32 }

func (r *RCFGR1) Bits(mask CFGR1) CFGR1   { return CFGR1(r.U32.Bits(uint32(mask))) }
func (r *RCFGR1) StoreBits(mask, b CFGR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR1) SetBits(mask CFGR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR1) ClearBits(mask CFGR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR1) Load() CFGR1             { return CFGR1(r.U32.Load()) }
func (r *RCFGR1) Store(b CFGR1)           { r.U32.Store(uint32(b)) }

type RMCFGR1 struct{ mmio.UM32 }

func (rm RMCFGR1) Load() CFGR1   { return CFGR1(rm.UM32.Load()) }
func (rm RMCFGR1) Store(b CFGR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) FWDIS() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(FWDIS)}}
}

func (p *Periph) BOOSTEN() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(BOOSTEN)}}
}

func (p *Periph) I2C_PB6_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB6_FMP)}}
}

func (p *Periph) I2C_PB7_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB7_FMP)}}
}

func (p *Periph) I2C_PB8_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB8_FMP)}}
}

func (p *Periph) I2C_PB9_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB9_FMP)}}
}

func (p *Periph) I2C1_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C1_FMP)}}
}

func (p *Periph) I2C2_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C2_FMP)}}
}

func (p *Periph) I2C3_FMP() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(I2C3_FMP)}}
}

func (p *Periph) FPU_IE() RMCFGR1 {
	return RMCFGR1{mmio.UM32{&p.CFGR1.U32, uint32(FPU_IE)}}
}

type EXTICR uint32

type REXTICR struct{ mmio.U32 }

func (r *REXTICR) Bits(mask EXTICR) EXTICR  { return EXTICR(r.U32.Bits(uint32(mask))) }
func (r *REXTICR) StoreBits(mask, b EXTICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *REXTICR) SetBits(mask EXTICR)      { r.U32.SetBits(uint32(mask)) }
func (r *REXTICR) ClearBits(mask EXTICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *REXTICR) Load() EXTICR             { return EXTICR(r.U32.Load()) }
func (r *REXTICR) Store(b EXTICR)           { r.U32.Store(uint32(b)) }

type RMEXTICR struct{ mmio.UM32 }

func (rm RMEXTICR) Load() EXTICR   { return EXTICR(rm.UM32.Load()) }
func (rm RMEXTICR) Store(b EXTICR) { rm.UM32.Store(uint32(b)) }

type SCSR uint32

type RSCSR struct{ mmio.U32 }

func (r *RSCSR) Bits(mask SCSR) SCSR    { return SCSR(r.U32.Bits(uint32(mask))) }
func (r *RSCSR) StoreBits(mask, b SCSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSCSR) SetBits(mask SCSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSCSR) ClearBits(mask SCSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSCSR) Load() SCSR             { return SCSR(r.U32.Load()) }
func (r *RSCSR) Store(b SCSR)           { r.U32.Store(uint32(b)) }

type RMSCSR struct{ mmio.UM32 }

func (rm RMSCSR) Load() SCSR   { return SCSR(rm.UM32.Load()) }
func (rm RMSCSR) Store(b SCSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SRAM2ER() RMSCSR {
	return RMSCSR{mmio.UM32{&p.SCSR.U32, uint32(SRAM2ER)}}
}

func (p *Periph) SRAM2BSY() RMSCSR {
	return RMSCSR{mmio.UM32{&p.SCSR.U32, uint32(SRAM2BSY)}}
}

type CFGR2 uint32

type RCFGR2 struct{ mmio.U32 }

func (r *RCFGR2) Bits(mask CFGR2) CFGR2   { return CFGR2(r.U32.Bits(uint32(mask))) }
func (r *RCFGR2) StoreBits(mask, b CFGR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR2) SetBits(mask CFGR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR2) ClearBits(mask CFGR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR2) Load() CFGR2             { return CFGR2(r.U32.Load()) }
func (r *RCFGR2) Store(b CFGR2)           { r.U32.Store(uint32(b)) }

type RMCFGR2 struct{ mmio.UM32 }

func (rm RMCFGR2) Load() CFGR2   { return CFGR2(rm.UM32.Load()) }
func (rm RMCFGR2) Store(b CFGR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CLL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(CLL)}}
}

func (p *Periph) SPL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(SPL)}}
}

func (p *Periph) PVDL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(PVDL)}}
}

func (p *Periph) ECCL() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(ECCL)}}
}

func (p *Periph) SPF() RMCFGR2 {
	return RMCFGR2{mmio.UM32{&p.CFGR2.U32, uint32(SPF)}}
}

type SWPR uint32

type RSWPR struct{ mmio.U32 }

func (r *RSWPR) Bits(mask SWPR) SWPR    { return SWPR(r.U32.Bits(uint32(mask))) }
func (r *RSWPR) StoreBits(mask, b SWPR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSWPR) SetBits(mask SWPR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSWPR) ClearBits(mask SWPR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSWPR) Load() SWPR             { return SWPR(r.U32.Load()) }
func (r *RSWPR) Store(b SWPR)           { r.U32.Store(uint32(b)) }

type RMSWPR struct{ mmio.UM32 }

func (rm RMSWPR) Load() SWPR   { return SWPR(rm.UM32.Load()) }
func (rm RMSWPR) Store(b SWPR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) P0WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P0WP)}}
}

func (p *Periph) P1WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P1WP)}}
}

func (p *Periph) P2WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P2WP)}}
}

func (p *Periph) P3WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P3WP)}}
}

func (p *Periph) P4WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P4WP)}}
}

func (p *Periph) P5WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P5WP)}}
}

func (p *Periph) P6WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P6WP)}}
}

func (p *Periph) P7WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P7WP)}}
}

func (p *Periph) P8WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P8WP)}}
}

func (p *Periph) P9WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P9WP)}}
}

func (p *Periph) P10WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P10WP)}}
}

func (p *Periph) P11WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P11WP)}}
}

func (p *Periph) P12WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P12WP)}}
}

func (p *Periph) P13WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P13WP)}}
}

func (p *Periph) P14WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P14WP)}}
}

func (p *Periph) P15WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P15WP)}}
}

func (p *Periph) P16WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P16WP)}}
}

func (p *Periph) P17WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P17WP)}}
}

func (p *Periph) P18WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P18WP)}}
}

func (p *Periph) P19WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P19WP)}}
}

func (p *Periph) P20WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P20WP)}}
}

func (p *Periph) P21WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P21WP)}}
}

func (p *Periph) P22WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P22WP)}}
}

func (p *Periph) P23WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P23WP)}}
}

func (p *Periph) P24WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P24WP)}}
}

func (p *Periph) P25WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P25WP)}}
}

func (p *Periph) P26WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P26WP)}}
}

func (p *Periph) P27WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P27WP)}}
}

func (p *Periph) P28WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P28WP)}}
}

func (p *Periph) P29WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P29WP)}}
}

func (p *Periph) P30WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P30WP)}}
}

func (p *Periph) P31WP() RMSWPR {
	return RMSWPR{mmio.UM32{&p.SWPR.U32, uint32(P31WP)}}
}

type SKR uint32

type RSKR struct{ mmio.U32 }

func (r *RSKR) Bits(mask SKR) SKR     { return SKR(r.U32.Bits(uint32(mask))) }
func (r *RSKR) StoreBits(mask, b SKR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSKR) SetBits(mask SKR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSKR) ClearBits(mask SKR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSKR) Load() SKR             { return SKR(r.U32.Load()) }
func (r *RSKR) Store(b SKR)           { r.U32.Store(uint32(b)) }

type RMSKR struct{ mmio.UM32 }

func (rm RMSKR) Load() SKR   { return SKR(rm.UM32.Load()) }
func (rm RMSKR) Store(b SKR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) KEY() RMSKR {
	return RMSKR{mmio.UM32{&p.SKR.U32, uint32(KEY)}}
}
