// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32h7x3

// Package hash provides access to the registers of the HASH peripheral.
//
// Instances:
//
//	HASH  HASH_BASE  AHB2  HASH_RNG  Hash processor
//
// Registers:
//
//	0x000 32  CR        control register
//	0x004 32  DIN       data input register
//	0x008 32  STR       start register
//	0x00C 32  HR0       digest registers
//	0x010 32  HR1       digest registers
//	0x014 32  HR2       digest registers
//	0x018 32  HR3       digest registers
//	0x01C 32  HR4       digest registers
//	0x020 32  IMR       interrupt enable register
//	0x024 32  SR        status register
//	0x0F8 32  CSR0      context swap registers
//	0x0FC 32  CSR1      context swap registers
//	0x100 32  CSR2      context swap registers
//	0x104 32  CSR3      context swap registers
//	0x108 32  CSR4      context swap registers
//	0x10C 32  CSR5      context swap registers
//	0x110 32  CSR6      context swap registers
//	0x114 32  CSR7      context swap registers
//	0x118 32  CSR8      context swap registers
//	0x11C 32  CSR9      context swap registers
//	0x120 32  CSR10     context swap registers
//	0x124 32  CSR11     context swap registers
//	0x128 32  CSR12     context swap registers
//	0x12C 32  CSR13     context swap registers
//	0x130 32  CSR14     context swap registers
//	0x134 32  CSR15     context swap registers
//	0x138 32  CSR16     context swap registers
//	0x13C 32  CSR17     context swap registers
//	0x140 32  CSR18     context swap registers
//	0x144 32  CSR19     context swap registers
//	0x148 32  CSR20     context swap registers
//	0x14C 32  CSR21     context swap registers
//	0x150 32  CSR22     context swap registers
//	0x154 32  CSR23     context swap registers
//	0x158 32  CSR24     context swap registers
//	0x15C 32  CSR25     context swap registers
//	0x160 32  CSR26     context swap registers
//	0x164 32  CSR27     context swap registers
//	0x168 32  CSR28     context swap registers
//	0x16C 32  CSR29     context swap registers
//	0x170 32  CSR30     context swap registers
//	0x174 32  CSR31     context swap registers
//	0x178 32  CSR32     context swap registers
//	0x17C 32  CSR33     context swap registers
//	0x180 32  CSR34     context swap registers
//	0x184 32  CSR35     context swap registers
//	0x188 32  CSR36     context swap registers
//	0x18C 32  CSR37     context swap registers
//	0x190 32  CSR38     context swap registers
//	0x194 32  CSR39     context swap registers
//	0x198 32  CSR40     context swap registers
//	0x19C 32  CSR41     context swap registers
//	0x1A0 32  CSR42     context swap registers
//	0x1A4 32  CSR43     context swap registers
//	0x1A8 32  CSR44     context swap registers
//	0x1AC 32  CSR45     context swap registers
//	0x1B0 32  CSR46     context swap registers
//	0x1B4 32  CSR47     context swap registers
//	0x1B8 32  CSR48     context swap registers
//	0x1BC 32  CSR49     context swap registers
//	0x1C0 32  CSR50     context swap registers
//	0x1C4 32  CSR51     context swap registers
//	0x1C8 32  CSR52     context swap registers
//	0x1CC 32  CSR53     context swap registers
//	0x310 32  HASH_HR0  HASH digest register
//	0x314 32  HASH_HR1  read-only
//	0x318 32  HASH_HR2  read-only
//	0x31C 32  HASH_HR3  read-only
//	0x320 32  HASH_HR4  read-only
//	0x324 32  HASH_HR5  read-only
//	0x328 32  HASH_HR6  read-only
//	0x32C 32  HASH_HR7  read-only
//
// Import:
//
//	github.com/embeddedgo/stm32/p/bus
//	github.com/embeddedgo/stm32/p/mmap
package hash

const (
	INIT     CR = 0x01 << 2  //+ Initialize message digest calculation
	DMAE     CR = 0x01 << 3  //+ DMA enable
	DATATYPE CR = 0x03 << 4  //+ Data type selection
	MODE     CR = 0x01 << 6  //+ Mode selection
	ALGO0    CR = 0x01 << 7  //+ Algorithm selection
	NBW      CR = 0x0F << 8  //+ Number of words already pushed
	DINNE    CR = 0x01 << 12 //+ DIN not empty
	MDMAT    CR = 0x01 << 13 //+ Multiple DMA Transfers
	LKEY     CR = 0x01 << 16 //+ Long key selection
	ALGO1    CR = 0x01 << 18 //+ ALGO
)

const (
	INITn     = 2
	DMAEn     = 3
	DATATYPEn = 4
	MODEn     = 6
	ALGO0n    = 7
	NBWn      = 8
	DINNEn    = 12
	MDMATn    = 13
	LKEYn     = 16
	ALGO1n    = 18
)

const (
	DATAIN DIN = 0xFFFFFFFF << 0 //+ Data input
)

const (
	DATAINn = 0
)

const (
	NBLW STR = 0x1F << 0 //+ Number of valid bits in the last word of the message
	DCAL STR = 0x01 << 8 //+ Digest calculation
)

const (
	NBLWn = 0
	DCALn = 8
)

const (
	H0 HR0 = 0xFFFFFFFF << 0 //+ H0
)

const (
	H0n = 0
)

const (
	H1 HR1 = 0xFFFFFFFF << 0 //+ H1
)

const (
	H1n = 0
)

const (
	H2 HR2 = 0xFFFFFFFF << 0 //+ H2
)

const (
	H2n = 0
)

const (
	H3 HR3 = 0xFFFFFFFF << 0 //+ H3
)

const (
	H3n = 0
)

const (
	H4 HR4 = 0xFFFFFFFF << 0 //+ H4
)

const (
	H4n = 0
)

const (
	DINIE IMR = 0x01 << 0 //+ Data input interrupt enable
	DCIE  IMR = 0x01 << 1 //+ Digest calculation completion interrupt enable
)

const (
	DINIEn = 0
	DCIEn  = 1
)

const (
	DINIS SR = 0x01 << 0 //+ Data input interrupt status
	DCIS  SR = 0x01 << 1 //+ Digest calculation completion interrupt status
	DMAS  SR = 0x01 << 2 //+ DMA Status
	BUSY  SR = 0x01 << 3 //+ Busy bit
)

const (
	DINISn = 0
	DCISn  = 1
	DMASn  = 2
	BUSYn  = 3
)

const (
	CSR0 CSR0 = 0xFFFFFFFF << 0 //+ CSR0
)

const (
	CSR0n = 0
)

const (
	CSR1 CSR1 = 0xFFFFFFFF << 0 //+ CSR1
)

const (
	CSR1n = 0
)

const (
	CSR2 CSR2 = 0xFFFFFFFF << 0 //+ CSR2
)

const (
	CSR2n = 0
)

const (
	CSR3 CSR3 = 0xFFFFFFFF << 0 //+ CSR3
)

const (
	CSR3n = 0
)

const (
	CSR4 CSR4 = 0xFFFFFFFF << 0 //+ CSR4
)

const (
	CSR4n = 0
)

const (
	CSR5 CSR5 = 0xFFFFFFFF << 0 //+ CSR5
)

const (
	CSR5n = 0
)

const (
	CSR6 CSR6 = 0xFFFFFFFF << 0 //+ CSR6
)

const (
	CSR6n = 0
)

const (
	CSR7 CSR7 = 0xFFFFFFFF << 0 //+ CSR7
)

const (
	CSR7n = 0
)

const (
	CSR8 CSR8 = 0xFFFFFFFF << 0 //+ CSR8
)

const (
	CSR8n = 0
)

const (
	CSR9 CSR9 = 0xFFFFFFFF << 0 //+ CSR9
)

const (
	CSR9n = 0
)

const (
	CSR10 CSR10 = 0xFFFFFFFF << 0 //+ CSR10
)

const (
	CSR10n = 0
)

const (
	CSR11 CSR11 = 0xFFFFFFFF << 0 //+ CSR11
)

const (
	CSR11n = 0
)

const (
	CSR12 CSR12 = 0xFFFFFFFF << 0 //+ CSR12
)

const (
	CSR12n = 0
)

const (
	CSR13 CSR13 = 0xFFFFFFFF << 0 //+ CSR13
)

const (
	CSR13n = 0
)

const (
	CSR14 CSR14 = 0xFFFFFFFF << 0 //+ CSR14
)

const (
	CSR14n = 0
)

const (
	CSR15 CSR15 = 0xFFFFFFFF << 0 //+ CSR15
)

const (
	CSR15n = 0
)

const (
	CSR16 CSR16 = 0xFFFFFFFF << 0 //+ CSR16
)

const (
	CSR16n = 0
)

const (
	CSR17 CSR17 = 0xFFFFFFFF << 0 //+ CSR17
)

const (
	CSR17n = 0
)

const (
	CSR18 CSR18 = 0xFFFFFFFF << 0 //+ CSR18
)

const (
	CSR18n = 0
)

const (
	CSR19 CSR19 = 0xFFFFFFFF << 0 //+ CSR19
)

const (
	CSR19n = 0
)

const (
	CSR20 CSR20 = 0xFFFFFFFF << 0 //+ CSR20
)

const (
	CSR20n = 0
)

const (
	CSR21 CSR21 = 0xFFFFFFFF << 0 //+ CSR21
)

const (
	CSR21n = 0
)

const (
	CSR22 CSR22 = 0xFFFFFFFF << 0 //+ CSR22
)

const (
	CSR22n = 0
)

const (
	CSR23 CSR23 = 0xFFFFFFFF << 0 //+ CSR23
)

const (
	CSR23n = 0
)

const (
	CSR24 CSR24 = 0xFFFFFFFF << 0 //+ CSR24
)

const (
	CSR24n = 0
)

const (
	CSR25 CSR25 = 0xFFFFFFFF << 0 //+ CSR25
)

const (
	CSR25n = 0
)

const (
	CSR26 CSR26 = 0xFFFFFFFF << 0 //+ CSR26
)

const (
	CSR26n = 0
)

const (
	CSR27 CSR27 = 0xFFFFFFFF << 0 //+ CSR27
)

const (
	CSR27n = 0
)

const (
	CSR28 CSR28 = 0xFFFFFFFF << 0 //+ CSR28
)

const (
	CSR28n = 0
)

const (
	CSR29 CSR29 = 0xFFFFFFFF << 0 //+ CSR29
)

const (
	CSR29n = 0
)

const (
	CSR30 CSR30 = 0xFFFFFFFF << 0 //+ CSR30
)

const (
	CSR30n = 0
)

const (
	CSR31 CSR31 = 0xFFFFFFFF << 0 //+ CSR31
)

const (
	CSR31n = 0
)

const (
	CSR32 CSR32 = 0xFFFFFFFF << 0 //+ CSR32
)

const (
	CSR32n = 0
)

const (
	CSR33 CSR33 = 0xFFFFFFFF << 0 //+ CSR33
)

const (
	CSR33n = 0
)

const (
	CSR34 CSR34 = 0xFFFFFFFF << 0 //+ CSR34
)

const (
	CSR34n = 0
)

const (
	CSR35 CSR35 = 0xFFFFFFFF << 0 //+ CSR35
)

const (
	CSR35n = 0
)

const (
	CSR36 CSR36 = 0xFFFFFFFF << 0 //+ CSR36
)

const (
	CSR36n = 0
)

const (
	CSR37 CSR37 = 0xFFFFFFFF << 0 //+ CSR37
)

const (
	CSR37n = 0
)

const (
	CSR38 CSR38 = 0xFFFFFFFF << 0 //+ CSR38
)

const (
	CSR38n = 0
)

const (
	CSR39 CSR39 = 0xFFFFFFFF << 0 //+ CSR39
)

const (
	CSR39n = 0
)

const (
	CSR40 CSR40 = 0xFFFFFFFF << 0 //+ CSR40
)

const (
	CSR40n = 0
)

const (
	CSR41 CSR41 = 0xFFFFFFFF << 0 //+ CSR41
)

const (
	CSR41n = 0
)

const (
	CSR42 CSR42 = 0xFFFFFFFF << 0 //+ CSR42
)

const (
	CSR42n = 0
)

const (
	CSR43 CSR43 = 0xFFFFFFFF << 0 //+ CSR43
)

const (
	CSR43n = 0
)

const (
	CSR44 CSR44 = 0xFFFFFFFF << 0 //+ CSR44
)

const (
	CSR44n = 0
)

const (
	CSR45 CSR45 = 0xFFFFFFFF << 0 //+ CSR45
)

const (
	CSR45n = 0
)

const (
	CSR46 CSR46 = 0xFFFFFFFF << 0 //+ CSR46
)

const (
	CSR46n = 0
)

const (
	CSR47 CSR47 = 0xFFFFFFFF << 0 //+ CSR47
)

const (
	CSR47n = 0
)

const (
	CSR48 CSR48 = 0xFFFFFFFF << 0 //+ CSR48
)

const (
	CSR48n = 0
)

const (
	CSR49 CSR49 = 0xFFFFFFFF << 0 //+ CSR49
)

const (
	CSR49n = 0
)

const (
	CSR50 CSR50 = 0xFFFFFFFF << 0 //+ CSR50
)

const (
	CSR50n = 0
)

const (
	CSR51 CSR51 = 0xFFFFFFFF << 0 //+ CSR51
)

const (
	CSR51n = 0
)

const (
	CSR52 CSR52 = 0xFFFFFFFF << 0 //+ CSR52
)

const (
	CSR52n = 0
)

const (
	CSR53 CSR53 = 0xFFFFFFFF << 0 //+ CSR53
)

const (
	CSR53n = 0
)

const (
	H0 HASH_HR0 = 0xFFFFFFFF << 0 //+ H0
)

const (
	H0n = 0
)

const (
	H1 HASH_HR1 = 0xFFFFFFFF << 0 //+ H1
)

const (
	H1n = 0
)

const (
	H2 HASH_HR2 = 0xFFFFFFFF << 0 //+ H2
)

const (
	H2n = 0
)

const (
	H3 HASH_HR3 = 0xFFFFFFFF << 0 //+ H3
)

const (
	H3n = 0
)

const (
	H4 HASH_HR4 = 0xFFFFFFFF << 0 //+ H4
)

const (
	H4n = 0
)

const (
	H5 HASH_HR5 = 0xFFFFFFFF << 0 //+ H5
)

const (
	H5n = 0
)

const (
	H6 HASH_HR6 = 0xFFFFFFFF << 0 //+ H6
)

const (
	H6n = 0
)

const (
	H7 HASH_HR7 = 0xFFFFFFFF << 0 //+ H7
)

const (
	H7n = 0
)
