// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32h7x3

// Package ethernet_dma provides access to the registers of the Ethernet_DMA peripheral.
//
// Instances:
//  Ethernet_DMA  Ethernet_DMA_BASE  -  -  Ethernet: DMA mode register (DMA)
// Registers:
//  0x000 32  DMAMR       DMA mode register
//  0x004 32  DMASBMR     System bus mode register
//  0x008 32  DMAISR      Interrupt status register
//  0x00C 32  DMADSR      Debug status register
//  0x100 32  DMACCR      Channel control register
//  0x104 32  DMACTxCR    Channel transmit control register
//  0x108 32  DMACRxCR    Channel receive control register
//  0x114 32  DMACTxDLAR  Channel Tx descriptor list address register
//  0x11C 32  DMACRxDLAR  Channel Rx descriptor list address register
//  0x120 32  DMACTxDTPR  Channel Tx descriptor tail pointer register
//  0x128 32  DMACRxDTPR  Channel Rx descriptor tail pointer register
//  0x12C 32  DMACTxRLR   Channel Tx descriptor ring length register
//  0x130 32  DMACRxRLR   Channel Rx descriptor ring length register
//  0x134 32  DMACIER     Channel interrupt enable register
//  0x138 32  DMACRxIWTR  Channel Rx interrupt watchdog timer register
//  0x144 32  DMACCATxDR  Channel current application transmit descriptor register
//  0x14C 32  DMACCARxDR  Channel current application receive descriptor register
//  0x154 32  DMACCATxBR  Channel current application transmit buffer register
//  0x15C 32  DMACCARxBR  Channel current application receive buffer register
//  0x160 32  DMACSR      Channel status register
//  0x16C 32  DMACMFCR    Channel missed frame count register
// Import:
//  github.com/embeddedgo/stm32/p/mmap
package ethernet_dma

const (
	SWR  DMAMR = 0x01 << 0  //+ Software Reset
	DA   DMAMR = 0x01 << 1  //+ DMA Tx or Rx Arbitration Scheme
	TXPR DMAMR = 0x01 << 11 //+ Transmit priority
	PR   DMAMR = 0x07 << 12 //+ Priority ratio
	INTM DMAMR = 0x01 << 16 //+ Interrupt Mode
)

const (
	SWRn  = 0
	DAn   = 1
	TXPRn = 11
	PRn   = 12
	INTMn = 16
)

const (
	FB  DMASBMR = 0x01 << 0  //+ Fixed Burst Length
	AAL DMASBMR = 0x01 << 12 //+ Address-Aligned Beats
	MB  DMASBMR = 0x01 << 14 //+ Mixed Burst
	RB  DMASBMR = 0x01 << 15 //+ Rebuild INCRx Burst
)

const (
	FBn  = 0
	AALn = 12
	MBn  = 14
	RBn  = 15
)

const (
	DC0IS DMAISR = 0x01 << 0  //+ DMA Channel Interrupt Status
	MTLIS DMAISR = 0x01 << 16 //+ MTL Interrupt Status
	MACIS DMAISR = 0x01 << 17 //+ MAC Interrupt Status
)

const (
	DC0ISn = 0
	MTLISn = 16
	MACISn = 17
)

const (
	AXWHSTS DMADSR = 0x01 << 0  //+ AHB Master Write Channel
	RPS0    DMADSR = 0x0F << 8  //+ DMA Channel Receive Process State
	TPS0    DMADSR = 0x0F << 12 //+ DMA Channel Transmit Process State
)

const (
	AXWHSTSn = 0
	RPS0n    = 8
	TPS0n    = 12
)

const (
	MSS   DMACCR = 0x3FFF << 0 //+ Maximum Segment Size
	PBLX8 DMACCR = 0x01 << 16  //+ 8xPBL mode
	DSL   DMACCR = 0x07 << 18  //+ Descriptor Skip Length
)

const (
	MSSn   = 0
	PBLX8n = 16
	DSLn   = 18
)

const (
	ST    DMACTxCR = 0x01 << 0  //+ Start or Stop Transmission Command
	OSF   DMACTxCR = 0x01 << 4  //+ Operate on Second Packet
	TSE   DMACTxCR = 0x01 << 12 //+ TCP Segmentation Enabled
	TXPBL DMACTxCR = 0x3F << 16 //+ Transmit Programmable Burst Length
)

const (
	STn    = 0
	OSFn   = 4
	TSEn   = 12
	TXPBLn = 16
)

const (
	SR    DMACRxCR = 0x01 << 0   //+ Start or Stop Receive Command
	RBSZ  DMACRxCR = 0x3FFF << 1 //+ Receive Buffer size
	RXPBL DMACRxCR = 0x3F << 16  //+ RXPBL
	RPF   DMACRxCR = 0x01 << 31  //+ DMA Rx Channel Packet Flush
)

const (
	SRn    = 0
	RBSZn  = 1
	RXPBLn = 16
	RPFn   = 31
)

const (
	TDESLA DMACTxDLAR = 0x3FFFFFFF << 2 //+ Start of Transmit List
)

const (
	TDESLAn = 2
)

const (
	RDESLA DMACRxDLAR = 0x3FFFFFFF << 2 //+ Start of Receive List
)

const (
	RDESLAn = 2
)

const (
	TDT DMACTxDTPR = 0x3FFFFFFF << 2 //+ Transmit Descriptor Tail Pointer
)

const (
	TDTn = 2
)

const (
	RDT DMACRxDTPR = 0x3FFFFFFF << 2 //+ Receive Descriptor Tail Pointer
)

const (
	RDTn = 2
)

const (
	TDRL DMACTxRLR = 0x3FF << 0 //+ Transmit Descriptor Ring Length
)

const (
	TDRLn = 0
)

const (
	RDRL DMACRxRLR = 0x3FF << 0 //+ Receive Descriptor Ring Length
)

const (
	RDRLn = 0
)

const (
	TIE  DMACIER = 0x01 << 0  //+ Transmit Interrupt Enable
	TXSE DMACIER = 0x01 << 1  //+ Transmit Stopped Enable
	TBUE DMACIER = 0x01 << 2  //+ Transmit Buffer Unavailable Enable
	RIE  DMACIER = 0x01 << 6  //+ Receive Interrupt Enable
	RBUE DMACIER = 0x01 << 7  //+ Receive Buffer Unavailable Enable
	RSE  DMACIER = 0x01 << 8  //+ Receive Stopped Enable
	RWTE DMACIER = 0x01 << 9  //+ Receive Watchdog Timeout Enable
	ETIE DMACIER = 0x01 << 10 //+ Early Transmit Interrupt Enable
	ERIE DMACIER = 0x01 << 11 //+ Early Receive Interrupt Enable
	FBEE DMACIER = 0x01 << 12 //+ Fatal Bus Error Enable
	CDEE DMACIER = 0x01 << 13 //+ Context Descriptor Error Enable
	AIE  DMACIER = 0x01 << 14 //+ Abnormal Interrupt Summary Enable
	NIE  DMACIER = 0x01 << 15 //+ Normal Interrupt Summary Enable
)

const (
	TIEn  = 0
	TXSEn = 1
	TBUEn = 2
	RIEn  = 6
	RBUEn = 7
	RSEn  = 8
	RWTEn = 9
	ETIEn = 10
	ERIEn = 11
	FBEEn = 12
	CDEEn = 13
	AIEn  = 14
	NIEn  = 15
)

const (
	RWT DMACRxIWTR = 0xFF << 0 //+ Receive Interrupt Watchdog Timer Count
)

const (
	RWTn = 0
)

const (
	CURTDESAPTR DMACCATxDR = 0xFFFFFFFF << 0 //+ Application Transmit Descriptor Address Pointer
)

const (
	CURTDESAPTRn = 0
)

const (
	CURRDESAPTR DMACCARxDR = 0xFFFFFFFF << 0 //+ Application Receive Descriptor Address Pointer
)

const (
	CURRDESAPTRn = 0
)

const (
	CURTBUFAPTR DMACCATxBR = 0xFFFFFFFF << 0 //+ Application Transmit Buffer Address Pointer
)

const (
	CURTBUFAPTRn = 0
)

const (
	CURRBUFAPTR DMACCARxBR = 0xFFFFFFFF << 0 //+ Application Receive Buffer Address Pointer
)

const (
	CURRBUFAPTRn = 0
)

const (
	TI  DMACSR = 0x01 << 0  //+ Transmit Interrupt
	TPS DMACSR = 0x01 << 1  //+ Transmit Process Stopped
	TBU DMACSR = 0x01 << 2  //+ Transmit Buffer Unavailable
	RI  DMACSR = 0x01 << 6  //+ Receive Interrupt
	RBU DMACSR = 0x01 << 7  //+ Receive Buffer Unavailable
	RPS DMACSR = 0x01 << 8  //+ Receive Process Stopped
	RWT DMACSR = 0x01 << 9  //+ Receive Watchdog Timeout
	ET  DMACSR = 0x01 << 10 //+ Early Transmit Interrupt
	ER  DMACSR = 0x01 << 11 //+ Early Receive Interrupt
	FBE DMACSR = 0x01 << 12 //+ Fatal Bus Error
	CDE DMACSR = 0x01 << 13 //+ Context Descriptor Error
	AIS DMACSR = 0x01 << 14 //+ Abnormal Interrupt Summary
	NIS DMACSR = 0x01 << 15 //+ Normal Interrupt Summary
	TEB DMACSR = 0x07 << 16 //+ Tx DMA Error Bits
	REB DMACSR = 0x07 << 19 //+ Rx DMA Error Bits
)

const (
	TIn  = 0
	TPSn = 1
	TBUn = 2
	RIn  = 6
	RBUn = 7
	RPSn = 8
	RWTn = 9
	ETn  = 10
	ERn  = 11
	FBEn = 12
	CDEn = 13
	AISn = 14
	NISn = 15
	TEBn = 16
	REBn = 19
)

const (
	MFC  DMACMFCR = 0x7FF << 0 //+ Dropped Packet Counters
	MFCO DMACMFCR = 0x01 << 15 //+ Overflow status of the MFC Counter
)

const (
	MFCn  = 0
	MFCOn = 15
)
