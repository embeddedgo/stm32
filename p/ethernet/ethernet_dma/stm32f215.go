// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32f215

// Package ethernet_dma provides access to the registers of the Ethernet_DMA peripheral.
//
// Instances:
//
//	Ethernet_DMA  Ethernet_DMA_BASE  -  -  Ethernet: DMA controller operation
//
// Registers:
//
//	0x000 32  DMABMR     Ethernet DMA bus mode register
//	0x004 32  DMATPDR    Ethernet DMA transmit poll demand register
//	0x008 32  DMARPDR    EHERNET DMA receive poll demand register
//	0x00C 32  DMARDLAR   Ethernet DMA receive descriptor list address register
//	0x010 32  DMATDLAR   Ethernet DMA transmit descriptor list address register
//	0x014 32  DMASR      Ethernet DMA status register
//	0x018 32  DMAOMR     Ethernet DMA operation mode register
//	0x01C 32  DMAIER     Ethernet DMA interrupt enable register
//	0x020 32  DMAMFBOCR  Ethernet DMA missed frame and buffer overflow counter register
//	0x024 32  DMARSWTR   Ethernet DMA receive status watchdog timer register
//	0x048 32  DMACHTDR   Ethernet DMA current host transmit descriptor register
//	0x04C 32  DMACHRDR   Ethernet DMA current host receive descriptor register
//	0x050 32  DMACHTBAR  Ethernet DMA current host transmit buffer address register
//	0x054 32  DMACHRBAR  Ethernet DMA current host receive buffer address register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package ethernet_dma

const (
	SR   DMABMR = 0x01 << 0  //+ Software reset
	DA   DMABMR = 0x01 << 1  //+ DMA Arbitration
	DSL  DMABMR = 0x1F << 2  //+ Descriptor skip length
	EDFE DMABMR = 0x01 << 7  //+ Enhanced descriptor format enable
	PBL  DMABMR = 0x3F << 8  //+ Programmable burst length
	RTPR DMABMR = 0x03 << 14 //+ Rx Tx priority ratio
	FB   DMABMR = 0x01 << 16 //+ Fixed burst
	RDP  DMABMR = 0x3F << 17 //+ Rx DMA PBL
	USP  DMABMR = 0x01 << 23 //+ Use separate PBL
	FPM  DMABMR = 0x01 << 24 //+ 4xPBL mode
	AAB  DMABMR = 0x01 << 25 //+ Address-aligned beats
	MB   DMABMR = 0x01 << 26 //+ Mixed burst
)

const (
	SRn   = 0
	DAn   = 1
	DSLn  = 2
	EDFEn = 7
	PBLn  = 8
	RTPRn = 14
	FBn   = 16
	RDPn  = 17
	USPn  = 23
	FPMn  = 24
	AABn  = 25
	MBn   = 26
)

const (
	TPD DMATPDR = 0xFFFFFFFF << 0 //+ Transmit poll demand
)

const (
	TPDn = 0
)

const (
	RPD DMARPDR = 0xFFFFFFFF << 0 //+ Receive poll demand
)

const (
	RPDn = 0
)

const (
	SRL DMARDLAR = 0xFFFFFFFF << 0 //+ Start of receive list
)

const (
	SRLn = 0
)

const (
	STL DMATDLAR = 0xFFFFFFFF << 0 //+ Start of transmit list
)

const (
	STLn = 0
)

const (
	TS   DMASR = 0x01 << 0  //+ Transmit status
	TPSS DMASR = 0x01 << 1  //+ Transmit process stopped status
	TBUS DMASR = 0x01 << 2  //+ Transmit buffer unavailable status
	TJTS DMASR = 0x01 << 3  //+ Transmit jabber timeout status
	ROS  DMASR = 0x01 << 4  //+ Receive overflow status
	TUS  DMASR = 0x01 << 5  //+ Transmit underflow status
	RS   DMASR = 0x01 << 6  //+ Receive status
	RBUS DMASR = 0x01 << 7  //+ Receive buffer unavailable status
	RPSS DMASR = 0x01 << 8  //+ Receive process stopped status
	PWTS DMASR = 0x01 << 9  //+ Receive watchdog timeout status
	ETS  DMASR = 0x01 << 10 //+ Early transmit status
	FBES DMASR = 0x01 << 13 //+ Fatal bus error status
	ERS  DMASR = 0x01 << 14 //+ Early receive status
	AIS  DMASR = 0x01 << 15 //+ Abnormal interrupt summary
	NIS  DMASR = 0x01 << 16 //+ Normal interrupt summary
	RPS  DMASR = 0x07 << 17 //+ Receive process state
	TPS  DMASR = 0x07 << 20 //+ Transmit process state
	EBS  DMASR = 0x07 << 23 //+ Error bits status
	MMCS DMASR = 0x01 << 27 //+ MMC status
	PMTS DMASR = 0x01 << 28 //+ PMT status
	TSTS DMASR = 0x01 << 29 //+ Time stamp trigger status
)

const (
	TSn   = 0
	TPSSn = 1
	TBUSn = 2
	TJTSn = 3
	ROSn  = 4
	TUSn  = 5
	RSn   = 6
	RBUSn = 7
	RPSSn = 8
	PWTSn = 9
	ETSn  = 10
	FBESn = 13
	ERSn  = 14
	AISn  = 15
	NISn  = 16
	RPSn  = 17
	TPSn  = 20
	EBSn  = 23
	MMCSn = 27
	PMTSn = 28
	TSTSn = 29
)

const (
	SR     DMAOMR = 0x01 << 1  //+ SR
	OSF    DMAOMR = 0x01 << 2  //+ OSF
	RTC    DMAOMR = 0x03 << 3  //+ RTC
	FUGF   DMAOMR = 0x01 << 6  //+ FUGF
	FEF    DMAOMR = 0x01 << 7  //+ FEF
	ST     DMAOMR = 0x01 << 13 //+ ST
	TTC    DMAOMR = 0x07 << 14 //+ TTC
	FTF    DMAOMR = 0x01 << 20 //+ FTF
	TSF    DMAOMR = 0x01 << 21 //+ TSF
	DFRF   DMAOMR = 0x01 << 24 //+ DFRF
	RSF    DMAOMR = 0x01 << 25 //+ RSF
	DTCEFD DMAOMR = 0x01 << 26 //+ DTCEFD
)

const (
	SRn     = 1
	OSFn    = 2
	RTCn    = 3
	FUGFn   = 6
	FEFn    = 7
	STn     = 13
	TTCn    = 14
	FTFn    = 20
	TSFn    = 21
	DFRFn   = 24
	RSFn    = 25
	DTCEFDn = 26
)

const (
	TIE   DMAIER = 0x01 << 0  //+ Transmit interrupt enable
	TPSIE DMAIER = 0x01 << 1  //+ Transmit process stopped interrupt enable
	TBUIE DMAIER = 0x01 << 2  //+ Transmit buffer unavailable interrupt enable
	TJTIE DMAIER = 0x01 << 3  //+ Transmit jabber timeout interrupt enable
	ROIE  DMAIER = 0x01 << 4  //+ Overflow interrupt enable
	TUIE  DMAIER = 0x01 << 5  //+ Underflow interrupt enable
	RIE   DMAIER = 0x01 << 6  //+ Receive interrupt enable
	RBUIE DMAIER = 0x01 << 7  //+ Receive buffer unavailable interrupt enable
	RPSIE DMAIER = 0x01 << 8  //+ Receive process stopped interrupt enable
	RWTIE DMAIER = 0x01 << 9  //+ receive watchdog timeout interrupt enable
	ETIE  DMAIER = 0x01 << 10 //+ Early transmit interrupt enable
	FBEIE DMAIER = 0x01 << 13 //+ Fatal bus error interrupt enable
	ERIE  DMAIER = 0x01 << 14 //+ Early receive interrupt enable
	AISE  DMAIER = 0x01 << 15 //+ Abnormal interrupt summary enable
	NISE  DMAIER = 0x01 << 16 //+ Normal interrupt summary enable
)

const (
	TIEn   = 0
	TPSIEn = 1
	TBUIEn = 2
	TJTIEn = 3
	ROIEn  = 4
	TUIEn  = 5
	RIEn   = 6
	RBUIEn = 7
	RPSIEn = 8
	RWTIEn = 9
	ETIEn  = 10
	FBEIEn = 13
	ERIEn  = 14
	AISEn  = 15
	NISEn  = 16
)

const (
	MFC  DMAMFBOCR = 0xFFFF << 0 //+ Missed frames by the controller
	OMFC DMAMFBOCR = 0x01 << 16  //+ Overflow bit for missed frame counter
	MFA  DMAMFBOCR = 0x7FF << 17 //+ Missed frames by the application
	OFOC DMAMFBOCR = 0x01 << 28  //+ Overflow bit for FIFO overflow counter
)

const (
	MFCn  = 0
	OMFCn = 16
	MFAn  = 17
	OFOCn = 28
)

const (
	RSWTC DMARSWTR = 0xFF << 0 //+ Receive status watchdog timer count
)

const (
	RSWTCn = 0
)

const (
	HTDAP DMACHTDR = 0xFFFFFFFF << 0 //+ Host transmit descriptor address pointer
)

const (
	HTDAPn = 0
)

const (
	HRDAP DMACHRDR = 0xFFFFFFFF << 0 //+ Host receive descriptor address pointer
)

const (
	HRDAPn = 0
)

const (
	HTBAP DMACHTBAR = 0xFFFFFFFF << 0 //+ Host transmit buffer address pointer
)

const (
	HTBAPn = 0
)

const (
	HRBAP DMACHRBAR = 0xFFFFFFFF << 0 //+ Host receive buffer address pointer
)

const (
	HRBAPn = 0
)
