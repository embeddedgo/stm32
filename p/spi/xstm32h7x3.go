// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32h7x3

package spi

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR1     mmio.R32[CR1]
	CR2     mmio.R32[CR2]
	CFG1    mmio.R32[CFG1]
	CFG2    mmio.R32[CFG2]
	IER     mmio.R32[SR]
	SR      mmio.R32[SR]
	IFCR    mmio.R32[SR]
	_       uint32
	TXDR    mmio.R32[uint32]
	_       [3]uint32
	RXDR    mmio.R32[uint32]
	_       [3]uint32
	CRCPOLY mmio.R32[uint32]
	TXCRC   mmio.R32[uint32]
	RXCRC   mmio.R32[uint32]
	UDRDR   mmio.R32[uint32]
	CGFR    mmio.R32[CGFR]
}

func SPI1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI1_BASE))) }
func SPI2() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI2_BASE))) }
func SPI3() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI3_BASE))) }
func SPI4() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI4_BASE))) }
func SPI5() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI5_BASE))) }
func SPI6() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.SPI6_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	switch p.BaseAddr() {
	default:
		return bus.APB2
	case mmap.SPI2_BASE, mmap.SPI3_BASE:
		return bus.APB1
	case mmap.SPI6_BASE:
		return bus.APB4
	}
}

type CR1 uint32

func SPE_(p *Periph) mmio.RM32[CR1]      { return mmio.RM32[CR1]{R: &p.CR1, Mask: SPE} }
func MASRX_(p *Periph) mmio.RM32[CR1]    { return mmio.RM32[CR1]{R: &p.CR1, Mask: MASRX} }
func CSTART_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{R: &p.CR1, Mask: CSTART} }
func CSUSP_(p *Periph) mmio.RM32[CR1]    { return mmio.RM32[CR1]{R: &p.CR1, Mask: CSUSP} }
func HDDIR_(p *Periph) mmio.RM32[CR1]    { return mmio.RM32[CR1]{R: &p.CR1, Mask: HDDIR} }
func SSI_(p *Periph) mmio.RM32[CR1]      { return mmio.RM32[CR1]{R: &p.CR1, Mask: SSI} }
func CRC33_17_(p *Periph) mmio.RM32[CR1] { return mmio.RM32[CR1]{R: &p.CR1, Mask: CRC33_17} }
func RCRCI_(p *Periph) mmio.RM32[CR1]    { return mmio.RM32[CR1]{R: &p.CR1, Mask: RCRCI} }
func TCRCI_(p *Periph) mmio.RM32[CR1]    { return mmio.RM32[CR1]{R: &p.CR1, Mask: TCRCI} }
func IOLOCK_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{R: &p.CR1, Mask: IOLOCK} }

type CR2 uint32

func TSIZE_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: TSIZE} }
func TSER_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: TSER} }

type CFG1 uint32

func DSIZE_(p *Periph) mmio.RM32[CFG1]   { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: DSIZE} }
func FTHVL_(p *Periph) mmio.RM32[CFG1]   { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: FTHVL} }
func UDRCFG_(p *Periph) mmio.RM32[CFG1]  { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: UDRCFG} }
func UDRDET_(p *Periph) mmio.RM32[CFG1]  { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: UDRDET} }
func RXDMAEN_(p *Periph) mmio.RM32[CFG1] { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: RXDMAEN} }
func TXDMAEN_(p *Periph) mmio.RM32[CFG1] { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: TXDMAEN} }
func CRCSIZE_(p *Periph) mmio.RM32[CFG1] { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: CRCSIZE} }
func CRCEN_(p *Periph) mmio.RM32[CFG1]   { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: CRCEN} }
func MBR_(p *Periph) mmio.RM32[CFG1]     { return mmio.RM32[CFG1]{R: &p.CFG1, Mask: MBR} }

type CFG2 uint32

func MSSI_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: MSSI} }
func MIDI_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: MIDI} }
func IOSWP_(p *Periph) mmio.RM32[CFG2]   { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: IOSWP} }
func COMM_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: COMM} }
func SP_(p *Periph) mmio.RM32[CFG2]      { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: SP} }
func MASTER_(p *Periph) mmio.RM32[CFG2]  { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: MASTER} }
func LSBFRST_(p *Periph) mmio.RM32[CFG2] { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: LSBFRST} }
func CPHA_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: CPHA} }
func CPOL_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: CPOL} }
func SSM_(p *Periph) mmio.RM32[CFG2]     { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: SSM} }
func SSIOP_(p *Periph) mmio.RM32[CFG2]   { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: SSIOP} }
func SSOE_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: SSOE} }
func SSOM_(p *Periph) mmio.RM32[CFG2]    { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: SSOM} }
func AFCNTR_(p *Periph) mmio.RM32[CFG2]  { return mmio.RM32[CFG2]{R: &p.CFG2, Mask: AFCNTR} }

type SR uint32

type CGFR uint32

func I2SMOD_(p *Periph) mmio.RM32[CGFR]  { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: I2SMOD} }
func I2SCFG_(p *Periph) mmio.RM32[CGFR]  { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: I2SCFG} }
func I2SSTD_(p *Periph) mmio.RM32[CGFR]  { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: I2SSTD} }
func PCMSYNC_(p *Periph) mmio.RM32[CGFR] { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: PCMSYNC} }
func DATLEN_(p *Periph) mmio.RM32[CGFR]  { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: DATLEN} }
func CHLEN_(p *Periph) mmio.RM32[CGFR]   { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: CHLEN} }
func CKPOL_(p *Periph) mmio.RM32[CGFR]   { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: CKPOL} }
func FIXCH_(p *Periph) mmio.RM32[CGFR]   { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: FIXCH} }
func WSINV_(p *Periph) mmio.RM32[CGFR]   { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: WSINV} }
func DATFMT_(p *Periph) mmio.RM32[CGFR]  { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: DATFMT} }
func I2SDIV_(p *Periph) mmio.RM32[CGFR]  { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: I2SDIV} }
func ODD_(p *Periph) mmio.RM32[CGFR]     { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: ODD} }
func MCKOE_(p *Periph) mmio.RM32[CGFR]   { return mmio.RM32[CGFR]{R: &p.CGFR, Mask: MCKOE} }
