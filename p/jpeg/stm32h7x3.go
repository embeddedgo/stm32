// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32h7x3

// Package jpeg provides access to the registers of the JPEG peripheral.
//
// Instances:
//  JPEG  JPEG_BASE  -  JPEG
// Registers:
//  0x000 32  CONFR0   JPEG codec control register
//  0x004 32  CONFR1   JPEG codec configuration register 1
//  0x008 32  CONFR2   JPEG codec configuration register 2
//  0x00C 32  CONFR3   JPEG codec configuration register 3
//  0x010 32  CONFRN1  JPEG codec configuration register 4-7
//  0x014 32  CONFRN2  JPEG codec configuration register 4-7
//  0x018 32  CONFRN3  JPEG codec configuration register 4-7
//  0x01C 32  CONFRN4  JPEG codec configuration register 4-7
//  0x030 32  CR       JPEG control register
//  0x034 32  SR       JPEG status register
//  0x038 32  CFR      JPEG clear flag register
//  0x040 32  DIR      JPEG data input register
//  0x044 32  DOR      JPEG data output register
// Import:
//  github.com/embeddedgo/stm32/p/mmap
package jpeg

const (
	START CONFR0 = 0x01 << 0 //+ Start This bit start or stop the encoding or decoding process. Read this register always return 0.
)

const (
	STARTn = 0
)

const (
	NF         CONFR1 = 0x03 << 0    //+ Number of color components This field defines the number of color components minus 1.
	DE         CONFR1 = 0x01 << 3    //+ Decoding Enable This bit selects the coding or decoding process
	COLORSPACE CONFR1 = 0x03 << 4    //+ Color Space This filed defines the number of quantization tables minus 1 to insert in the output stream.
	NS         CONFR1 = 0x03 << 6    //+ Number of components for Scan This field defines the number of components minus 1 for scan header marker segment.
	HDR        CONFR1 = 0x01 << 8    //+ Header Processing This bit enable the header processing (generation/parsing).
	YSIZE      CONFR1 = 0xFFFF << 16 //+ Y Size This field defines the number of lines in source image.
)

const (
	NFn         = 0
	DEn         = 3
	COLORSPACEn = 4
	NSn         = 6
	HDRn        = 8
	YSIZEn      = 16
)

const (
	NMCU CONFR2 = 0x3FFFFFF << 0 //+ Number of MCU For encoding: this field defines the number of MCU units minus 1 to encode. For decoding: this field indicates the number of complete MCU units minus 1 to be decoded (this field is updated after the JPEG header parsing). If the decoded image size has not a X or Y size multiple of 8 or 16 (depending on the sub-sampling process), the resulting incomplete or empty MCU must be added to this value to get the total number of MCU generated.
)

const (
	NMCUn = 0
)

const (
	XSIZE CONFR3 = 0xFFFF << 16 //+ X size This field defines the number of pixels per line.
)

const (
	XSIZEn = 16
)

const (
	HD  CONFRN1 = 0x01 << 0  //+ Huffman DC Selects the Huffman table for encoding the DC coefficients.
	HA  CONFRN1 = 0x01 << 1  //+ Huffman AC Selects the Huffman table for encoding the AC coefficients.
	QT  CONFRN1 = 0x03 << 2  //+ Quantization Table Selects quantization table associated with a color component.
	NB  CONFRN1 = 0x0F << 4  //+ Number of Block Number of data units minus 1 that belong to a particular color in the MCU.
	VSF CONFRN1 = 0x0F << 8  //+ Vertical Sampling Factor Vertical sampling factor for component i.
	HSF CONFRN1 = 0x0F << 12 //+ Horizontal Sampling Factor Horizontal sampling factor for component i.
)

const (
	HDn  = 0
	HAn  = 1
	QTn  = 2
	NBn  = 4
	VSFn = 8
	HSFn = 12
)

const (
	HD  CONFRN2 = 0x01 << 0  //+ Huffman DC Selects the Huffman table for encoding the DC coefficients.
	HA  CONFRN2 = 0x01 << 1  //+ Huffman AC Selects the Huffman table for encoding the AC coefficients.
	QT  CONFRN2 = 0x03 << 2  //+ Quantization Table Selects quantization table associated with a color component.
	NB  CONFRN2 = 0x0F << 4  //+ Number of Block Number of data units minus 1 that belong to a particular color in the MCU.
	VSF CONFRN2 = 0x0F << 8  //+ Vertical Sampling Factor Vertical sampling factor for component i.
	HSF CONFRN2 = 0x0F << 12 //+ Horizontal Sampling Factor Horizontal sampling factor for component i.
)

const (
	HDn  = 0
	HAn  = 1
	QTn  = 2
	NBn  = 4
	VSFn = 8
	HSFn = 12
)

const (
	HD  CONFRN3 = 0x01 << 0  //+ Huffman DC Selects the Huffman table for encoding the DC coefficients.
	HA  CONFRN3 = 0x01 << 1  //+ Huffman AC Selects the Huffman table for encoding the AC coefficients.
	QT  CONFRN3 = 0x03 << 2  //+ Quantization Table Selects quantization table associated with a color component.
	NB  CONFRN3 = 0x0F << 4  //+ Number of Block Number of data units minus 1 that belong to a particular color in the MCU.
	VSF CONFRN3 = 0x0F << 8  //+ Vertical Sampling Factor Vertical sampling factor for component i.
	HSF CONFRN3 = 0x0F << 12 //+ Horizontal Sampling Factor Horizontal sampling factor for component i.
)

const (
	HDn  = 0
	HAn  = 1
	QTn  = 2
	NBn  = 4
	VSFn = 8
	HSFn = 12
)

const (
	HD  CONFRN4 = 0x01 << 0  //+ Huffman DC Selects the Huffman table for encoding the DC coefficients.
	HA  CONFRN4 = 0x01 << 1  //+ Huffman AC Selects the Huffman table for encoding the AC coefficients.
	QT  CONFRN4 = 0x03 << 2  //+ Quantization Table Selects quantization table associated with a color component.
	NB  CONFRN4 = 0x0F << 4  //+ Number of Block Number of data units minus 1 that belong to a particular color in the MCU.
	VSF CONFRN4 = 0x0F << 8  //+ Vertical Sampling Factor Vertical sampling factor for component i.
	HSF CONFRN4 = 0x0F << 12 //+ Horizontal Sampling Factor Horizontal sampling factor for component i.
)

const (
	HDn  = 0
	HAn  = 1
	QTn  = 2
	NBn  = 4
	VSFn = 8
	HSFn = 12
)

const (
	JCEN   CR = 0x01 << 0  //+ JPEG Core Enable Enable the JPEG codec Core.
	IFTIE  CR = 0x01 << 1  //+ Input FIFO Threshold Interrupt Enable This bit enables the interrupt generation when input FIFO reach the threshold.
	IFNFIE CR = 0x01 << 2  //+ Input FIFO Not Full Interrupt Enable This bit enables the interrupt generation when input FIFO is not empty.
	OFTIE  CR = 0x01 << 3  //+ Output FIFO Threshold Interrupt Enable This bit enables the interrupt generation when output FIFO reach the threshold.
	OFNEIE CR = 0x01 << 4  //+ Output FIFO Not Empty Interrupt Enable This bit enables the interrupt generation when output FIFO is not empty.
	EOCIE  CR = 0x01 << 5  //+ End of Conversion Interrupt Enable This bit enables the interrupt generation on the end of conversion.
	HPDIE  CR = 0x01 << 6  //+ Header Parsing Done Interrupt Enable This bit enables the interrupt generation on the Header Parsing Operation.
	IDMAEN CR = 0x01 << 11 //+ Input DMA Enable Enable the DMA request generation for the input FIFO.
	ODMAEN CR = 0x01 << 12 //+ Output DMA Enable Enable the DMA request generation for the output FIFO.
	IFF    CR = 0x01 << 13 //+ Input FIFO Flush This bit flush the input FIFO. This bit is always read as 0.
	OFF    CR = 0x01 << 14 //+ Output FIFO Flush This bit flush the output FIFO. This bit is always read as 0.
)

const (
	JCENn   = 0
	IFTIEn  = 1
	IFNFIEn = 2
	OFTIEn  = 3
	OFNEIEn = 4
	EOCIEn  = 5
	HPDIEn  = 6
	IDMAENn = 11
	ODMAENn = 12
	IFFn    = 13
	OFFn    = 14
)

const (
	IFTF  SR = 0x01 << 1 //+ Input FIFO Threshold Flag This bit is set when the input FIFO is not full and is bellow its threshold.
	IFNFF SR = 0x01 << 2 //+ Input FIFO Not Full Flag This bit is set when the input FIFO is not full (a data can be written).
	OFTF  SR = 0x01 << 3 //+ Output FIFO Threshold Flag This bit is set when the output FIFO is not empty and has reach its threshold.
	OFNEF SR = 0x01 << 4 //+ Output FIFO Not Empty Flag This bit is set when the output FIFO is not empty (a data is available).
	EOCF  SR = 0x01 << 5 //+ End of Conversion Flag This bit is set when the JPEG codec core has finished the encoding or the decoding process and than last data has been sent to the output FIFO.
	HPDF  SR = 0x01 << 6 //+ Header Parsing Done Flag This bit is set in decode mode when the JPEG codec has finished the parsing of the headers and the internal registers have been updated.
	COF   SR = 0x01 << 7 //+ Codec Operation Flag This bit is set when when a JPEG codec operation is on going (encoding or decoding).
)

const (
	IFTFn  = 1
	IFNFFn = 2
	OFTFn  = 3
	OFNEFn = 4
	EOCFn  = 5
	HPDFn  = 6
	COFn   = 7
)

const (
	CEOCF CFR = 0x01 << 5 //+ Clear End of Conversion Flag Writing 1 clears the End of Conversion Flag of the JPEG Status Register.
	CHPDF CFR = 0x01 << 6 //+ Clear Header Parsing Done Flag Writing 1 clears the Header Parsing Done Flag of the JPEG Status Register.
)

const (
	CEOCFn = 5
	CHPDFn = 6
)

const (
	DATAIN DIR = 0xFFFFFFFF << 0 //+ Data Input FIFO Input FIFO data register.
)

const (
	DATAINn = 0
)

const (
	DATAOUT DOR = 0xFFFFFFFF << 0 //+ Data Output FIFO Output FIFO data register.
)

const (
	DATAOUTn = 0
)
