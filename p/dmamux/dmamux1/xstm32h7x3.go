// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32h7x3

package dmamux1

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CCR   [16]mmio.R32[CCR]
	_     [16]uint32
	CSR   mmio.R32[CSR]
	CFR   mmio.R32[CSR]
	_     [30]uint32
	RGCR  [8]mmio.R32[RGCR]
	_     [8]uint32
	RGSR  mmio.R32[RGSR]
	RGCFR mmio.R32[RGSR]
}

func DMAMUX1() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.DMAMUX1_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CCR uint32

func DMAREQ_ID_(p *Periph, i int) mmio.RM32[CCR] { return mmio.RM32[CCR]{&p.CCR[i], DMAREQ_ID} }
func SOIE_(p *Periph, i int) mmio.RM32[CCR]      { return mmio.RM32[CCR]{&p.CCR[i], SOIE} }
func EGE_(p *Periph, i int) mmio.RM32[CCR]       { return mmio.RM32[CCR]{&p.CCR[i], EGE} }
func SE_(p *Periph, i int) mmio.RM32[CCR]        { return mmio.RM32[CCR]{&p.CCR[i], SE} }
func SPOL_(p *Periph, i int) mmio.RM32[CCR]      { return mmio.RM32[CCR]{&p.CCR[i], SPOL} }
func NBREQ_(p *Periph, i int) mmio.RM32[CCR]     { return mmio.RM32[CCR]{&p.CCR[i], NBREQ} }
func SYNC_ID_(p *Periph, i int) mmio.RM32[CCR]   { return mmio.RM32[CCR]{&p.CCR[i], SYNC_ID} }

type CSR uint32

func SOF0_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF0} }
func SOF1_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF1} }
func SOF2_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF2} }
func SOF3_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF3} }
func SOF4_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF4} }
func SOF5_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF5} }
func SOF6_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF6} }
func SOF7_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF7} }
func SOF8_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF8} }
func SOF9_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SOF9} }
func SOF10_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, SOF10} }
func SOF11_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, SOF11} }
func SOF12_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, SOF12} }
func SOF13_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, SOF13} }
func SOF14_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, SOF14} }
func SOF15_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, SOF15} }

type RGCR uint32

func SIG_ID_(p *Periph, i int) mmio.RM32[RGCR] { return mmio.RM32[RGCR]{&p.RGCR[i], SIG_ID} }
func OIE_(p *Periph, i int) mmio.RM32[RGCR]    { return mmio.RM32[RGCR]{&p.RGCR[i], OIE} }
func GE_(p *Periph, i int) mmio.RM32[RGCR]     { return mmio.RM32[RGCR]{&p.RGCR[i], GE} }
func GPOL_(p *Periph, i int) mmio.RM32[RGCR]   { return mmio.RM32[RGCR]{&p.RGCR[i], GPOL} }
func GNBREQ_(p *Periph, i int) mmio.RM32[RGCR] { return mmio.RM32[RGCR]{&p.RGCR[i], GNBREQ} }

type RGSR uint32

func OF0_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF0} }
func OF1_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF1} }
func OF2_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF2} }
func OF3_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF3} }
func OF4_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF4} }
func OF5_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF5} }
func OF6_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF6} }
func OF7_(p *Periph) mmio.RM32[RGSR] { return mmio.RM32[RGSR]{&p.RGSR, OF7} }
