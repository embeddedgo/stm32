// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32g471xx

// Package dmamux provides access to the registers of the DMAMUX peripheral.
//
// Instances:
//
//	DMAMUX  DMAMUX_BASE  AHB1  DMAMUX_OVR
//
// Registers:
//
//	0x000 32  CCR[16]      DMAMux - DMA request line multiplexer channel x control register
//	0x080 32  CSR          DMAMUX request line multiplexer interrupt channel status register
//	0x084 32  CFR(CSR)     DMAMUX request line multiplexer interrupt clear flag register
//	0x100 32  RGCR[8]      DMAMux - DMA request generator channel x control register
//	0x140 32  RGSR         DMAMux - DMA request generator status register
//	0x144 32  RGCFR(RGSR)  DMAMux - DMA request generator clear flag register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/bus
//	github.com/embeddedgo/stm32/p/mmap
package dmamux

const (
	DMAREQ_ID    CCR = 0x7F << 0  //+ Input DMA request line selected
	SOIE         CCR = 0x01 << 8  //+ Interrupt enable at synchronization event overrun
	EGE          CCR = 0x01 << 9  //+ Event generation enable/disable
	SE           CCR = 0x01 << 16 //+ Synchronous operating mode enable/disable
	SPOL         CCR = 0x03 << 17 //+ Synchronization event type selector Defines the synchronization event on the selected synchronization input:
	SPOL_NONE    CCR = 0x00 << 17 //  No event, i.e. no synchronization nor detection.
	SPOL_RISING  CCR = 0x01 << 17 //  Rising edge
	SPOL_FALLING CCR = 0x02 << 17 //  Falling edge
	SPOL_BOTH    CCR = 0x03 << 17 //  Rising and falling edges
	NBREQ        CCR = 0x1F << 19 //+ Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset.
	SYNC_ID      CCR = 0x1F << 24 //+ Synchronization input selected
)

const (
	DMAREQ_IDn = 0
	SOIEn      = 8
	EGEn       = 9
	SEn        = 16
	SPOLn      = 17
	NBREQn     = 19
	SYNC_IDn   = 24
)

const (
	SOF CSR = 0xFFFF << 0 //+ Synchronization overrun event flag
)

const (
	SOFn = 0
)

const (
	SIG_ID       RGCR = 0x1F << 0  //+ DMA request trigger input selected
	OIE          RGCR = 0x01 << 8  //+ Interrupt enable at trigger event overrun
	GE           RGCR = 0x01 << 16 //+ DMA request generator channel enable/disable
	GPOL         RGCR = 0x03 << 17 //+ DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input
	GPOL_NONE    RGCR = 0x00 << 17 //  No event, i.e. no synchronization nor detection.
	GPOL_RISING  RGCR = 0x01 << 17 //  Rising edge
	GPOL_FALLING RGCR = 0x02 << 17 //  Falling edge
	GPOL_BOTH    RGCR = 0x03 << 17 //  Rising and falling edges
	GNBREQ       RGCR = 0x1F << 19 //+ Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset.
)

const (
	SIG_IDn = 0
	OIEn    = 8
	GEn     = 16
	GPOLn   = 17
	GNBREQn = 19
)

const (
	OF RGSR = 0x0F << 0 //+ Trigger event overrun flag The flag is set when a trigger event occurs on DMA request generator channel x, while the DMA request generator counter value is lower than GNBREQ. The flag is cleared by writing 1 to the corresponding COFx bit in DMAMUX_RGCFR register.
)

const (
	OFn = 0
)
