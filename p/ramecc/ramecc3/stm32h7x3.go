// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32h7x3

// Package ramecc3 provides access to the registers of the RAMECC peripheral.
//
// Instances:
//
//	RAMECC3  RAMECC3_BASE  -  -  ECC controller is associated to each RAM area
//
// Registers:
//
//	0x000 32  IER     RAMECC interrupt enable register
//	0x020 32  M1CR    RAMECC monitor x configuration register
//	0x024 32  M1SR    RAMECC monitor x status register
//	0x028 32  M1FAR   RAMECC monitor x failing address register
//	0x02C 32  M1FDRL  RAMECC monitor x failing data low register
//	0x030 32  M1FDRH  RAMECC monitor x failing data high register
//	0x034 32  M1FECR  RAMECC monitor x failing ECC error code register
//	0x040 32  M2CR    RAMECC monitor x configuration register
//	0x044 32  M2SR    RAMECC monitor x status register
//	0x048 32  M2FAR   RAMECC monitor x failing address register
//	0x04C 32  M2FDRL  RAMECC monitor x failing data low register
//	0x050 32  M2FDRH  RAMECC monitor x failing data high register
//	0x058 32  M2FECR  RAMECC monitor x failing ECC error code register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package ramecc3

const (
	GIE        IER = 0x01 << 0 //+ Global interrupt enable
	GECCSEIE_  IER = 0x01 << 1 //+ Global ECC single error interrupt enable
	GECCDEIE   IER = 0x01 << 2 //+ Global ECC double error interrupt enable
	GECCDEBWIE IER = 0x01 << 3 //+ Global ECC double error on byte write (BW) interrupt enable
)

const (
	GIEn        = 0
	GECCSEIE_n  = 1
	GECCDEIEn   = 2
	GECCDEBWIEn = 3
)

const (
	ECCSEIE   M1CR = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M1CR = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M1CR = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M1CR = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	SEDCF  M1SR = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M1SR = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M1SR = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	FADD M1FAR = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FDATAL M1FDRL = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAH M1FDRH = 0xFFFFFFFF << 0 //+ Failing data high (64-bit memory)
)

const (
	FDATAHn = 0
)

const (
	FEC M1FECR = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)

const (
	ECCSEIE   M2CR = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M2CR = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M2CR = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M2CR = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	SEDCF  M2SR = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M2SR = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M2SR = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	FADD M2FAR = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FDATAL M2FDRL = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAH M2FDRH = 0xFFFFFFFF << 0 //+ Failing data high (64-bit memory)
)

const (
	FDATAHn = 0
)

const (
	FEC M2FECR = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)
