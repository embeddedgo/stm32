// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32h7x3

// Package ramecc1 provides access to the registers of the RAMECC peripheral.
//
// Instances:
//
//	RAMECC1  RAMECC1_BASE  -  -  ECC controller is associated to each RAM area
//
// Registers:
//
//	0x000 32  IER     RAMECC interrupt enable register
//	0x020 32  M1CR    RAMECC monitor x configuration register
//	0x024 32  M1SR    RAMECC monitor x status register
//	0x028 32  M1FAR   RAMECC monitor x failing address register
//	0x02C 32  M1FDRL  RAMECC monitor x failing data low register
//	0x030 32  M1FDRH  RAMECC monitor x failing data high register
//	0x034 32  M1FECR  RAMECC monitor x failing ECC error code register
//	0x040 32  M2CR    RAMECC monitor x configuration register
//	0x044 32  M2SR    RAMECC monitor x status register
//	0x048 32  M2FAR   RAMECC monitor x failing address register
//	0x04C 32  M2FDRL  RAMECC monitor x failing data low register
//	0x050 32  M2FDRH  RAMECC monitor x failing data high register
//	0x058 32  M2FECR  RAMECC monitor x failing ECC error code register
//	0x060 32  M3CR    RAMECC monitor x configuration register
//	0x064 32  M3SR    RAMECC monitor x status register
//	0x068 32  M3FAR   RAMECC monitor x failing address register
//	0x06C 32  M3FDRL  RAMECC monitor x failing data low register
//	0x070 32  M3FDRH  RAMECC monitor x failing data high register
//	0x07C 32  M3FECR  RAMECC monitor x failing ECC error code register
//	0x080 32  M4CR    RAMECC monitor x configuration register
//	0x084 32  M4SR    RAMECC monitor x status register
//	0x088 32  M4FAR   RAMECC monitor x failing address register
//	0x08C 32  M4FDRL  RAMECC monitor x failing data low register
//	0x090 32  M4FDRH  RAMECC monitor x failing data high register
//	0x090 32  M4FECR  RAMECC monitor x failing ECC error code register
//	0x0A0 32  M5CR    RAMECC monitor x configuration register
//	0x0A4 32  M5SR    RAMECC monitor x status register
//	0x0A8 32  M5FAR   RAMECC monitor x failing address register
//	0x0AC 32  M5FDRL  RAMECC monitor x failing data low register
//	0x0B0 32  M5FDRH  RAMECC monitor x failing data high register
//	0x0B4 32  M5FECR  RAMECC monitor x failing ECC error code register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package ramecc1

const (
	GIE        IER = 0x01 << 0 //+ Global interrupt enable
	GECCSEIE_  IER = 0x01 << 1 //+ Global ECC single error interrupt enable
	GECCDEIE   IER = 0x01 << 2 //+ Global ECC double error interrupt enable
	GECCDEBWIE IER = 0x01 << 3 //+ Global ECC double error on byte write (BW) interrupt enable
)

const (
	GIEn        = 0
	GECCSEIE_n  = 1
	GECCDEIEn   = 2
	GECCDEBWIEn = 3
)

const (
	ECCSEIE   M1CR = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M1CR = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M1CR = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M1CR = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	ECCSEIE   M1SR = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M1SR = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M1SR = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M1SR = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	ECCSEIE   M1FAR = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M1FAR = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M1FAR = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M1FAR = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	ECCSEIE   M1FDRL = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M1FDRL = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M1FDRL = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M1FDRL = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	ECCSEIE   M1FDRH = 0x01 << 2 //+ ECC single error interrupt enable
	ECCDEIE   M1FDRH = 0x01 << 3 //+ ECC double error interrupt enable
	ECCDEBWIE M1FDRH = 0x01 << 4 //+ ECC double error on byte write (BW) interrupt enable
	ECCELEN   M1FDRH = 0x01 << 5 //+ ECC error latching enable
)

const (
	ECCSEIEn   = 2
	ECCDEIEn   = 3
	ECCDEBWIEn = 4
	ECCELENn   = 5
)

const (
	SEDCF  M1FECR = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M1FECR = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M1FECR = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	SEDCF  M2CR = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M2CR = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M2CR = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	SEDCF  M2SR = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M2SR = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M2SR = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	SEDCF  M2FAR = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M2FAR = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M2FAR = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	SEDCF  M2FDRL = 0x01 << 0 //+ ECC single error detected and corrected flag
	DEDF   M2FDRL = 0x01 << 1 //+ ECC double error detected flag
	DEBWDF M2FDRL = 0x01 << 2 //+ ECC double error on byte write (BW) detected flag
)

const (
	SEDCFn  = 0
	DEDFn   = 1
	DEBWDFn = 2
)

const (
	FADD M2FDRH = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FADD M2FECR = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FADD M3CR = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FADD M3SR = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FADD M3FAR = 0xFFFFFFFF << 0 //+ ECC error failing address
)

const (
	FADDn = 0
)

const (
	FDATAL M3FDRL = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAL M3FDRH = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAL M3FECR = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAL M4CR = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAL M4SR = 0xFFFFFFFF << 0 //+ Failing data low
)

const (
	FDATALn = 0
)

const (
	FDATAH M4FAR = 0xFFFFFFFF << 0 //+ Failing data high (64-bit memory)
)

const (
	FDATAHn = 0
)

const (
	FDATAH M4FDRL = 0xFFFFFFFF << 0 //+ Failing data high (64-bit memory)
)

const (
	FDATAHn = 0
)

const (
	FDATAH M4FDRH = 0xFFFFFFFF << 0 //+ Failing data high (64-bit memory)
)

const (
	FDATAHn = 0
)

const (
	FDATAH M4FECR = 0xFFFFFFFF << 0 //+ Failing data high (64-bit memory)
)

const (
	FDATAHn = 0
)

const (
	FEC M5CR = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)

const (
	FEC M5SR = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)

const (
	FEC M5FAR = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)

const (
	FEC M5FDRL = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)

const (
	FEC M5FDRH = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)

const (
	FEC M5FECR = 0xFFFFFFFF << 0 //+ Failing error code
)

const (
	FECn = 0
)
