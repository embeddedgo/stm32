// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build stm32g471xx

// Package comp provides access to the registers of the COMP peripheral.
//
// Instances:
//  COMP  COMP_BASE  -  COMP1_2_3,COMP4  Comparator control and status register
// Registers:
//  0x000 32  COMP_C1CSR  Comparator control/status register
//  0x004 32  COMP_C2CSR  Comparator control/status register
//  0x008 32  COMP_C3CSR  Comparator control/status register
//  0x012 32  COMP_C4CSR  Comparator control/status register
// Import:
//  github.com/embeddedgo/stm32/p/mmap
package comp

const (
	EN               COMP_C1CSR = 0x01 << 0  //+ EN
	COMP_DEGLITCH_EN COMP_C1CSR = 0x01 << 1  //+ COMP_DEGLITCH_EN
	INMSEL           COMP_C1CSR = 0x07 << 4  //+ INMSEL
	INPSEL           COMP_C1CSR = 0x01 << 8  //+ INPSEL
	POL              COMP_C1CSR = 0x01 << 15 //+ POL
	HYST             COMP_C1CSR = 0x07 << 16 //+ HYST
	BLANKSEL         COMP_C1CSR = 0x07 << 19 //+ BLANKSEL
	BRGEN            COMP_C1CSR = 0x01 << 22 //+ BRGEN
	SCALEN           COMP_C1CSR = 0x01 << 23 //+ SCALEN
	VALUE            COMP_C1CSR = 0x01 << 30 //+ VALUE
	LOCK             COMP_C1CSR = 0x01 << 31 //+ LOCK
)

const (
	ENn               = 0
	COMP_DEGLITCH_ENn = 1
	INMSELn           = 4
	INPSELn           = 8
	POLn              = 15
	HYSTn             = 16
	BLANKSELn         = 19
	BRGENn            = 22
	SCALENn           = 23
	VALUEn            = 30
	LOCKn             = 31
)

const (
	EN               COMP_C2CSR = 0x01 << 0  //+ EN
	COMP_DEGLITCH_EN COMP_C2CSR = 0x01 << 1  //+ COMP_DEGLITCH_EN
	INMSEL           COMP_C2CSR = 0x07 << 4  //+ INMSEL
	INPSEL           COMP_C2CSR = 0x01 << 8  //+ INPSEL
	POL              COMP_C2CSR = 0x01 << 15 //+ POL
	HYST             COMP_C2CSR = 0x07 << 16 //+ HYST
	BLANKSEL         COMP_C2CSR = 0x07 << 19 //+ BLANKSEL
	BRGEN            COMP_C2CSR = 0x01 << 22 //+ BRGEN
	SCALEN           COMP_C2CSR = 0x01 << 23 //+ SCALEN
	VALUE            COMP_C2CSR = 0x01 << 30 //+ VALUE
	LOCK             COMP_C2CSR = 0x01 << 31 //+ LOCK
)

const (
	ENn               = 0
	COMP_DEGLITCH_ENn = 1
	INMSELn           = 4
	INPSELn           = 8
	POLn              = 15
	HYSTn             = 16
	BLANKSELn         = 19
	BRGENn            = 22
	SCALENn           = 23
	VALUEn            = 30
	LOCKn             = 31
)

const (
	EN               COMP_C3CSR = 0x01 << 0  //+ EN
	COMP_DEGLITCH_EN COMP_C3CSR = 0x01 << 1  //+ COMP_DEGLITCH_EN
	INMSEL           COMP_C3CSR = 0x07 << 4  //+ INMSEL
	INPSEL           COMP_C3CSR = 0x01 << 8  //+ INPSEL
	POL              COMP_C3CSR = 0x01 << 15 //+ POL
	HYST             COMP_C3CSR = 0x07 << 16 //+ HYST
	BLANKSEL         COMP_C3CSR = 0x07 << 19 //+ BLANKSEL
	BRGEN            COMP_C3CSR = 0x01 << 22 //+ BRGEN
	SCALEN           COMP_C3CSR = 0x01 << 23 //+ SCALEN
	VALUE            COMP_C3CSR = 0x01 << 30 //+ VALUE
	LOCK             COMP_C3CSR = 0x01 << 31 //+ LOCK
)

const (
	ENn               = 0
	COMP_DEGLITCH_ENn = 1
	INMSELn           = 4
	INPSELn           = 8
	POLn              = 15
	HYSTn             = 16
	BLANKSELn         = 19
	BRGENn            = 22
	SCALENn           = 23
	VALUEn            = 30
	LOCKn             = 31
)

const (
	EN               COMP_C4CSR = 0x01 << 0  //+ EN
	COMP_DEGLITCH_EN COMP_C4CSR = 0x01 << 1  //+ COMP_DEGLITCH_EN
	INMSEL           COMP_C4CSR = 0x07 << 4  //+ INMSEL
	INPSEL           COMP_C4CSR = 0x01 << 8  //+ INPSEL
	POL              COMP_C4CSR = 0x01 << 15 //+ POL
	HYST             COMP_C4CSR = 0x07 << 16 //+ HYST
	BLANKSEL         COMP_C4CSR = 0x07 << 19 //+ BLANKSEL
	BRGEN            COMP_C4CSR = 0x01 << 22 //+ BRGEN
	SCALEN           COMP_C4CSR = 0x01 << 23 //+ SCALEN
	VALUE            COMP_C4CSR = 0x01 << 30 //+ VALUE
	LOCK             COMP_C4CSR = 0x01 << 31 //+ LOCK
)

const (
	ENn               = 0
	COMP_DEGLITCH_ENn = 1
	INMSELn           = 4
	INPSELn           = 8
	POLn              = 15
	HYSTn             = 16
	BLANKSELn         = 19
	BRGENn            = 22
	SCALENn           = 23
	VALUEn            = 30
	LOCKn             = 31
)
