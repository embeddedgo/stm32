// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32f215

package pwr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR  mmio.R32[CR]
	CSR mmio.R32[CSR]
}

func PWR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PWR_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB1
}

type CR uint32

func LPDS_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, LPDS} }
func PDDS_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, PDDS} }
func CWUF_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, CWUF} }
func CSBF_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, CSBF} }
func PVDE_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, PVDE} }
func PLS_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, PLS} }
func DBP_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, DBP} }
func FPDS_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, FPDS} }

type CSR uint32

func WUF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, WUF} }
func SBF_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, SBF} }
func PVDO_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, PVDO} }
func BRR_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, BRR} }
func EWUP_(p *Periph) mmio.RM32[CSR] { return mmio.RM32[CSR]{&p.CSR, EWUP} }
func BRE_(p *Periph) mmio.RM32[CSR]  { return mmio.RM32[CSR]{&p.CSR, BRE} }
