// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32g471xx

package pwr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR1  mmio.R32[CR1]
	CR2  mmio.R32[CR2]
	CR3  mmio.R32[CR3]
	CR4  mmio.R32[CR4]
	SR1  mmio.R32[SR1]
	SR2  mmio.R32[SR2]
	SCR  mmio.R32[SCR]
	_    uint32
	PUDC [7]SPUDC
	_    [10]uint32
	CR5  mmio.R32[CR5]
}

func PWR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PWR_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	return bus.APB1
}

type CR1 uint32

func LPMS_(p *Periph) mmio.RM32[CR1] { return mmio.RM32[CR1]{R: &p.CR1, Mask: LPMS} }
func DBP_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: DBP} }
func VOS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: VOS} }
func LPR_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: LPR} }

type CR2 uint32

func PVDE_(p *Periph) mmio.RM32[CR2]   { return mmio.RM32[CR2]{R: &p.CR2, Mask: PVDE} }
func PLS_(p *Periph) mmio.RM32[CR2]    { return mmio.RM32[CR2]{R: &p.CR2, Mask: PLS} }
func PVMEN1_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: PVMEN1} }
func PVMEN2_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: PVMEN2} }
func PVMEN3_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: PVMEN3} }
func PVMEN4_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: PVMEN4} }

type CR3 uint32

func EWUP1_(p *Periph) mmio.RM32[CR3]       { return mmio.RM32[CR3]{R: &p.CR3, Mask: EWUP1} }
func EWUP2_(p *Periph) mmio.RM32[CR3]       { return mmio.RM32[CR3]{R: &p.CR3, Mask: EWUP2} }
func EWUP3_(p *Periph) mmio.RM32[CR3]       { return mmio.RM32[CR3]{R: &p.CR3, Mask: EWUP3} }
func EWUP4_(p *Periph) mmio.RM32[CR3]       { return mmio.RM32[CR3]{R: &p.CR3, Mask: EWUP4} }
func EWUP5_(p *Periph) mmio.RM32[CR3]       { return mmio.RM32[CR3]{R: &p.CR3, Mask: EWUP5} }
func RRS_(p *Periph) mmio.RM32[CR3]         { return mmio.RM32[CR3]{R: &p.CR3, Mask: RRS} }
func APC_(p *Periph) mmio.RM32[CR3]         { return mmio.RM32[CR3]{R: &p.CR3, Mask: APC} }
func UCPD1_STDBY_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{R: &p.CR3, Mask: UCPD1_STDBY} }
func UCPD1_DBDIS_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{R: &p.CR3, Mask: UCPD1_DBDIS} }
func EIWUL_(p *Periph) mmio.RM32[CR3]       { return mmio.RM32[CR3]{R: &p.CR3, Mask: EIWUL} }

type CR4 uint32

func WP1_(p *Periph) mmio.RM32[CR4]  { return mmio.RM32[CR4]{R: &p.CR4, Mask: WP1} }
func WP2_(p *Periph) mmio.RM32[CR4]  { return mmio.RM32[CR4]{R: &p.CR4, Mask: WP2} }
func WP3_(p *Periph) mmio.RM32[CR4]  { return mmio.RM32[CR4]{R: &p.CR4, Mask: WP3} }
func WP4_(p *Periph) mmio.RM32[CR4]  { return mmio.RM32[CR4]{R: &p.CR4, Mask: WP4} }
func WP5_(p *Periph) mmio.RM32[CR4]  { return mmio.RM32[CR4]{R: &p.CR4, Mask: WP5} }
func VBE_(p *Periph) mmio.RM32[CR4]  { return mmio.RM32[CR4]{R: &p.CR4, Mask: VBE} }
func VBRS_(p *Periph) mmio.RM32[CR4] { return mmio.RM32[CR4]{R: &p.CR4, Mask: VBRS} }

type SR1 uint32

func WUF1_(p *Periph) mmio.RM32[SR1] { return mmio.RM32[SR1]{R: &p.SR1, Mask: WUF1} }
func WUF2_(p *Periph) mmio.RM32[SR1] { return mmio.RM32[SR1]{R: &p.SR1, Mask: WUF2} }
func WUF3_(p *Periph) mmio.RM32[SR1] { return mmio.RM32[SR1]{R: &p.SR1, Mask: WUF3} }
func WUF4_(p *Periph) mmio.RM32[SR1] { return mmio.RM32[SR1]{R: &p.SR1, Mask: WUF4} }
func WUF5_(p *Periph) mmio.RM32[SR1] { return mmio.RM32[SR1]{R: &p.SR1, Mask: WUF5} }
func SBF_(p *Periph) mmio.RM32[SR1]  { return mmio.RM32[SR1]{R: &p.SR1, Mask: SBF} }
func WUFI_(p *Periph) mmio.RM32[SR1] { return mmio.RM32[SR1]{R: &p.SR1, Mask: WUFI} }

type SR2 uint32

func REGLPS_(p *Periph) mmio.RM32[SR2] { return mmio.RM32[SR2]{R: &p.SR2, Mask: REGLPS} }
func REGLPF_(p *Periph) mmio.RM32[SR2] { return mmio.RM32[SR2]{R: &p.SR2, Mask: REGLPF} }
func VOSF_(p *Periph) mmio.RM32[SR2]   { return mmio.RM32[SR2]{R: &p.SR2, Mask: VOSF} }
func PVDO_(p *Periph) mmio.RM32[SR2]   { return mmio.RM32[SR2]{R: &p.SR2, Mask: PVDO} }
func PVMO1_(p *Periph) mmio.RM32[SR2]  { return mmio.RM32[SR2]{R: &p.SR2, Mask: PVMO1} }
func PVMO2_(p *Periph) mmio.RM32[SR2]  { return mmio.RM32[SR2]{R: &p.SR2, Mask: PVMO2} }
func PVMO3_(p *Periph) mmio.RM32[SR2]  { return mmio.RM32[SR2]{R: &p.SR2, Mask: PVMO3} }
func PVMO4_(p *Periph) mmio.RM32[SR2]  { return mmio.RM32[SR2]{R: &p.SR2, Mask: PVMO4} }

type SCR uint32

func CWUF1_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: CWUF1} }
func CWUF2_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: CWUF2} }
func CWUF3_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: CWUF3} }
func CWUF4_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: CWUF4} }
func CWUF5_(p *Periph) mmio.RM32[SCR] { return mmio.RM32[SCR]{R: &p.SCR, Mask: CWUF5} }
func CSBF_(p *Periph) mmio.RM32[SCR]  { return mmio.RM32[SCR]{R: &p.SCR, Mask: CSBF} }

type SPUDC struct {
	PUCR mmio.R32[PUCR]
	PDCR mmio.R32[PDCR]
}

type PUCR uint32

func PU0_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU0} }
func PU1_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU1} }
func PU2_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU2} }
func PU3_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU3} }
func PU4_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU4} }
func PU5_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU5} }
func PU6_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU6} }
func PU7_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU7} }
func PU8_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU8} }
func PU9_(p *Periph, i int) mmio.RM32[PUCR]  { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU9} }
func PU10_(p *Periph, i int) mmio.RM32[PUCR] { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU10} }
func PU11_(p *Periph, i int) mmio.RM32[PUCR] { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU11} }
func PU12_(p *Periph, i int) mmio.RM32[PUCR] { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU12} }
func PU13_(p *Periph, i int) mmio.RM32[PUCR] { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU13} }
func PU15_(p *Periph, i int) mmio.RM32[PUCR] { return mmio.RM32[PUCR]{R: &p.PUDC[i].PUCR, Mask: PU15} }

type PDCR uint32

func PD0_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD0} }
func PD1_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD1} }
func PD2_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD2} }
func PD3_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD3} }
func PD4_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD4} }
func PD5_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD5} }
func PD6_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD6} }
func PD7_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD7} }
func PD8_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD8} }
func PD9_(p *Periph, i int) mmio.RM32[PDCR]  { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD9} }
func PD10_(p *Periph, i int) mmio.RM32[PDCR] { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD10} }
func PD11_(p *Periph, i int) mmio.RM32[PDCR] { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD11} }
func PD12_(p *Periph, i int) mmio.RM32[PDCR] { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD12} }
func PD14_(p *Periph, i int) mmio.RM32[PDCR] { return mmio.RM32[PDCR]{R: &p.PUDC[i].PDCR, Mask: PD14} }

type CR5 uint32

func R1MODE_(p *Periph) mmio.RM32[CR5] { return mmio.RM32[CR5]{R: &p.CR5, Mask: R1MODE} }
