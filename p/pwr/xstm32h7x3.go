// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32h7x3

package pwr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR1     mmio.R32[CR1]
	CSR1    mmio.R32[CSR1]
	CR2     mmio.R32[CR2]
	CR3     mmio.R32[CR3]
	CPUCR   mmio.R32[CPUCR]
	_       uint32
	D3CR    mmio.R32[D3CR]
	_       uint32
	WKUPCR  mmio.R32[WKUPCR]
	WKUPFR  mmio.R32[WKUPFR]
	WKUPEPR mmio.R32[WKUPEPR]
}

func PWR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PWR_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR1 uint32

func LPDS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: LPDS} }
func PVDE_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: PVDE} }
func PLS_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{R: &p.CR1, Mask: PLS} }
func DBP_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{R: &p.CR1, Mask: DBP} }
func FLPS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: FLPS} }
func SVOS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: SVOS} }
func AVDEN_(p *Periph) mmio.RM32[CR1] { return mmio.RM32[CR1]{R: &p.CR1, Mask: AVDEN} }
func ALS_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{R: &p.CR1, Mask: ALS} }

type CSR1 uint32

func PVDO_(p *Periph) mmio.RM32[CSR1]      { return mmio.RM32[CSR1]{R: &p.CSR1, Mask: PVDO} }
func ACTVOSRDY_(p *Periph) mmio.RM32[CSR1] { return mmio.RM32[CSR1]{R: &p.CSR1, Mask: ACTVOSRDY} }
func ACTVOS_(p *Periph) mmio.RM32[CSR1]    { return mmio.RM32[CSR1]{R: &p.CSR1, Mask: ACTVOS} }
func AVDO_(p *Periph) mmio.RM32[CSR1]      { return mmio.RM32[CSR1]{R: &p.CSR1, Mask: AVDO} }

type CR2 uint32

func BREN_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: BREN} }
func MONEN_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: MONEN} }
func BRRDY_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: BRRDY} }
func VBATL_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: VBATL} }
func VBATH_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: VBATH} }
func TEMPL_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: TEMPL} }
func TEMPH_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: TEMPH} }

type CR3 uint32

func BYPASS_(p *Periph) mmio.RM32[CR3]   { return mmio.RM32[CR3]{R: &p.CR3, Mask: BYPASS} }
func LDOEN_(p *Periph) mmio.RM32[CR3]    { return mmio.RM32[CR3]{R: &p.CR3, Mask: LDOEN} }
func SCUEN_(p *Periph) mmio.RM32[CR3]    { return mmio.RM32[CR3]{R: &p.CR3, Mask: SCUEN} }
func VBE_(p *Periph) mmio.RM32[CR3]      { return mmio.RM32[CR3]{R: &p.CR3, Mask: VBE} }
func VBRS_(p *Periph) mmio.RM32[CR3]     { return mmio.RM32[CR3]{R: &p.CR3, Mask: VBRS} }
func USB33DEN_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{R: &p.CR3, Mask: USB33DEN} }
func USBREGEN_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{R: &p.CR3, Mask: USBREGEN} }
func USB33RDY_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{R: &p.CR3, Mask: USB33RDY} }

type CPUCR uint32

func PDDS_D1_(p *Periph) mmio.RM32[CPUCR] { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: PDDS_D1} }
func PDDS_D2_(p *Periph) mmio.RM32[CPUCR] { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: PDDS_D2} }
func PDDS_D3_(p *Periph) mmio.RM32[CPUCR] { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: PDDS_D3} }
func STOPF_(p *Periph) mmio.RM32[CPUCR]   { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: STOPF} }
func SBF_(p *Periph) mmio.RM32[CPUCR]     { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: SBF} }
func SBF_D1_(p *Periph) mmio.RM32[CPUCR]  { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: SBF_D1} }
func SBF_D2_(p *Periph) mmio.RM32[CPUCR]  { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: SBF_D2} }
func CSSF_(p *Periph) mmio.RM32[CPUCR]    { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: CSSF} }
func RUN_D3_(p *Periph) mmio.RM32[CPUCR]  { return mmio.RM32[CPUCR]{R: &p.CPUCR, Mask: RUN_D3} }

type D3CR uint32

func VOSRDY_(p *Periph) mmio.RM32[D3CR] { return mmio.RM32[D3CR]{R: &p.D3CR, Mask: VOSRDY} }
func VOS_(p *Periph) mmio.RM32[D3CR]    { return mmio.RM32[D3CR]{R: &p.D3CR, Mask: VOS} }

type WKUPCR uint32

func WKUPC_(p *Periph) mmio.RM32[WKUPCR] { return mmio.RM32[WKUPCR]{R: &p.WKUPCR, Mask: WKUPC} }

type WKUPFR uint32

func WKUPF1_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{R: &p.WKUPFR, Mask: WKUPF1} }
func WKUPF2_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{R: &p.WKUPFR, Mask: WKUPF2} }
func WKUPF3_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{R: &p.WKUPFR, Mask: WKUPF3} }
func WKUPF4_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{R: &p.WKUPFR, Mask: WKUPF4} }
func WKUPF5_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{R: &p.WKUPFR, Mask: WKUPF5} }
func WKUPF6_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{R: &p.WKUPFR, Mask: WKUPF6} }

type WKUPEPR uint32

func WKUPEN1_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPEN1} }
func WKUPEN2_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPEN2} }
func WKUPEN3_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPEN3} }
func WKUPEN4_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPEN4} }
func WKUPEN5_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPEN5} }
func WKUPEN6_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPEN6} }
func WKUPP1_(p *Periph) mmio.RM32[WKUPEPR]  { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPP1} }
func WKUPP2_(p *Periph) mmio.RM32[WKUPEPR]  { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPP2} }
func WKUPP3_(p *Periph) mmio.RM32[WKUPEPR]  { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPP3} }
func WKUPP4_(p *Periph) mmio.RM32[WKUPEPR]  { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPP4} }
func WKUPP5_(p *Periph) mmio.RM32[WKUPEPR]  { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPP5} }
func WKUPP6_(p *Periph) mmio.RM32[WKUPEPR]  { return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPP6} }
func WKUPPUPD1_(p *Periph) mmio.RM32[WKUPEPR] {
	return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPPUPD1}
}
func WKUPPUPD2_(p *Periph) mmio.RM32[WKUPEPR] {
	return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPPUPD2}
}
func WKUPPUPD3_(p *Periph) mmio.RM32[WKUPEPR] {
	return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPPUPD3}
}
func WKUPPUPD4_(p *Periph) mmio.RM32[WKUPEPR] {
	return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPPUPD4}
}
func WKUPPUPD5_(p *Periph) mmio.RM32[WKUPEPR] {
	return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPPUPD5}
}
func WKUPPUPD6_(p *Periph) mmio.RM32[WKUPEPR] {
	return mmio.RM32[WKUPEPR]{R: &p.WKUPEPR, Mask: WKUPPUPD6}
}
