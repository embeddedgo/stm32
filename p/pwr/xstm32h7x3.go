// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32h7x3

package pwr

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR1     mmio.R32[CR1]
	CSR1    mmio.R32[CSR1]
	CR2     mmio.R32[CR2]
	CR3     mmio.R32[CR3]
	CPUCR   mmio.R32[CPUCR]
	_       uint32
	D3CR    mmio.R32[D3CR]
	_       uint32
	WKUPCR  mmio.R32[WKUPCR]
	WKUPFR  mmio.R32[WKUPFR]
	WKUPEPR mmio.R32[WKUPEPR]
}

func PWR() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.PWR_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CR1 uint32

func LPDS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{&p.CR1, LPDS} }
func PVDE_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{&p.CR1, PVDE} }
func PLS_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{&p.CR1, PLS} }
func DBP_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{&p.CR1, DBP} }
func FLPS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{&p.CR1, FLPS} }
func SVOS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{&p.CR1, SVOS} }
func AVDEN_(p *Periph) mmio.RM32[CR1] { return mmio.RM32[CR1]{&p.CR1, AVDEN} }
func ALS_(p *Periph) mmio.RM32[CR1]   { return mmio.RM32[CR1]{&p.CR1, ALS} }

type CSR1 uint32

func PVDO_(p *Periph) mmio.RM32[CSR1]      { return mmio.RM32[CSR1]{&p.CSR1, PVDO} }
func ACTVOSRDY_(p *Periph) mmio.RM32[CSR1] { return mmio.RM32[CSR1]{&p.CSR1, ACTVOSRDY} }
func ACTVOS_(p *Periph) mmio.RM32[CSR1]    { return mmio.RM32[CSR1]{&p.CSR1, ACTVOS} }
func AVDO_(p *Periph) mmio.RM32[CSR1]      { return mmio.RM32[CSR1]{&p.CSR1, AVDO} }

type CR2 uint32

func BREN_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{&p.CR2, BREN} }
func MONEN_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{&p.CR2, MONEN} }
func BRRDY_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{&p.CR2, BRRDY} }
func VBATL_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{&p.CR2, VBATL} }
func VBATH_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{&p.CR2, VBATH} }
func TEMPL_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{&p.CR2, TEMPL} }
func TEMPH_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{&p.CR2, TEMPH} }

type CR3 uint32

func BYPASS_(p *Periph) mmio.RM32[CR3]   { return mmio.RM32[CR3]{&p.CR3, BYPASS} }
func LDOEN_(p *Periph) mmio.RM32[CR3]    { return mmio.RM32[CR3]{&p.CR3, LDOEN} }
func SCUEN_(p *Periph) mmio.RM32[CR3]    { return mmio.RM32[CR3]{&p.CR3, SCUEN} }
func VBE_(p *Periph) mmio.RM32[CR3]      { return mmio.RM32[CR3]{&p.CR3, VBE} }
func VBRS_(p *Periph) mmio.RM32[CR3]     { return mmio.RM32[CR3]{&p.CR3, VBRS} }
func USB33DEN_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{&p.CR3, USB33DEN} }
func USBREGEN_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{&p.CR3, USBREGEN} }
func USB33RDY_(p *Periph) mmio.RM32[CR3] { return mmio.RM32[CR3]{&p.CR3, USB33RDY} }

type CPUCR uint32

func PDDS_D1_(p *Periph) mmio.RM32[CPUCR] { return mmio.RM32[CPUCR]{&p.CPUCR, PDDS_D1} }
func PDDS_D2_(p *Periph) mmio.RM32[CPUCR] { return mmio.RM32[CPUCR]{&p.CPUCR, PDDS_D2} }
func PDDS_D3_(p *Periph) mmio.RM32[CPUCR] { return mmio.RM32[CPUCR]{&p.CPUCR, PDDS_D3} }
func STOPF_(p *Periph) mmio.RM32[CPUCR]   { return mmio.RM32[CPUCR]{&p.CPUCR, STOPF} }
func SBF_(p *Periph) mmio.RM32[CPUCR]     { return mmio.RM32[CPUCR]{&p.CPUCR, SBF} }
func SBF_D1_(p *Periph) mmio.RM32[CPUCR]  { return mmio.RM32[CPUCR]{&p.CPUCR, SBF_D1} }
func SBF_D2_(p *Periph) mmio.RM32[CPUCR]  { return mmio.RM32[CPUCR]{&p.CPUCR, SBF_D2} }
func CSSF_(p *Periph) mmio.RM32[CPUCR]    { return mmio.RM32[CPUCR]{&p.CPUCR, CSSF} }
func RUN_D3_(p *Periph) mmio.RM32[CPUCR]  { return mmio.RM32[CPUCR]{&p.CPUCR, RUN_D3} }

type D3CR uint32

func VOSRDY_(p *Periph) mmio.RM32[D3CR] { return mmio.RM32[D3CR]{&p.D3CR, VOSRDY} }
func VOS_(p *Periph) mmio.RM32[D3CR]    { return mmio.RM32[D3CR]{&p.D3CR, VOS} }

type WKUPCR uint32

func WKUPC_(p *Periph) mmio.RM32[WKUPCR] { return mmio.RM32[WKUPCR]{&p.WKUPCR, WKUPC} }

type WKUPFR uint32

func WKUPF1_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{&p.WKUPFR, WKUPF1} }
func WKUPF2_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{&p.WKUPFR, WKUPF2} }
func WKUPF3_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{&p.WKUPFR, WKUPF3} }
func WKUPF4_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{&p.WKUPFR, WKUPF4} }
func WKUPF5_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{&p.WKUPFR, WKUPF5} }
func WKUPF6_(p *Periph) mmio.RM32[WKUPFR] { return mmio.RM32[WKUPFR]{&p.WKUPFR, WKUPF6} }

type WKUPEPR uint32

func WKUPEN1_(p *Periph) mmio.RM32[WKUPEPR]   { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPEN1} }
func WKUPEN2_(p *Periph) mmio.RM32[WKUPEPR]   { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPEN2} }
func WKUPEN3_(p *Periph) mmio.RM32[WKUPEPR]   { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPEN3} }
func WKUPEN4_(p *Periph) mmio.RM32[WKUPEPR]   { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPEN4} }
func WKUPEN5_(p *Periph) mmio.RM32[WKUPEPR]   { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPEN5} }
func WKUPEN6_(p *Periph) mmio.RM32[WKUPEPR]   { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPEN6} }
func WKUPP1_(p *Periph) mmio.RM32[WKUPEPR]    { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPP1} }
func WKUPP2_(p *Periph) mmio.RM32[WKUPEPR]    { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPP2} }
func WKUPP3_(p *Periph) mmio.RM32[WKUPEPR]    { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPP3} }
func WKUPP4_(p *Periph) mmio.RM32[WKUPEPR]    { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPP4} }
func WKUPP5_(p *Periph) mmio.RM32[WKUPEPR]    { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPP5} }
func WKUPP6_(p *Periph) mmio.RM32[WKUPEPR]    { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPP6} }
func WKUPPUPD1_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPPUPD1} }
func WKUPPUPD2_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPPUPD2} }
func WKUPPUPD3_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPPUPD3} }
func WKUPPUPD4_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPPUPD4} }
func WKUPPUPD5_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPPUPD5} }
func WKUPPUPD6_(p *Periph) mmio.RM32[WKUPEPR] { return mmio.RM32[WKUPEPR]{&p.WKUPEPR, WKUPPUPD6} }
