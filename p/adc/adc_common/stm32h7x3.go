// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32h7x3

// Package adc_common provides access to the registers of the ADC3_Common peripheral.
//
// Instances:
//
//	ADC12_Common  ADC12_Common_BASE  -  ADC1_2  Analog-to-Digital Converter
//	ADC3_Common   ADC3_Common_BASE   -  -       Analog-to-Digital Converter
//
// Registers:
//
//	0x000 32  CSR   ADC Common status register
//	0x008 32  CCR   ADC common control register
//	0x00C 32  CDR   ADC common regular data register for dual and triple modes
//	0x010 32  CDR2  ADC x common regular data register for 32-bit dual mode
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package adc_common

const (
	ADRDY_MST CSR = 0x01 << 0  //+ Master ADC ready
	EOSMP_MST CSR = 0x01 << 1  //+ End of Sampling phase flag of the master ADC
	EOC_MST   CSR = 0x01 << 2  //+ End of regular conversion of the master ADC
	EOS_MST   CSR = 0x01 << 3  //+ End of regular sequence flag of the master ADC
	OVR_MST   CSR = 0x01 << 4  //+ Overrun flag of the master ADC
	JEOC_MST  CSR = 0x01 << 5  //+ End of injected conversion flag of the master ADC
	JEOS_MST  CSR = 0x01 << 6  //+ End of injected sequence flag of the master ADC
	AWD1_MST  CSR = 0x01 << 7  //+ Analog watchdog 1 flag of the master ADC
	AWD2_MST  CSR = 0x01 << 8  //+ Analog watchdog 2 flag of the master ADC
	AWD3_MST  CSR = 0x01 << 9  //+ Analog watchdog 3 flag of the master ADC
	JQOVF_MST CSR = 0x01 << 10 //+ Injected Context Queue Overflow flag of the master ADC
	ADRDY_SLV CSR = 0x01 << 16 //+ Slave ADC ready
	EOSMP_SLV CSR = 0x01 << 17 //+ End of Sampling phase flag of the slave ADC
	EOC_SLV   CSR = 0x01 << 18 //+ End of regular conversion of the slave ADC
	EOS_SLV   CSR = 0x01 << 19 //+ End of regular sequence flag of the slave ADC
	OVR_SLV   CSR = 0x01 << 20 //+ Overrun flag of the slave ADC
	JEOC_SLV  CSR = 0x01 << 21 //+ End of injected conversion flag of the slave ADC
	JEOS_SLV  CSR = 0x01 << 22 //+ End of injected sequence flag of the slave ADC
	AWD1_SLV  CSR = 0x01 << 23 //+ Analog watchdog 1 flag of the slave ADC
	AWD2_SLV  CSR = 0x01 << 24 //+ Analog watchdog 2 flag of the slave ADC
	AWD3_SLV  CSR = 0x01 << 25 //+ Analog watchdog 3 flag of the slave ADC
	JQOVF_SLV CSR = 0x01 << 26 //+ Injected Context Queue Overflow flag of the slave ADC
)

const (
	ADRDY_MSTn = 0
	EOSMP_MSTn = 1
	EOC_MSTn   = 2
	EOS_MSTn   = 3
	OVR_MSTn   = 4
	JEOC_MSTn  = 5
	JEOS_MSTn  = 6
	AWD1_MSTn  = 7
	AWD2_MSTn  = 8
	AWD3_MSTn  = 9
	JQOVF_MSTn = 10
	ADRDY_SLVn = 16
	EOSMP_SLVn = 17
	EOC_SLVn   = 18
	EOS_SLVn   = 19
	OVR_SLVn   = 20
	JEOC_SLVn  = 21
	JEOS_SLVn  = 22
	AWD1_SLVn  = 23
	AWD2_SLVn  = 24
	AWD3_SLVn  = 25
	JQOVF_SLVn = 26
)

const (
	DUAL     CCR = 0x1F << 0  //+ Dual ADC mode selection
	DELAY    CCR = 0x0F << 8  //+ Delay between 2 sampling phases
	DAMDF    CCR = 0x03 << 14 //+ Dual ADC Mode Data Format
	CKMODE   CCR = 0x03 << 16 //+ ADC clock mode
	PRESC    CCR = 0x0F << 18 //+ ADC prescaler
	VREFEN   CCR = 0x01 << 22 //+ VREFINT enable
	VSENSEEN CCR = 0x01 << 23 //+ Temperature sensor enable
	VBATEN   CCR = 0x01 << 24 //+ VBAT enable
)

const (
	DUALn     = 0
	DELAYn    = 8
	DAMDFn    = 14
	CKMODEn   = 16
	PRESCn    = 18
	VREFENn   = 22
	VSENSEENn = 23
	VBATENn   = 24
)

const (
	RDATA_MST CDR = 0xFFFF << 0  //+ Regular data of the master ADC
	RDATA_SLV CDR = 0xFFFF << 16 //+ Regular data of the slave ADC
)

const (
	RDATA_MSTn = 0
	RDATA_SLVn = 16
)

const (
	RDATA_ALT CDR2 = 0xFFFFFFFF << 0 //+ Regular data of the master/slave alternated ADCs
)

const (
	RDATA_ALTn = 0
)
