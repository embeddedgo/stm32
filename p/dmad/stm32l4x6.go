// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build stm32l4x6

// Package dmad provides access to the registers of the DMA2D peripheral.
//
// Instances:
//  DMA2D  DMA2D_BASE  AHB1  DMA2D  DMA2D controller
// Registers:
//  0x000 32  CR       control register
//  0x004 32  ISR      Interrupt Status Register
//  0x008 32  IFCR     interrupt flag clear register
//  0x00C 32  FGMAR    foreground memory address register
//  0x010 32  FGOR     foreground offset register
//  0x014 32  BGMAR    background memory address register
//  0x018 32  BGOR     background offset register
//  0x01C 32  FGPFCCR  foreground PFC control register
//  0x020 32  FGCOLR   foreground color register
//  0x024 32  BGPFCCR  background PFC control register
//  0x028 32  BGCOLR   background color register
//  0x02C 32  FGCMAR   foreground CLUT memory address register
//  0x030 32  BGCMAR   background CLUT memory address register
//  0x034 32  OPFCCR   output PFC control register
//  0x038 32  OCOLR    output color register
//  0x03C 32  OMAR     output memory address register
//  0x040 32  OOR      output offset register
//  0x044 32  NLR      number of line register
//  0x048 32  LWR      line watermark register
//  0x04C 32  AMTCR    AHB master timer configuration register
//  0x400 32  FGCLUT   FGCLUT
//  0x800 32  BGCLUT   BGCLUT
// Import:
//  github.com/embeddedgo/stm32/p/bus
//  github.com/embeddedgo/stm32/p/mmap
package dmad

const (
	START CR = 0x01 << 0  //+ Start
	SUSP  CR = 0x01 << 1  //+ Suspend
	ABORT CR = 0x01 << 2  //+ Abort
	TEIE  CR = 0x01 << 8  //+ Transfer error interrupt enable
	TCIE  CR = 0x01 << 9  //+ Transfer complete interrupt enable
	TWIE  CR = 0x01 << 10 //+ Transfer watermark interrupt enable
	CAEIE CR = 0x01 << 11 //+ CLUT access error interrupt enable
	CTCIE CR = 0x01 << 12 //+ CLUT transfer complete interrupt enable
	CEIE  CR = 0x01 << 13 //+ Configuration Error Interrupt Enable
	MODE  CR = 0x03 << 16 //+ DMA2D mode
)

const (
	STARTn = 0
	SUSPn  = 1
	ABORTn = 2
	TEIEn  = 8
	TCIEn  = 9
	TWIEn  = 10
	CAEIEn = 11
	CTCIEn = 12
	CEIEn  = 13
	MODEn  = 16
)

const (
	TEIF  ISR = 0x01 << 0 //+ Transfer error interrupt flag
	TCIF  ISR = 0x01 << 1 //+ Transfer complete interrupt flag
	TWIF  ISR = 0x01 << 2 //+ Transfer watermark interrupt flag
	CAEIF ISR = 0x01 << 3 //+ CLUT access error interrupt flag
	CTCIF ISR = 0x01 << 4 //+ CLUT transfer complete interrupt flag
	CEIF  ISR = 0x01 << 5 //+ Configuration error interrupt flag
)

const (
	TEIFn  = 0
	TCIFn  = 1
	TWIFn  = 2
	CAEIFn = 3
	CTCIFn = 4
	CEIFn  = 5
)

const (
	CTEIF  IFCR = 0x01 << 0 //+ Clear Transfer error interrupt flag
	CTCIF  IFCR = 0x01 << 1 //+ Clear transfer complete interrupt flag
	CTWIF  IFCR = 0x01 << 2 //+ Clear transfer watermark interrupt flag
	CAECIF IFCR = 0x01 << 3 //+ Clear CLUT access error interrupt flag
	CCTCIF IFCR = 0x01 << 4 //+ Clear CLUT transfer complete interrupt flag
	CCEIF  IFCR = 0x01 << 5 //+ Clear configuration error interrupt flag
)

const (
	CTEIFn  = 0
	CTCIFn  = 1
	CTWIFn  = 2
	CAECIFn = 3
	CCTCIFn = 4
	CCEIFn  = 5
)

const (
	MA FGMAR = 0xFFFFFFFF << 0 //+ Memory address
)

const (
	MAn = 0
)

const (
	LO FGOR = 0x3FFF << 0 //+ Line offset
)

const (
	LOn = 0
)

const (
	MA BGMAR = 0xFFFFFFFF << 0 //+ Memory address
)

const (
	MAn = 0
)

const (
	LO BGOR = 0x3FFF << 0 //+ Line offset
)

const (
	LOn = 0
)

const (
	CM    FGPFCCR = 0x0F << 0  //+ Color mode
	CCM   FGPFCCR = 0x01 << 4  //+ CLUT color mode
	START FGPFCCR = 0x01 << 5  //+ Start
	CS    FGPFCCR = 0xFF << 8  //+ CLUT size
	AM    FGPFCCR = 0x03 << 16 //+ Alpha mode
	AI    FGPFCCR = 0x01 << 20 //+ Alpha Inverted
	RBS   FGPFCCR = 0x01 << 21 //+ Red Blue Swap
	ALPHA FGPFCCR = 0xFF << 24 //+ Alpha value
)

const (
	CMn    = 0
	CCMn   = 4
	STARTn = 5
	CSn    = 8
	AMn    = 16
	AIn    = 20
	RBSn   = 21
	ALPHAn = 24
)

const (
	BLUE  FGCOLR = 0xFF << 0  //+ Blue Value
	GREEN FGCOLR = 0xFF << 8  //+ Green Value
	RED   FGCOLR = 0xFF << 16 //+ Red Value
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
)

const (
	CM    BGPFCCR = 0x0F << 0  //+ Color mode
	CCM   BGPFCCR = 0x01 << 4  //+ CLUT Color mode
	START BGPFCCR = 0x01 << 5  //+ Start
	CS    BGPFCCR = 0xFF << 8  //+ CLUT size
	AM    BGPFCCR = 0x03 << 16 //+ Alpha mode
	AI    BGPFCCR = 0x01 << 20 //+ Alpha Inverted
	RBS   BGPFCCR = 0x01 << 21 //+ Red Blue Swap
	ALPHA BGPFCCR = 0xFF << 24 //+ Alpha value
)

const (
	CMn    = 0
	CCMn   = 4
	STARTn = 5
	CSn    = 8
	AMn    = 16
	AIn    = 20
	RBSn   = 21
	ALPHAn = 24
)

const (
	BLUE  BGCOLR = 0xFF << 0  //+ Blue Value
	GREEN BGCOLR = 0xFF << 8  //+ Green Value
	RED   BGCOLR = 0xFF << 16 //+ Red Value
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
)

const (
	MA FGCMAR = 0xFFFFFFFF << 0 //+ Memory Address
)

const (
	MAn = 0
)

const (
	MA BGCMAR = 0xFFFFFFFF << 0 //+ Memory address
)

const (
	MAn = 0
)

const (
	CM  OPFCCR = 0x07 << 0  //+ Color mode
	AI  OPFCCR = 0x01 << 20 //+ Alpha Inverted
	RBS OPFCCR = 0x01 << 21 //+ Red Blue Swap
)

const (
	CMn  = 0
	AIn  = 20
	RBSn = 21
)

const (
	BLUE  OCOLR = 0xFF << 0  //+ Blue Value
	GREEN OCOLR = 0xFF << 8  //+ Green Value
	RED   OCOLR = 0xFF << 16 //+ Red Value
	APLHA OCOLR = 0xFF << 24 //+ Alpha Channel Value
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
	APLHAn = 24
)

const (
	MA OMAR = 0xFFFFFFFF << 0 //+ Memory Address
)

const (
	MAn = 0
)

const (
	LO OOR = 0x3FFF << 0 //+ Line Offset
)

const (
	LOn = 0
)

const (
	NL NLR = 0xFFFF << 0  //+ Number of lines
	PL NLR = 0x3FFF << 16 //+ Pixel per lines
)

const (
	NLn = 0
	PLn = 16
)

const (
	LW LWR = 0xFFFF << 0 //+ Line watermark
)

const (
	LWn = 0
)

const (
	EN AMTCR = 0x01 << 0 //+ Enable
	DT AMTCR = 0xFF << 8 //+ Dead Time
)

const (
	ENn = 0
	DTn = 8
)

const (
	BLUE  FGCLUT = 0xFF << 0  //+ BLUE
	GREEN FGCLUT = 0xFF << 8  //+ GREEN
	RED   FGCLUT = 0xFF << 16 //+ RED
	APLHA FGCLUT = 0xFF << 24 //+ APLHA
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
	APLHAn = 24
)

const (
	BLUE  BGCLUT = 0xFF << 0  //+ BLUE
	GREEN BGCLUT = 0xFF << 8  //+ GREEN
	RED   BGCLUT = 0xFF << 16 //+ RED
	APLHA BGCLUT = 0xFF << 24 //+ APLHA
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
	APLHAn = 24
)
