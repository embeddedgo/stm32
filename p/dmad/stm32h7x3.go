// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32h7x3

// Package dmad provides access to the registers of the DMA2D peripheral.
//
// Instances:
//  DMA2D  DMA2D_BASE  AHB3  DMA2D  DMA2D
// Registers:
//  0x000 32  CR       DMA2D control register
//  0x004 32  ISR      DMA2D Interrupt Status Register
//  0x008 32  IFCR     DMA2D interrupt flag clear register
//  0x00C 32  FGMAR    DMA2D foreground memory address register
//  0x010 32  FGOR     DMA2D foreground offset register
//  0x014 32  BGMAR    DMA2D background memory address register
//  0x018 32  BGOR     DMA2D background offset register
//  0x01C 32  FGPFCCR  DMA2D foreground PFC control register
//  0x020 32  FGCOLR   DMA2D foreground color register
//  0x024 32  BGPFCCR  DMA2D background PFC control register
//  0x028 32  BGCOLR   DMA2D background color register
//  0x02C 32  FGCMAR   DMA2D foreground CLUT memory address register
//  0x030 32  BGCMAR   DMA2D background CLUT memory address register
//  0x034 32  OPFCCR   DMA2D output PFC control register
//  0x038 32  OCOLR    DMA2D output color register
//  0x03C 32  OMAR     DMA2D output memory address register
//  0x040 32  OOR      DMA2D output offset register
//  0x044 32  NLR      DMA2D number of line register
//  0x048 32  LWR      DMA2D line watermark register
//  0x04C 32  AMTCR    DMA2D AXI master timer configuration register
// Import:
//  github.com/embeddedgo/stm32/p/bus
//  github.com/embeddedgo/stm32/p/mmap
package dmad

const (
	START CR = 0x01 << 0  //+ Start This bit can be used to launch the DMA2D according to the parameters loaded in the various configuration registers
	SUSP  CR = 0x01 << 1  //+ Suspend This bit can be used to suspend the current transfer. This bit is set and reset by software. It is automatically reset by hardware when the START bit is reset.
	ABORT CR = 0x01 << 2  //+ Abort This bit can be used to abort the current transfer. This bit is set by software and is automatically reset by hardware when the START bit is reset.
	TEIE  CR = 0x01 << 8  //+ Transfer error interrupt enable This bit is set and cleared by software.
	TCIE  CR = 0x01 << 9  //+ Transfer complete interrupt enable This bit is set and cleared by software.
	TWIE  CR = 0x01 << 10 //+ Transfer watermark interrupt enable This bit is set and cleared by software.
	CAEIE CR = 0x01 << 11 //+ CLUT access error interrupt enable This bit is set and cleared by software.
	CTCIE CR = 0x01 << 12 //+ CLUT transfer complete interrupt enable This bit is set and cleared by software.
	CEIE  CR = 0x01 << 13 //+ Configuration Error Interrupt Enable This bit is set and cleared by software.
	MODE  CR = 0x03 << 16 //+ DMA2D mode This bit is set and cleared by software. It cannot be modified while a transfer is ongoing.
)

const (
	STARTn = 0
	SUSPn  = 1
	ABORTn = 2
	TEIEn  = 8
	TCIEn  = 9
	TWIEn  = 10
	CAEIEn = 11
	CTCIEn = 12
	CEIEn  = 13
	MODEn  = 16
)

const (
	TEIF  ISR = 0x01 << 0 //+ Transfer error interrupt flag This bit is set when an error occurs during a DMA transfer (data transfer or automatic CLUT loading).
	TCIF  ISR = 0x01 << 1 //+ Transfer complete interrupt flag This bit is set when a DMA2D transfer operation is complete (data transfer only).
	TWIF  ISR = 0x01 << 2 //+ Transfer watermark interrupt flag This bit is set when the last pixel of the watermarked line has been transferred.
	CAEIF ISR = 0x01 << 3 //+ CLUT access error interrupt flag This bit is set when the CPU accesses the CLUT while the CLUT is being automatically copied from a system memory to the internal DMA2D.
	CTCIF ISR = 0x01 << 4 //+ CLUT transfer complete interrupt flag This bit is set when the CLUT copy from a system memory area to the internal DMA2D memory is complete.
	CEIF  ISR = 0x01 << 5 //+ Configuration error interrupt flag This bit is set when the START bit of DMA2D_CR, DMA2DFGPFCCR or DMA2D_BGPFCCR is set and a wrong configuration has been programmed.
)

const (
	TEIFn  = 0
	TCIFn  = 1
	TWIFn  = 2
	CAEIFn = 3
	CTCIFn = 4
	CEIFn  = 5
)

const (
	CTEIF  IFCR = 0x01 << 0 //+ Clear Transfer error interrupt flag Programming this bit to 1 clears the TEIF flag in the DMA2D_ISR register
	CTCIF  IFCR = 0x01 << 1 //+ Clear transfer complete interrupt flag Programming this bit to 1 clears the TCIF flag in the DMA2D_ISR register
	CTWIF  IFCR = 0x01 << 2 //+ Clear transfer watermark interrupt flag Programming this bit to 1 clears the TWIF flag in the DMA2D_ISR register
	CAECIF IFCR = 0x01 << 3 //+ Clear CLUT access error interrupt flag Programming this bit to 1 clears the CAEIF flag in the DMA2D_ISR register
	CCTCIF IFCR = 0x01 << 4 //+ Clear CLUT transfer complete interrupt flag Programming this bit to 1 clears the CTCIF flag in the DMA2D_ISR register
	CCEIF  IFCR = 0x01 << 5 //+ Clear configuration error interrupt flag Programming this bit to 1 clears the CEIF flag in the DMA2D_ISR register
)

const (
	CTEIFn  = 0
	CTCIFn  = 1
	CTWIFn  = 2
	CAECIFn = 3
	CCTCIFn = 4
	CCEIFn  = 5
)

const (
	MA FGMAR = 0xFFFFFFFF << 0 //+ Memory address Address of the data used for the foreground image. This register can only be written when data transfers are disabled. Once the data transfer has started, this register is read-only. The address alignment must match the image format selected e.g. a 32-bit per pixel format must be 32-bit aligned, a 16-bit per pixel format must be 16-bit aligned and a 4-bit per pixel format must be 8-bit aligned.
)

const (
	MAn = 0
)

const (
	LO FGOR = 0x3FFF << 0 //+ Line offset Line offset used for the foreground expressed in pixel. This value is used to generate the address. It is added at the end of each line to determine the starting address of the next line. These bits can only be written when data transfers are disabled. Once a data transfer has started, they become read-only. If the image format is 4-bit per pixel, the line offset must be even.
)

const (
	LOn = 0
)

const (
	MA BGMAR = 0xFFFFFFFF << 0 //+ Memory address Address of the data used for the background image. This register can only be written when data transfers are disabled. Once a data transfer has started, this register is read-only. The address alignment must match the image format selected e.g. a 32-bit per pixel format must be 32-bit aligned, a 16-bit per pixel format must be 16-bit aligned and a 4-bit per pixel format must be 8-bit aligned.
)

const (
	MAn = 0
)

const (
	LO BGOR = 0x3FFF << 0 //+ Line offset Line offset used for the background image (expressed in pixel). This value is used for the address generation. It is added at the end of each line to determine the starting address of the next line. These bits can only be written when data transfers are disabled. Once data transfer has started, they become read-only. If the image format is 4-bit per pixel, the line offset must be even.
)

const (
	LOn = 0
)

const (
	CM    FGPFCCR = 0x0F << 0  //+ Color mode These bits defines the color format of the foreground image. They can only be written when data transfers are disabled. Once the transfer has started, they are read-only. others: meaningless
	CCM   FGPFCCR = 0x01 << 4  //+ CLUT color mode This bit defines the color format of the CLUT. It can only be written when the transfer is disabled. Once the CLUT transfer has started, this bit is read-only.
	START FGPFCCR = 0x01 << 5  //+ Start This bit can be set to start the automatic loading of the CLUT. It is automatically reset: ** at the end of the transfer ** when the transfer is aborted by the user application by setting the ABORT bit in DMA2D_CR ** when a transfer error occurs ** when the transfer has not started due to a configuration error or another transfer operation already ongoing (data transfer or automatic background CLUT transfer).
	CS    FGPFCCR = 0xFF << 8  //+ CLUT size These bits define the size of the CLUT used for the foreground image. Once the CLUT transfer has started, this field is read-only. The number of CLUT entries is equal to CS[7:0] + 1.
	AM    FGPFCCR = 0x03 << 16 //+ Alpha mode These bits select the alpha channel value to be used for the foreground image. They can only be written data the transfer are disabled. Once the transfer has started, they become read-only. other configurations are meaningless
	CSS   FGPFCCR = 0x03 << 18 //+ Chroma Sub-Sampling These bits define the chroma sub-sampling mode for YCbCr color mode. Once the transfer has started, these bits are read-only. others: meaningless
	AI    FGPFCCR = 0x01 << 20 //+ Alpha Inverted This bit inverts the alpha value. Once the transfer has started, this bit is read-only.
	RBS   FGPFCCR = 0x01 << 21 //+ Red Blue Swap This bit allows to swap the R &amp; B to support BGR or ABGR color formats. Once the transfer has started, this bit is read-only.
	ALPHA FGPFCCR = 0xFF << 24 //+ Alpha value These bits define a fixed alpha channel value which can replace the original alpha value or be multiplied by the original alpha value according to the alpha mode selected through the AM[1:0] bits. These bits can only be written when data transfers are disabled. Once a transfer has started, they become read-only.
)

const (
	CMn    = 0
	CCMn   = 4
	STARTn = 5
	CSn    = 8
	AMn    = 16
	CSSn   = 18
	AIn    = 20
	RBSn   = 21
	ALPHAn = 24
)

const (
	BLUE  FGCOLR = 0xFF << 0  //+ Blue Value These bits defines the blue value for the A4 or A8 mode of the foreground image. They can only be written when data transfers are disabled. Once the transfer has started, They are read-only.
	GREEN FGCOLR = 0xFF << 8  //+ Green Value These bits defines the green value for the A4 or A8 mode of the foreground image. They can only be written when data transfers are disabled. Once the transfer has started, They are read-only.
	RED   FGCOLR = 0xFF << 16 //+ Red Value These bits defines the red value for the A4 or A8 mode of the foreground image. They can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
)

const (
	CM    BGPFCCR = 0x0F << 0  //+ Color mode These bits define the color format of the foreground image. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only. others: meaningless
	CCM   BGPFCCR = 0x01 << 4  //+ CLUT Color mode These bits define the color format of the CLUT. This register can only be written when the transfer is disabled. Once the CLUT transfer has started, this bit is read-only.
	START BGPFCCR = 0x01 << 5  //+ Start This bit is set to start the automatic loading of the CLUT. This bit is automatically reset: ** at the end of the transfer ** when the transfer is aborted by the user application by setting the ABORT bit in the DMA2D_CR ** when a transfer error occurs ** when the transfer has not started due to a configuration error or another transfer operation already on going (data transfer or automatic BackGround CLUT transfer).
	CS    BGPFCCR = 0xFF << 8  //+ CLUT size These bits define the size of the CLUT used for the BG. Once the CLUT transfer has started, this field is read-only. The number of CLUT entries is equal to CS[7:0] + 1.
	AM    BGPFCCR = 0x03 << 16 //+ Alpha mode These bits define which alpha channel value to be used for the background image. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only. others: meaningless
	AI    BGPFCCR = 0x01 << 20 //+ Alpha Inverted This bit inverts the alpha value. Once the transfer has started, this bit is read-only.
	RBS   BGPFCCR = 0x01 << 21 //+ Red Blue Swap This bit allows to swap the R &amp; B to support BGR or ABGR color formats. Once the transfer has started, this bit is read-only.
	ALPHA BGPFCCR = 0xFF << 24 //+ Alpha value These bits define a fixed alpha channel value which can replace the original alpha value or be multiplied with the original alpha value according to the alpha mode selected with bits AM[1: 0]. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
)

const (
	CMn    = 0
	CCMn   = 4
	STARTn = 5
	CSn    = 8
	AMn    = 16
	AIn    = 20
	RBSn   = 21
	ALPHAn = 24
)

const (
	BLUE  BGCOLR = 0xFF << 0  //+ Blue Value These bits define the blue value for the A4 or A8 mode of the background. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
	GREEN BGCOLR = 0xFF << 8  //+ Green Value These bits define the green value for the A4 or A8 mode of the background. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
	RED   BGCOLR = 0xFF << 16 //+ Red Value These bits define the red value for the A4 or A8 mode of the background. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
)

const (
	MA FGCMAR = 0xFFFFFFFF << 0 //+ Memory Address Address of the data used for the CLUT address dedicated to the foreground image. This register can only be written when no transfer is ongoing. Once the CLUT transfer has started, this register is read-only. If the foreground CLUT format is 32-bit, the address must be 32-bit aligned.
)

const (
	MAn = 0
)

const (
	MA BGCMAR = 0xFFFFFFFF << 0 //+ Memory address Address of the data used for the CLUT address dedicated to the background image. This register can only be written when no transfer is on going. Once the CLUT transfer has started, this register is read-only. If the background CLUT format is 32-bit, the address must be 32-bit aligned.
)

const (
	MAn = 0
)

const (
	CM  OPFCCR = 0x07 << 0  //+ Color mode These bits define the color format of the output image. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only. others: meaningless
	AI  OPFCCR = 0x01 << 20 //+ Alpha Inverted This bit inverts the alpha value. Once the transfer has started, this bit is read-only.
	RBS OPFCCR = 0x01 << 21 //+ Red Blue Swap This bit allows to swap the R &amp; B to support BGR or ABGR color formats. Once the transfer has started, this bit is read-only.
)

const (
	CMn  = 0
	AIn  = 20
	RBSn = 21
)

const (
	BLUE  OCOLR = 0xFF << 0  //+ Blue Value These bits define the blue value of the output image. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
	GREEN OCOLR = 0xFF << 8  //+ Green Value These bits define the green value of the output image. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
	RED   OCOLR = 0xFF << 16 //+ Red Value These bits define the red value of the output image. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
	ALPHA OCOLR = 0xFF << 24 //+ Alpha Channel Value These bits define the alpha channel of the output color. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
)

const (
	BLUEn  = 0
	GREENn = 8
	REDn   = 16
	ALPHAn = 24
)

const (
	MA OMAR = 0xFFFFFFFF << 0 //+ Memory Address Address of the data used for the output FIFO. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only. The address alignment must match the image format selected e.g. a 32-bit per pixel format must be 32-bit aligned and a 16-bit per pixel format must be 16-bit aligned.
)

const (
	MAn = 0
)

const (
	LO OOR = 0x3FFF << 0 //+ Line Offset Line offset used for the output (expressed in pixels). This value is used for the address generation. It is added at the end of each line to determine the starting address of the next line. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
)

const (
	LOn = 0
)

const (
	NL NLR = 0xFFFF << 0  //+ Number of lines Number of lines of the area to be transferred. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
	PL NLR = 0x3FFF << 16 //+ Pixel per lines Number of pixels per lines of the area to be transferred. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only. If any of the input image format is 4-bit per pixel, pixel per lines must be even.
)

const (
	NLn = 0
	PLn = 16
)

const (
	LW LWR = 0xFFFF << 0 //+ Line watermark These bits allow to configure the line watermark for interrupt generation. An interrupt is raised when the last pixel of the watermarked line has been transferred. These bits can only be written when data transfers are disabled. Once the transfer has started, they are read-only.
)

const (
	LWn = 0
)

const (
	EN AMTCR = 0x01 << 0 //+ Enable Enables the dead time functionality.
	DT AMTCR = 0xFF << 8 //+ Dead Time Dead time value in the AXI clock cycle inserted between two consecutive accesses on the AXI master port. These bits represent the minimum guaranteed number of cycles between two consecutive AXI accesses.
)

const (
	ENn = 0
	DTn = 8
)
