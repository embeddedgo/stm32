// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32f412

// Package usart provides access to the registers of the USART peripheral.
//
// Instances:
//  USART1  USART1_BASE  APB2  -  Universal synchronous asynchronous receiver transmitter
//  USART2  USART2_BASE  APB1  -  Universal synchronous asynchronous receiver transmitter
//  USART3  USART3_BASE  APB1  -  Universal synchronous asynchronous receiver transmitter
//  USART6  USART6_BASE  APB2  -  Universal synchronous asynchronous receiver transmitter
// Registers:
//  0x000 32  SR    Status register
//  0x004 32  DR    Data register
//  0x008 32  BRR   Baud rate register
//  0x00C 32  CR1   Control register 1
//  0x010 32  CR2   Control register 2
//  0x014 32  CR3   Control register 3
//  0x018 32  GTPR  Guard time and prescaler register
// Import:
//  github.com/embeddedgo/stm32/p/bus
//  github.com/embeddedgo/stm32/p/mmap
package usart

const (
	PE   SR = 0x01 << 0 //+ Parity error
	FE   SR = 0x01 << 1 //+ Framing error
	NF   SR = 0x01 << 2 //+ Noise detected flag
	ORE  SR = 0x01 << 3 //+ Overrun error
	IDLE SR = 0x01 << 4 //+ IDLE line detected
	RXNE SR = 0x01 << 5 //+ Read data register not empty
	TC   SR = 0x01 << 6 //+ Transmission complete
	TXE  SR = 0x01 << 7 //+ Transmit data register empty
	LBD  SR = 0x01 << 8 //+ LIN break detection flag
	CTS  SR = 0x01 << 9 //+ CTS flag
)

const (
	PEn   = 0
	FEn   = 1
	NFn   = 2
	OREn  = 3
	IDLEn = 4
	RXNEn = 5
	TCn   = 6
	TXEn  = 7
	LBDn  = 8
	CTSn  = 9
)

const (
	DR DR = 0x1FF << 0 //+ Data value
)

const (
	DRn = 0
)

const (
	DIV_Fraction BRR = 0x0F << 0  //+ fraction of USARTDIV
	DIV_Mantissa BRR = 0xFFF << 4 //+ mantissa of USARTDIV
)

const (
	DIV_Fractionn = 0
	DIV_Mantissan = 4
)

const (
	SBK    CR1 = 0x01 << 0  //+ Send break
	RWU    CR1 = 0x01 << 1  //+ Receiver wakeup
	RE     CR1 = 0x01 << 2  //+ Receiver enable
	TE     CR1 = 0x01 << 3  //+ Transmitter enable
	IDLEIE CR1 = 0x01 << 4  //+ IDLE interrupt enable
	RXNEIE CR1 = 0x01 << 5  //+ RXNE interrupt enable
	TCIE   CR1 = 0x01 << 6  //+ Transmission complete interrupt enable
	TXEIE  CR1 = 0x01 << 7  //+ TXE interrupt enable
	PEIE   CR1 = 0x01 << 8  //+ PE interrupt enable
	PS     CR1 = 0x01 << 9  //+ Parity selection
	PCE    CR1 = 0x01 << 10 //+ Parity control enable
	WAKE   CR1 = 0x01 << 11 //+ Wakeup method
	M      CR1 = 0x01 << 12 //+ Word length
	UE     CR1 = 0x01 << 13 //+ USART enable
	OVER8  CR1 = 0x01 << 15 //+ Oversampling mode
)

const (
	SBKn    = 0
	RWUn    = 1
	REn     = 2
	TEn     = 3
	IDLEIEn = 4
	RXNEIEn = 5
	TCIEn   = 6
	TXEIEn  = 7
	PEIEn   = 8
	PSn     = 9
	PCEn    = 10
	WAKEn   = 11
	Mn      = 12
	UEn     = 13
	OVER8n  = 15
)

const (
	ADD   CR2 = 0x0F << 0  //+ Address of the USART node
	LBDL  CR2 = 0x01 << 5  //+ lin break detection length
	LBDIE CR2 = 0x01 << 6  //+ LIN break detection interrupt enable
	LBCL  CR2 = 0x01 << 8  //+ Last bit clock pulse
	CPHA  CR2 = 0x01 << 9  //+ Clock phase
	CPOL  CR2 = 0x01 << 10 //+ Clock polarity
	CLKEN CR2 = 0x01 << 11 //+ Clock enable
	STOP  CR2 = 0x03 << 12 //+ STOP bits
	LINEN CR2 = 0x01 << 14 //+ LIN mode enable
)

const (
	ADDn   = 0
	LBDLn  = 5
	LBDIEn = 6
	LBCLn  = 8
	CPHAn  = 9
	CPOLn  = 10
	CLKENn = 11
	STOPn  = 12
	LINENn = 14
)

const (
	EIE    CR3 = 0x01 << 0  //+ Error interrupt enable
	IREN   CR3 = 0x01 << 1  //+ IrDA mode enable
	IRLP   CR3 = 0x01 << 2  //+ IrDA low-power
	HDSEL  CR3 = 0x01 << 3  //+ Half-duplex selection
	NACK   CR3 = 0x01 << 4  //+ Smartcard NACK enable
	SCEN   CR3 = 0x01 << 5  //+ Smartcard mode enable
	DMAR   CR3 = 0x01 << 6  //+ DMA enable receiver
	DMAT   CR3 = 0x01 << 7  //+ DMA enable transmitter
	RTSE   CR3 = 0x01 << 8  //+ RTS enable
	CTSE   CR3 = 0x01 << 9  //+ CTS enable
	CTSIE  CR3 = 0x01 << 10 //+ CTS interrupt enable
	ONEBIT CR3 = 0x01 << 11 //+ One sample bit method enable
)

const (
	EIEn    = 0
	IRENn   = 1
	IRLPn   = 2
	HDSELn  = 3
	NACKn   = 4
	SCENn   = 5
	DMARn   = 6
	DMATn   = 7
	RTSEn   = 8
	CTSEn   = 9
	CTSIEn  = 10
	ONEBITn = 11
)

const (
	PSC GTPR = 0xFF << 0 //+ Prescaler value
	GT  GTPR = 0xFF << 8 //+ Guard time value
)

const (
	PSCn = 0
	GTn  = 8
)
