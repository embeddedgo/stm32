// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

// +build stm32h7x3

// Package usart provides access to the registers of the USART peripheral.
//
// Instances:
//  UART4   UART4_BASE   APB1  USART3,UART4  Universal synchronous asynchronous receiver transmitter
//  UART5   UART5_BASE   APB1  UART5         Universal synchronous asynchronous receiver transmitter
//  UART7   UART7_BASE   -     UART7         Universal synchronous asynchronous receiver transmitter
//  UART8   UART8_BASE   -     UART8         Universal synchronous asynchronous receiver transmitter
//  USART1  USART1_BASE  APB2  -             Universal synchronous asynchronous receiver transmitter
//  USART2  USART2_BASE  APB1  USART1        Universal synchronous asynchronous receiver transmitter
//  USART3  USART3_BASE  APB1  USART2        Universal synchronous asynchronous receiver transmitter
//  USART6  USART6_BASE  APB2  USART6        Universal synchronous asynchronous receiver transmitter
// Registers:
//  0x000 32  CR1    Control register 1
//  0x004 32  CR2    Control register 2
//  0x008 32  CR3    Control register 3
//  0x00C 32  BRR    Baud rate register
//  0x010 32  GTPR   Guard time and prescaler register
//  0x014 32  RTOR   Receiver timeout register
//  0x018 32  RQR    Request register
//  0x01C 32  ISR    Interrupt & status register
//  0x020 32  ICR    Interrupt flag clear register
//  0x024 32  RDR    Receive data register
//  0x028 32  TDR    Transmit data register
//  0x02C 32  PRESC  USART prescaler register
// Import:
//  github.com/embeddedgo/stm32/p/bus
//  github.com/embeddedgo/stm32/p/mmap
package usart

const (
	UE     CR1 = 0x01 << 0  //+ USART enable
	UESM   CR1 = 0x01 << 1  //+ USART enable in Stop mode
	RE     CR1 = 0x01 << 2  //+ Receiver enable
	TE     CR1 = 0x01 << 3  //+ Transmitter enable
	IDLEIE CR1 = 0x01 << 4  //+ IDLE interrupt enable
	RXNEIE CR1 = 0x01 << 5  //+ RXNE interrupt enable
	TCIE   CR1 = 0x01 << 6  //+ Transmission complete interrupt enable
	TXEIE  CR1 = 0x01 << 7  //+ interrupt enable
	PEIE   CR1 = 0x01 << 8  //+ PE interrupt enable
	PS     CR1 = 0x01 << 9  //+ Parity selection
	PCE    CR1 = 0x01 << 10 //+ Parity control enable
	WAKE   CR1 = 0x01 << 11 //+ Receiver wakeup method
	M0     CR1 = 0x01 << 12 //+ Word length
	MME    CR1 = 0x01 << 13 //+ Mute mode enable
	CMIE   CR1 = 0x01 << 14 //+ Character match interrupt enable
	OVER8  CR1 = 0x01 << 15 //+ Oversampling mode
	DEDT0  CR1 = 0x01 << 16 //+ DEDT0
	DEDT1  CR1 = 0x01 << 17 //+ DEDT1
	DEDT2  CR1 = 0x01 << 18 //+ DEDT2
	DEDT3  CR1 = 0x01 << 19 //+ DEDT3
	DEDT4  CR1 = 0x01 << 20 //+ Driver Enable de-assertion time
	DEAT0  CR1 = 0x01 << 21 //+ DEAT0
	DEAT1  CR1 = 0x01 << 22 //+ DEAT1
	DEAT2  CR1 = 0x01 << 23 //+ DEAT2
	DEAT3  CR1 = 0x01 << 24 //+ DEAT3
	DEAT4  CR1 = 0x01 << 25 //+ Driver Enable assertion time
	RTOIE  CR1 = 0x01 << 26 //+ Receiver timeout interrupt enable
	EOBIE  CR1 = 0x01 << 27 //+ End of Block interrupt enable
	M1     CR1 = 0x01 << 28 //+ Word length
	FIFOEN CR1 = 0x01 << 29 //+ FIFO mode enable
	TXFEIE CR1 = 0x01 << 30 //+ TXFIFO empty interrupt enable
	RXFFIE CR1 = 0x01 << 31 //+ RXFIFO Full interrupt enable
)

const (
	UEn     = 0
	UESMn   = 1
	REn     = 2
	TEn     = 3
	IDLEIEn = 4
	RXNEIEn = 5
	TCIEn   = 6
	TXEIEn  = 7
	PEIEn   = 8
	PSn     = 9
	PCEn    = 10
	WAKEn   = 11
	M0n     = 12
	MMEn    = 13
	CMIEn   = 14
	OVER8n  = 15
	DEDT0n  = 16
	DEDT1n  = 17
	DEDT2n  = 18
	DEDT3n  = 19
	DEDT4n  = 20
	DEAT0n  = 21
	DEAT1n  = 22
	DEAT2n  = 23
	DEAT3n  = 24
	DEAT4n  = 25
	RTOIEn  = 26
	EOBIEn  = 27
	M1n     = 28
	FIFOENn = 29
	TXFEIEn = 30
	RXFFIEn = 31
)

const (
	SLVEN    CR2 = 0x01 << 0  //+ Synchronous Slave mode enable
	DIS_NSS  CR2 = 0x01 << 3  //+ When the DSI_NSS bit is set, the NSS pin input is ignored
	ADDM7    CR2 = 0x01 << 4  //+ 7-bit Address Detection/4-bit Address Detection
	LBDL     CR2 = 0x01 << 5  //+ LIN break detection length
	LBDIE    CR2 = 0x01 << 6  //+ LIN break detection interrupt enable
	LBCL     CR2 = 0x01 << 8  //+ Last bit clock pulse
	CPHA     CR2 = 0x01 << 9  //+ Clock phase
	CPOL     CR2 = 0x01 << 10 //+ Clock polarity
	CLKEN    CR2 = 0x01 << 11 //+ Clock enable
	STOP     CR2 = 0x03 << 12 //+ STOP bits
	LINEN    CR2 = 0x01 << 14 //+ LIN mode enable
	SWAP     CR2 = 0x01 << 15 //+ Swap TX/RX pins
	RXINV    CR2 = 0x01 << 16 //+ RX pin active level inversion
	TXINV    CR2 = 0x01 << 17 //+ TX pin active level inversion
	TAINV    CR2 = 0x01 << 18 //+ Binary data inversion
	MSBFIRST CR2 = 0x01 << 19 //+ Most significant bit first
	ABREN    CR2 = 0x01 << 20 //+ Auto baud rate enable
	ABRMOD0  CR2 = 0x01 << 21 //+ ABRMOD0
	ABRMOD1  CR2 = 0x01 << 22 //+ Auto baud rate mode
	RTOEN    CR2 = 0x01 << 23 //+ Receiver timeout enable
	ADD0_3   CR2 = 0x0F << 24 //+ Address of the USART node
	ADD4_7   CR2 = 0x0F << 28 //+ Address of the USART node
)

const (
	SLVENn    = 0
	DIS_NSSn  = 3
	ADDM7n    = 4
	LBDLn     = 5
	LBDIEn    = 6
	LBCLn     = 8
	CPHAn     = 9
	CPOLn     = 10
	CLKENn    = 11
	STOPn     = 12
	LINENn    = 14
	SWAPn     = 15
	RXINVn    = 16
	TXINVn    = 17
	TAINVn    = 18
	MSBFIRSTn = 19
	ABRENn    = 20
	ABRMOD0n  = 21
	ABRMOD1n  = 22
	RTOENn    = 23
	ADD0_3n   = 24
	ADD4_7n   = 28
)

const (
	EIE     CR3 = 0x01 << 0  //+ Error interrupt enable
	IREN    CR3 = 0x01 << 1  //+ Ir mode enable
	IRLP    CR3 = 0x01 << 2  //+ Ir low-power
	HDSEL   CR3 = 0x01 << 3  //+ Half-duplex selection
	NACK    CR3 = 0x01 << 4  //+ Smartcard NACK enable
	SCEN    CR3 = 0x01 << 5  //+ Smartcard mode enable
	DMAR    CR3 = 0x01 << 6  //+ DMA enable receiver
	DMAT    CR3 = 0x01 << 7  //+ DMA enable transmitter
	RTSE    CR3 = 0x01 << 8  //+ RTS enable
	CTSE    CR3 = 0x01 << 9  //+ CTS enable
	CTSIE   CR3 = 0x01 << 10 //+ CTS interrupt enable
	ONEBIT  CR3 = 0x01 << 11 //+ One sample bit method enable
	OVRDIS  CR3 = 0x01 << 12 //+ Overrun Disable
	DDRE    CR3 = 0x01 << 13 //+ DMA Disable on Reception Error
	DEM     CR3 = 0x01 << 14 //+ Driver enable mode
	DEP     CR3 = 0x01 << 15 //+ Driver enable polarity selection
	SCARCNT CR3 = 0x07 << 17 //+ Smartcard auto-retry count
	WUS     CR3 = 0x03 << 20 //+ Wakeup from Stop mode interrupt flag selection
	WUFIE   CR3 = 0x01 << 22 //+ Wakeup from Stop mode interrupt enable
	TXFTIE  CR3 = 0x01 << 23 //+ TXFIFO threshold interrupt enable
	TCBGTIE CR3 = 0x01 << 24 //+ Transmission Complete before guard time, interrupt enable
	RXFTCFG CR3 = 0x07 << 25 //+ Receive FIFO threshold configuration
	RXFTIE  CR3 = 0x01 << 28 //+ RXFIFO threshold interrupt enable
	TXFTCFG CR3 = 0x07 << 29 //+ TXFIFO threshold configuration
)

const (
	EIEn     = 0
	IRENn    = 1
	IRLPn    = 2
	HDSELn   = 3
	NACKn    = 4
	SCENn    = 5
	DMARn    = 6
	DMATn    = 7
	RTSEn    = 8
	CTSEn    = 9
	CTSIEn   = 10
	ONEBITn  = 11
	OVRDISn  = 12
	DDREn    = 13
	DEMn     = 14
	DEPn     = 15
	SCARCNTn = 17
	WUSn     = 20
	WUFIEn   = 22
	TXFTIEn  = 23
	TCBGTIEn = 24
	RXFTCFGn = 25
	RXFTIEn  = 28
	TXFTCFGn = 29
)

const (
	BRR_0_3  BRR = 0x0F << 0  //+ DIV_Fraction
	BRR_4_15 BRR = 0xFFF << 4 //+ DIV_Mantissa
)

const (
	BRR_0_3n  = 0
	BRR_4_15n = 4
)

const (
	PSC GTPR = 0xFF << 0 //+ Prescaler value
	GT  GTPR = 0xFF << 8 //+ Guard time value
)

const (
	PSCn = 0
	GTn  = 8
)

const (
	RTO  RTOR = 0xFFFFFF << 0 //+ Receiver timeout value
	BLEN RTOR = 0xFF << 24    //+ Block Length
)

const (
	RTOn  = 0
	BLENn = 24
)

const (
	ABRRQ RQR = 0x01 << 0 //+ Auto baud rate request
	SBKRQ RQR = 0x01 << 1 //+ Send break request
	MMRQ  RQR = 0x01 << 2 //+ Mute mode request
	RXFRQ RQR = 0x01 << 3 //+ Receive data flush request
	TXFRQ RQR = 0x01 << 4 //+ Transmit data flush request
)

const (
	ABRRQn = 0
	SBKRQn = 1
	MMRQn  = 2
	RXFRQn = 3
	TXFRQn = 4
)

const (
	PE    ISR = 0x01 << 0  //+ PE
	FE    ISR = 0x01 << 1  //+ FE
	NF    ISR = 0x01 << 2  //+ NF
	ORE   ISR = 0x01 << 3  //+ ORE
	IDLE  ISR = 0x01 << 4  //+ IDLE
	RXNE  ISR = 0x01 << 5  //+ RXNE
	TC    ISR = 0x01 << 6  //+ TC
	TXE   ISR = 0x01 << 7  //+ TXE
	LBDF  ISR = 0x01 << 8  //+ LBDF
	CTSIF ISR = 0x01 << 9  //+ CTSIF
	CTS   ISR = 0x01 << 10 //+ CTS
	RTOF  ISR = 0x01 << 11 //+ RTOF
	EOBF  ISR = 0x01 << 12 //+ EOBF
	UDR   ISR = 0x01 << 13 //+ SPI slave underrun error flag
	ABRE  ISR = 0x01 << 14 //+ ABRE
	ABRF  ISR = 0x01 << 15 //+ ABRF
	BUSY  ISR = 0x01 << 16 //+ BUSY
	CMF   ISR = 0x01 << 17 //+ CMF
	SBKF  ISR = 0x01 << 18 //+ SBKF
	RWU   ISR = 0x01 << 19 //+ RWU
	WUF   ISR = 0x01 << 20 //+ WUF
	TEACK ISR = 0x01 << 21 //+ TEACK
	REACK ISR = 0x01 << 22 //+ REACK
	TXFE  ISR = 0x01 << 23 //+ TXFIFO Empty
	RXFF  ISR = 0x01 << 24 //+ RXFIFO Full
	TCBGT ISR = 0x01 << 25 //+ Transmission complete before guard time flag
	RXFT  ISR = 0x01 << 26 //+ RXFIFO threshold flag
	TXFT  ISR = 0x01 << 27 //+ TXFIFO threshold flag
)

const (
	PEn    = 0
	FEn    = 1
	NFn    = 2
	OREn   = 3
	IDLEn  = 4
	RXNEn  = 5
	TCn    = 6
	TXEn   = 7
	LBDFn  = 8
	CTSIFn = 9
	CTSn   = 10
	RTOFn  = 11
	EOBFn  = 12
	UDRn   = 13
	ABREn  = 14
	ABRFn  = 15
	BUSYn  = 16
	CMFn   = 17
	SBKFn  = 18
	RWUn   = 19
	WUFn   = 20
	TEACKn = 21
	REACKn = 22
	TXFEn  = 23
	RXFFn  = 24
	TCBGTn = 25
	RXFTn  = 26
	TXFTn  = 27
)

const (
	PECF   ICR = 0x01 << 0  //+ Parity error clear flag
	FECF   ICR = 0x01 << 1  //+ Framing error clear flag
	NCF    ICR = 0x01 << 2  //+ Noise detected clear flag
	ORECF  ICR = 0x01 << 3  //+ Overrun error clear flag
	IDLECF ICR = 0x01 << 4  //+ Idle line detected clear flag
	TXFECF ICR = 0x01 << 5  //+ TXFIFO empty clear flag
	TCCF   ICR = 0x01 << 6  //+ Transmission complete clear flag
	TCBGTC ICR = 0x01 << 7  //+ Transmission complete before Guard time clear flag
	LBDCF  ICR = 0x01 << 8  //+ LIN break detection clear flag
	CTSCF  ICR = 0x01 << 9  //+ CTS clear flag
	RTOCF  ICR = 0x01 << 11 //+ Receiver timeout clear flag
	EOBCF  ICR = 0x01 << 12 //+ End of block clear flag
	UDRCF  ICR = 0x01 << 13 //+ SPI slave underrun clear flag
	CMCF   ICR = 0x01 << 17 //+ Character match clear flag
	WUCF   ICR = 0x01 << 20 //+ Wakeup from Stop mode clear flag
)

const (
	PECFn   = 0
	FECFn   = 1
	NCFn    = 2
	ORECFn  = 3
	IDLECFn = 4
	TXFECFn = 5
	TCCFn   = 6
	TCBGTCn = 7
	LBDCFn  = 8
	CTSCFn  = 9
	RTOCFn  = 11
	EOBCFn  = 12
	UDRCFn  = 13
	CMCFn   = 17
	WUCFn   = 20
)

const (
	RDR RDR = 0x1FF << 0 //+ Receive data value
)

const (
	RDRn = 0
)

const (
	TDR TDR = 0x1FF << 0 //+ Transmit data value
)

const (
	TDRn = 0
)

const (
	PRESCALER PRESC = 0x0F << 0 //+ Clock prescaler
)

const (
	PRESCALERn = 0
)
