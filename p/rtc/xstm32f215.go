// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32f215

package rtc

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	TR     mmio.R32[TR]
	DR     mmio.R32[DR]
	CR     mmio.R32[CR]
	ISR    mmio.R32[ISR]
	PRER   mmio.R32[PRER]
	WUTR   mmio.R32[WUTR]
	CALIBR mmio.R32[CALIBR]
	ALRMAR mmio.R32[ALRMR]
	ALRMBR mmio.R32[ALRMR]
	WPR    mmio.R32[WPR]
	_      [2]uint32
	TSTR   mmio.R32[TR]
	TSDR   mmio.R32[DR]
	_      [2]uint32
	TAFCR  mmio.R32[TAFCR]
	_      [3]uint32
	BKPR   [20]mmio.R32[uint32]
}

func RTC() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.RTC_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type TR uint32

func SU_(p *Periph) mmio.RM32[TR]  { return mmio.RM32[TR]{&p.TR, SU} }
func ST_(p *Periph) mmio.RM32[TR]  { return mmio.RM32[TR]{&p.TR, ST} }
func MNU_(p *Periph) mmio.RM32[TR] { return mmio.RM32[TR]{&p.TR, MNU} }
func MNT_(p *Periph) mmio.RM32[TR] { return mmio.RM32[TR]{&p.TR, MNT} }
func HU_(p *Periph) mmio.RM32[TR]  { return mmio.RM32[TR]{&p.TR, HU} }
func HT_(p *Periph) mmio.RM32[TR]  { return mmio.RM32[TR]{&p.TR, HT} }
func PM_(p *Periph) mmio.RM32[TR]  { return mmio.RM32[TR]{&p.TR, PM} }

type DR uint32

func DU_(p *Periph) mmio.RM32[DR]  { return mmio.RM32[DR]{&p.DR, DU} }
func DT_(p *Periph) mmio.RM32[DR]  { return mmio.RM32[DR]{&p.DR, DT} }
func MU_(p *Periph) mmio.RM32[DR]  { return mmio.RM32[DR]{&p.DR, MU} }
func MT_(p *Periph) mmio.RM32[DR]  { return mmio.RM32[DR]{&p.DR, MT} }
func WDU_(p *Periph) mmio.RM32[DR] { return mmio.RM32[DR]{&p.DR, WDU} }
func YU_(p *Periph) mmio.RM32[DR]  { return mmio.RM32[DR]{&p.DR, YU} }
func YT_(p *Periph) mmio.RM32[DR]  { return mmio.RM32[DR]{&p.DR, YT} }

type CR uint32

func WCKSEL_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, WCKSEL} }
func TSEDGE_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, TSEDGE} }
func REFCKON_(p *Periph) mmio.RM32[CR] { return mmio.RM32[CR]{&p.CR, REFCKON} }
func FMT_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, FMT} }
func DCE_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, DCE} }
func ALRAE_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, ALRAE} }
func ALRBE_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, ALRBE} }
func WUTE_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, WUTE} }
func TSE_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, TSE} }
func ALRAIE_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, ALRAIE} }
func ALRBIE_(p *Periph) mmio.RM32[CR]  { return mmio.RM32[CR]{&p.CR, ALRBIE} }
func WUTIE_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, WUTIE} }
func TSIE_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, TSIE} }
func ADD1H_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, ADD1H} }
func SUB1H_(p *Periph) mmio.RM32[CR]   { return mmio.RM32[CR]{&p.CR, SUB1H} }
func BKP_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, BKP} }
func POL_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, POL} }
func OSEL_(p *Periph) mmio.RM32[CR]    { return mmio.RM32[CR]{&p.CR, OSEL} }
func COE_(p *Periph) mmio.RM32[CR]     { return mmio.RM32[CR]{&p.CR, COE} }

type ISR uint32

func ALRAWF_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, ALRAWF} }
func ALRBWF_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, ALRBWF} }
func WUTWF_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, WUTWF} }
func INITS_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, INITS} }
func RSF_(p *Periph) mmio.RM32[ISR]    { return mmio.RM32[ISR]{&p.ISR, RSF} }
func INITF_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, INITF} }
func INIT_(p *Periph) mmio.RM32[ISR]   { return mmio.RM32[ISR]{&p.ISR, INIT} }
func ALRAF_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, ALRAF} }
func ALRBF_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, ALRBF} }
func WUTF_(p *Periph) mmio.RM32[ISR]   { return mmio.RM32[ISR]{&p.ISR, WUTF} }
func TSF_(p *Periph) mmio.RM32[ISR]    { return mmio.RM32[ISR]{&p.ISR, TSF} }
func TSOVF_(p *Periph) mmio.RM32[ISR]  { return mmio.RM32[ISR]{&p.ISR, TSOVF} }
func TAMP1F_(p *Periph) mmio.RM32[ISR] { return mmio.RM32[ISR]{&p.ISR, TAMP1F} }

type PRER uint32

func PREDIV_S_(p *Periph) mmio.RM32[PRER] { return mmio.RM32[PRER]{&p.PRER, PREDIV_S} }
func PREDIV_A_(p *Periph) mmio.RM32[PRER] { return mmio.RM32[PRER]{&p.PRER, PREDIV_A} }

type WUTR uint32

func WUT_(p *Periph) mmio.RM32[WUTR] { return mmio.RM32[WUTR]{&p.WUTR, WUT} }

type CALIBR uint32

func DC_(p *Periph) mmio.RM32[CALIBR]  { return mmio.RM32[CALIBR]{&p.CALIBR, DC} }
func DCS_(p *Periph) mmio.RM32[CALIBR] { return mmio.RM32[CALIBR]{&p.CALIBR, DCS} }

type ALRMR uint32

type WPR uint32

func KEY_(p *Periph) mmio.RM32[WPR] { return mmio.RM32[WPR]{&p.WPR, KEY} }

type TAFCR uint32

func TAMP1E_(p *Periph) mmio.RM32[TAFCR]       { return mmio.RM32[TAFCR]{&p.TAFCR, TAMP1E} }
func TAMP1TRG_(p *Periph) mmio.RM32[TAFCR]     { return mmio.RM32[TAFCR]{&p.TAFCR, TAMP1TRG} }
func TAMPIE_(p *Periph) mmio.RM32[TAFCR]       { return mmio.RM32[TAFCR]{&p.TAFCR, TAMPIE} }
func TAMP1INSEL_(p *Periph) mmio.RM32[TAFCR]   { return mmio.RM32[TAFCR]{&p.TAFCR, TAMP1INSEL} }
func TSINSEL_(p *Periph) mmio.RM32[TAFCR]      { return mmio.RM32[TAFCR]{&p.TAFCR, TSINSEL} }
func ALARMOUTTYPE_(p *Periph) mmio.RM32[TAFCR] { return mmio.RM32[TAFCR]{&p.TAFCR, ALARMOUTTYPE} }
