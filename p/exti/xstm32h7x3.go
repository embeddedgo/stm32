// DO NOT EDIT THIS FILE. GENERATED BY xgen.

//go:build stm32h7x3

package exti

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	RTSR1   RRTSR1
	FTSR1   RFTSR1
	SWIER1  RSWIER1
	D3PMR1  RD3PMR1
	D3PCR1L RD3PCR1L
	D3PCR1H RD3PCR1H
	_       [2]uint32
	RTSR2   RRTSR2
	FTSR2   RFTSR2
	SWIER2  RSWIER2
	D3PMR2  RD3PMR2
	D3PCR2L RD3PCR2L
	D3PCR2H RD3PCR2H
	_       [2]uint32
	RTSR3   RRTSR3
	FTSR3   RFTSR3
	SWIER3  RSWIER3
	D3PMR3  RD3PMR3
	_       uint32
	D3PCR3H RD3PCR3H
	_       [10]uint32
	CPUIMR1 RCPUIMR1
	CPUEMR1 RCPUEMR1
	CPUPR1  RCPUPR1
	_       uint32
	CPUIMR2 RCPUIMR2
	CPUEMR2 RCPUEMR2
	CPUPR2  RCPUPR2
	_       uint32
	CPUIMR3 RCPUIMR3
	CPUEMR3 RCPUEMR3
	CPUPR3  RCPUPR3
}

func EXTI() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.EXTI_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type RTSR1 uint32

type RRTSR1 struct{ mmio.U32 }

func (r *RRTSR1) LoadBits(mask RTSR1) RTSR1 { return RTSR1(r.U32.LoadBits(uint32(mask))) }
func (r *RRTSR1) StoreBits(mask, b RTSR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRTSR1) SetBits(mask RTSR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RRTSR1) ClearBits(mask RTSR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RRTSR1) Load() RTSR1               { return RTSR1(r.U32.Load()) }
func (r *RRTSR1) Store(b RTSR1)             { r.U32.Store(uint32(b)) }

type RMRTSR1 struct{ mmio.UM32 }

func (rm RMRTSR1) Load() RTSR1   { return RTSR1(rm.UM32.Load()) }
func (rm RMRTSR1) Store(b RTSR1) { rm.UM32.Store(uint32(b)) }

type FTSR1 uint32

type RFTSR1 struct{ mmio.U32 }

func (r *RFTSR1) LoadBits(mask FTSR1) FTSR1 { return FTSR1(r.U32.LoadBits(uint32(mask))) }
func (r *RFTSR1) StoreBits(mask, b FTSR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFTSR1) SetBits(mask FTSR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RFTSR1) ClearBits(mask FTSR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RFTSR1) Load() FTSR1               { return FTSR1(r.U32.Load()) }
func (r *RFTSR1) Store(b FTSR1)             { r.U32.Store(uint32(b)) }

type RMFTSR1 struct{ mmio.UM32 }

func (rm RMFTSR1) Load() FTSR1   { return FTSR1(rm.UM32.Load()) }
func (rm RMFTSR1) Store(b FTSR1) { rm.UM32.Store(uint32(b)) }

type SWIER1 uint32

type RSWIER1 struct{ mmio.U32 }

func (r *RSWIER1) LoadBits(mask SWIER1) SWIER1 { return SWIER1(r.U32.LoadBits(uint32(mask))) }
func (r *RSWIER1) StoreBits(mask, b SWIER1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSWIER1) SetBits(mask SWIER1)         { r.U32.SetBits(uint32(mask)) }
func (r *RSWIER1) ClearBits(mask SWIER1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RSWIER1) Load() SWIER1                { return SWIER1(r.U32.Load()) }
func (r *RSWIER1) Store(b SWIER1)              { r.U32.Store(uint32(b)) }

type RMSWIER1 struct{ mmio.UM32 }

func (rm RMSWIER1) Load() SWIER1   { return SWIER1(rm.UM32.Load()) }
func (rm RMSWIER1) Store(b SWIER1) { rm.UM32.Store(uint32(b)) }

type D3PMR1 uint32

type RD3PMR1 struct{ mmio.U32 }

func (r *RD3PMR1) LoadBits(mask D3PMR1) D3PMR1 { return D3PMR1(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PMR1) StoreBits(mask, b D3PMR1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PMR1) SetBits(mask D3PMR1)         { r.U32.SetBits(uint32(mask)) }
func (r *RD3PMR1) ClearBits(mask D3PMR1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PMR1) Load() D3PMR1                { return D3PMR1(r.U32.Load()) }
func (r *RD3PMR1) Store(b D3PMR1)              { r.U32.Store(uint32(b)) }

type RMD3PMR1 struct{ mmio.UM32 }

func (rm RMD3PMR1) Load() D3PMR1   { return D3PMR1(rm.UM32.Load()) }
func (rm RMD3PMR1) Store(b D3PMR1) { rm.UM32.Store(uint32(b)) }

type D3PCR1L uint32

type RD3PCR1L struct{ mmio.U32 }

func (r *RD3PCR1L) LoadBits(mask D3PCR1L) D3PCR1L { return D3PCR1L(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PCR1L) StoreBits(mask, b D3PCR1L)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PCR1L) SetBits(mask D3PCR1L)          { r.U32.SetBits(uint32(mask)) }
func (r *RD3PCR1L) ClearBits(mask D3PCR1L)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PCR1L) Load() D3PCR1L                 { return D3PCR1L(r.U32.Load()) }
func (r *RD3PCR1L) Store(b D3PCR1L)               { r.U32.Store(uint32(b)) }

type RMD3PCR1L struct{ mmio.UM32 }

func (rm RMD3PCR1L) Load() D3PCR1L   { return D3PCR1L(rm.UM32.Load()) }
func (rm RMD3PCR1L) Store(b D3PCR1L) { rm.UM32.Store(uint32(b)) }

type D3PCR1H uint32

type RD3PCR1H struct{ mmio.U32 }

func (r *RD3PCR1H) LoadBits(mask D3PCR1H) D3PCR1H { return D3PCR1H(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PCR1H) StoreBits(mask, b D3PCR1H)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PCR1H) SetBits(mask D3PCR1H)          { r.U32.SetBits(uint32(mask)) }
func (r *RD3PCR1H) ClearBits(mask D3PCR1H)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PCR1H) Load() D3PCR1H                 { return D3PCR1H(r.U32.Load()) }
func (r *RD3PCR1H) Store(b D3PCR1H)               { r.U32.Store(uint32(b)) }

type RMD3PCR1H struct{ mmio.UM32 }

func (rm RMD3PCR1H) Load() D3PCR1H   { return D3PCR1H(rm.UM32.Load()) }
func (rm RMD3PCR1H) Store(b D3PCR1H) { rm.UM32.Store(uint32(b)) }

type RTSR2 uint32

type RRTSR2 struct{ mmio.U32 }

func (r *RRTSR2) LoadBits(mask RTSR2) RTSR2 { return RTSR2(r.U32.LoadBits(uint32(mask))) }
func (r *RRTSR2) StoreBits(mask, b RTSR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRTSR2) SetBits(mask RTSR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RRTSR2) ClearBits(mask RTSR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RRTSR2) Load() RTSR2               { return RTSR2(r.U32.Load()) }
func (r *RRTSR2) Store(b RTSR2)             { r.U32.Store(uint32(b)) }

type RMRTSR2 struct{ mmio.UM32 }

func (rm RMRTSR2) Load() RTSR2   { return RTSR2(rm.UM32.Load()) }
func (rm RMRTSR2) Store(b RTSR2) { rm.UM32.Store(uint32(b)) }

type FTSR2 uint32

type RFTSR2 struct{ mmio.U32 }

func (r *RFTSR2) LoadBits(mask FTSR2) FTSR2 { return FTSR2(r.U32.LoadBits(uint32(mask))) }
func (r *RFTSR2) StoreBits(mask, b FTSR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFTSR2) SetBits(mask FTSR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RFTSR2) ClearBits(mask FTSR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RFTSR2) Load() FTSR2               { return FTSR2(r.U32.Load()) }
func (r *RFTSR2) Store(b FTSR2)             { r.U32.Store(uint32(b)) }

type RMFTSR2 struct{ mmio.UM32 }

func (rm RMFTSR2) Load() FTSR2   { return FTSR2(rm.UM32.Load()) }
func (rm RMFTSR2) Store(b FTSR2) { rm.UM32.Store(uint32(b)) }

type SWIER2 uint32

type RSWIER2 struct{ mmio.U32 }

func (r *RSWIER2) LoadBits(mask SWIER2) SWIER2 { return SWIER2(r.U32.LoadBits(uint32(mask))) }
func (r *RSWIER2) StoreBits(mask, b SWIER2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSWIER2) SetBits(mask SWIER2)         { r.U32.SetBits(uint32(mask)) }
func (r *RSWIER2) ClearBits(mask SWIER2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RSWIER2) Load() SWIER2                { return SWIER2(r.U32.Load()) }
func (r *RSWIER2) Store(b SWIER2)              { r.U32.Store(uint32(b)) }

type RMSWIER2 struct{ mmio.UM32 }

func (rm RMSWIER2) Load() SWIER2   { return SWIER2(rm.UM32.Load()) }
func (rm RMSWIER2) Store(b SWIER2) { rm.UM32.Store(uint32(b)) }

type D3PMR2 uint32

type RD3PMR2 struct{ mmio.U32 }

func (r *RD3PMR2) LoadBits(mask D3PMR2) D3PMR2 { return D3PMR2(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PMR2) StoreBits(mask, b D3PMR2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PMR2) SetBits(mask D3PMR2)         { r.U32.SetBits(uint32(mask)) }
func (r *RD3PMR2) ClearBits(mask D3PMR2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PMR2) Load() D3PMR2                { return D3PMR2(r.U32.Load()) }
func (r *RD3PMR2) Store(b D3PMR2)              { r.U32.Store(uint32(b)) }

type RMD3PMR2 struct{ mmio.UM32 }

func (rm RMD3PMR2) Load() D3PMR2   { return D3PMR2(rm.UM32.Load()) }
func (rm RMD3PMR2) Store(b D3PMR2) { rm.UM32.Store(uint32(b)) }

type D3PCR2L uint32

type RD3PCR2L struct{ mmio.U32 }

func (r *RD3PCR2L) LoadBits(mask D3PCR2L) D3PCR2L { return D3PCR2L(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PCR2L) StoreBits(mask, b D3PCR2L)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PCR2L) SetBits(mask D3PCR2L)          { r.U32.SetBits(uint32(mask)) }
func (r *RD3PCR2L) ClearBits(mask D3PCR2L)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PCR2L) Load() D3PCR2L                 { return D3PCR2L(r.U32.Load()) }
func (r *RD3PCR2L) Store(b D3PCR2L)               { r.U32.Store(uint32(b)) }

type RMD3PCR2L struct{ mmio.UM32 }

func (rm RMD3PCR2L) Load() D3PCR2L   { return D3PCR2L(rm.UM32.Load()) }
func (rm RMD3PCR2L) Store(b D3PCR2L) { rm.UM32.Store(uint32(b)) }

type D3PCR2H uint32

type RD3PCR2H struct{ mmio.U32 }

func (r *RD3PCR2H) LoadBits(mask D3PCR2H) D3PCR2H { return D3PCR2H(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PCR2H) StoreBits(mask, b D3PCR2H)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PCR2H) SetBits(mask D3PCR2H)          { r.U32.SetBits(uint32(mask)) }
func (r *RD3PCR2H) ClearBits(mask D3PCR2H)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PCR2H) Load() D3PCR2H                 { return D3PCR2H(r.U32.Load()) }
func (r *RD3PCR2H) Store(b D3PCR2H)               { r.U32.Store(uint32(b)) }

type RMD3PCR2H struct{ mmio.UM32 }

func (rm RMD3PCR2H) Load() D3PCR2H   { return D3PCR2H(rm.UM32.Load()) }
func (rm RMD3PCR2H) Store(b D3PCR2H) { rm.UM32.Store(uint32(b)) }

type RTSR3 uint32

type RRTSR3 struct{ mmio.U32 }

func (r *RRTSR3) LoadBits(mask RTSR3) RTSR3 { return RTSR3(r.U32.LoadBits(uint32(mask))) }
func (r *RRTSR3) StoreBits(mask, b RTSR3)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRTSR3) SetBits(mask RTSR3)        { r.U32.SetBits(uint32(mask)) }
func (r *RRTSR3) ClearBits(mask RTSR3)      { r.U32.ClearBits(uint32(mask)) }
func (r *RRTSR3) Load() RTSR3               { return RTSR3(r.U32.Load()) }
func (r *RRTSR3) Store(b RTSR3)             { r.U32.Store(uint32(b)) }

type RMRTSR3 struct{ mmio.UM32 }

func (rm RMRTSR3) Load() RTSR3   { return RTSR3(rm.UM32.Load()) }
func (rm RMRTSR3) Store(b RTSR3) { rm.UM32.Store(uint32(b)) }

type FTSR3 uint32

type RFTSR3 struct{ mmio.U32 }

func (r *RFTSR3) LoadBits(mask FTSR3) FTSR3 { return FTSR3(r.U32.LoadBits(uint32(mask))) }
func (r *RFTSR3) StoreBits(mask, b FTSR3)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFTSR3) SetBits(mask FTSR3)        { r.U32.SetBits(uint32(mask)) }
func (r *RFTSR3) ClearBits(mask FTSR3)      { r.U32.ClearBits(uint32(mask)) }
func (r *RFTSR3) Load() FTSR3               { return FTSR3(r.U32.Load()) }
func (r *RFTSR3) Store(b FTSR3)             { r.U32.Store(uint32(b)) }

type RMFTSR3 struct{ mmio.UM32 }

func (rm RMFTSR3) Load() FTSR3   { return FTSR3(rm.UM32.Load()) }
func (rm RMFTSR3) Store(b FTSR3) { rm.UM32.Store(uint32(b)) }

type SWIER3 uint32

type RSWIER3 struct{ mmio.U32 }

func (r *RSWIER3) LoadBits(mask SWIER3) SWIER3 { return SWIER3(r.U32.LoadBits(uint32(mask))) }
func (r *RSWIER3) StoreBits(mask, b SWIER3)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSWIER3) SetBits(mask SWIER3)         { r.U32.SetBits(uint32(mask)) }
func (r *RSWIER3) ClearBits(mask SWIER3)       { r.U32.ClearBits(uint32(mask)) }
func (r *RSWIER3) Load() SWIER3                { return SWIER3(r.U32.Load()) }
func (r *RSWIER3) Store(b SWIER3)              { r.U32.Store(uint32(b)) }

type RMSWIER3 struct{ mmio.UM32 }

func (rm RMSWIER3) Load() SWIER3   { return SWIER3(rm.UM32.Load()) }
func (rm RMSWIER3) Store(b SWIER3) { rm.UM32.Store(uint32(b)) }

type D3PMR3 uint32

type RD3PMR3 struct{ mmio.U32 }

func (r *RD3PMR3) LoadBits(mask D3PMR3) D3PMR3 { return D3PMR3(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PMR3) StoreBits(mask, b D3PMR3)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PMR3) SetBits(mask D3PMR3)         { r.U32.SetBits(uint32(mask)) }
func (r *RD3PMR3) ClearBits(mask D3PMR3)       { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PMR3) Load() D3PMR3                { return D3PMR3(r.U32.Load()) }
func (r *RD3PMR3) Store(b D3PMR3)              { r.U32.Store(uint32(b)) }

type RMD3PMR3 struct{ mmio.UM32 }

func (rm RMD3PMR3) Load() D3PMR3   { return D3PMR3(rm.UM32.Load()) }
func (rm RMD3PMR3) Store(b D3PMR3) { rm.UM32.Store(uint32(b)) }

type D3PCR3H uint32

type RD3PCR3H struct{ mmio.U32 }

func (r *RD3PCR3H) LoadBits(mask D3PCR3H) D3PCR3H { return D3PCR3H(r.U32.LoadBits(uint32(mask))) }
func (r *RD3PCR3H) StoreBits(mask, b D3PCR3H)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RD3PCR3H) SetBits(mask D3PCR3H)          { r.U32.SetBits(uint32(mask)) }
func (r *RD3PCR3H) ClearBits(mask D3PCR3H)        { r.U32.ClearBits(uint32(mask)) }
func (r *RD3PCR3H) Load() D3PCR3H                 { return D3PCR3H(r.U32.Load()) }
func (r *RD3PCR3H) Store(b D3PCR3H)               { r.U32.Store(uint32(b)) }

type RMD3PCR3H struct{ mmio.UM32 }

func (rm RMD3PCR3H) Load() D3PCR3H   { return D3PCR3H(rm.UM32.Load()) }
func (rm RMD3PCR3H) Store(b D3PCR3H) { rm.UM32.Store(uint32(b)) }

type CPUIMR1 uint32

type RCPUIMR1 struct{ mmio.U32 }

func (r *RCPUIMR1) LoadBits(mask CPUIMR1) CPUIMR1 { return CPUIMR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUIMR1) StoreBits(mask, b CPUIMR1)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUIMR1) SetBits(mask CPUIMR1)          { r.U32.SetBits(uint32(mask)) }
func (r *RCPUIMR1) ClearBits(mask CPUIMR1)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUIMR1) Load() CPUIMR1                 { return CPUIMR1(r.U32.Load()) }
func (r *RCPUIMR1) Store(b CPUIMR1)               { r.U32.Store(uint32(b)) }

type RMCPUIMR1 struct{ mmio.UM32 }

func (rm RMCPUIMR1) Load() CPUIMR1   { return CPUIMR1(rm.UM32.Load()) }
func (rm RMCPUIMR1) Store(b CPUIMR1) { rm.UM32.Store(uint32(b)) }

type CPUEMR1 uint32

type RCPUEMR1 struct{ mmio.U32 }

func (r *RCPUEMR1) LoadBits(mask CPUEMR1) CPUEMR1 { return CPUEMR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUEMR1) StoreBits(mask, b CPUEMR1)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUEMR1) SetBits(mask CPUEMR1)          { r.U32.SetBits(uint32(mask)) }
func (r *RCPUEMR1) ClearBits(mask CPUEMR1)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUEMR1) Load() CPUEMR1                 { return CPUEMR1(r.U32.Load()) }
func (r *RCPUEMR1) Store(b CPUEMR1)               { r.U32.Store(uint32(b)) }

type RMCPUEMR1 struct{ mmio.UM32 }

func (rm RMCPUEMR1) Load() CPUEMR1   { return CPUEMR1(rm.UM32.Load()) }
func (rm RMCPUEMR1) Store(b CPUEMR1) { rm.UM32.Store(uint32(b)) }

type CPUPR1 uint32

type RCPUPR1 struct{ mmio.U32 }

func (r *RCPUPR1) LoadBits(mask CPUPR1) CPUPR1 { return CPUPR1(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUPR1) StoreBits(mask, b CPUPR1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUPR1) SetBits(mask CPUPR1)         { r.U32.SetBits(uint32(mask)) }
func (r *RCPUPR1) ClearBits(mask CPUPR1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUPR1) Load() CPUPR1                { return CPUPR1(r.U32.Load()) }
func (r *RCPUPR1) Store(b CPUPR1)              { r.U32.Store(uint32(b)) }

type RMCPUPR1 struct{ mmio.UM32 }

func (rm RMCPUPR1) Load() CPUPR1   { return CPUPR1(rm.UM32.Load()) }
func (rm RMCPUPR1) Store(b CPUPR1) { rm.UM32.Store(uint32(b)) }

type CPUIMR2 uint32

type RCPUIMR2 struct{ mmio.U32 }

func (r *RCPUIMR2) LoadBits(mask CPUIMR2) CPUIMR2 { return CPUIMR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUIMR2) StoreBits(mask, b CPUIMR2)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUIMR2) SetBits(mask CPUIMR2)          { r.U32.SetBits(uint32(mask)) }
func (r *RCPUIMR2) ClearBits(mask CPUIMR2)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUIMR2) Load() CPUIMR2                 { return CPUIMR2(r.U32.Load()) }
func (r *RCPUIMR2) Store(b CPUIMR2)               { r.U32.Store(uint32(b)) }

type RMCPUIMR2 struct{ mmio.UM32 }

func (rm RMCPUIMR2) Load() CPUIMR2   { return CPUIMR2(rm.UM32.Load()) }
func (rm RMCPUIMR2) Store(b CPUIMR2) { rm.UM32.Store(uint32(b)) }

type CPUEMR2 uint32

type RCPUEMR2 struct{ mmio.U32 }

func (r *RCPUEMR2) LoadBits(mask CPUEMR2) CPUEMR2 { return CPUEMR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUEMR2) StoreBits(mask, b CPUEMR2)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUEMR2) SetBits(mask CPUEMR2)          { r.U32.SetBits(uint32(mask)) }
func (r *RCPUEMR2) ClearBits(mask CPUEMR2)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUEMR2) Load() CPUEMR2                 { return CPUEMR2(r.U32.Load()) }
func (r *RCPUEMR2) Store(b CPUEMR2)               { r.U32.Store(uint32(b)) }

type RMCPUEMR2 struct{ mmio.UM32 }

func (rm RMCPUEMR2) Load() CPUEMR2   { return CPUEMR2(rm.UM32.Load()) }
func (rm RMCPUEMR2) Store(b CPUEMR2) { rm.UM32.Store(uint32(b)) }

type CPUPR2 uint32

type RCPUPR2 struct{ mmio.U32 }

func (r *RCPUPR2) LoadBits(mask CPUPR2) CPUPR2 { return CPUPR2(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUPR2) StoreBits(mask, b CPUPR2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUPR2) SetBits(mask CPUPR2)         { r.U32.SetBits(uint32(mask)) }
func (r *RCPUPR2) ClearBits(mask CPUPR2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUPR2) Load() CPUPR2                { return CPUPR2(r.U32.Load()) }
func (r *RCPUPR2) Store(b CPUPR2)              { r.U32.Store(uint32(b)) }

type RMCPUPR2 struct{ mmio.UM32 }

func (rm RMCPUPR2) Load() CPUPR2   { return CPUPR2(rm.UM32.Load()) }
func (rm RMCPUPR2) Store(b CPUPR2) { rm.UM32.Store(uint32(b)) }

type CPUIMR3 uint32

type RCPUIMR3 struct{ mmio.U32 }

func (r *RCPUIMR3) LoadBits(mask CPUIMR3) CPUIMR3 { return CPUIMR3(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUIMR3) StoreBits(mask, b CPUIMR3)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUIMR3) SetBits(mask CPUIMR3)          { r.U32.SetBits(uint32(mask)) }
func (r *RCPUIMR3) ClearBits(mask CPUIMR3)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUIMR3) Load() CPUIMR3                 { return CPUIMR3(r.U32.Load()) }
func (r *RCPUIMR3) Store(b CPUIMR3)               { r.U32.Store(uint32(b)) }

type RMCPUIMR3 struct{ mmio.UM32 }

func (rm RMCPUIMR3) Load() CPUIMR3   { return CPUIMR3(rm.UM32.Load()) }
func (rm RMCPUIMR3) Store(b CPUIMR3) { rm.UM32.Store(uint32(b)) }

type CPUEMR3 uint32

type RCPUEMR3 struct{ mmio.U32 }

func (r *RCPUEMR3) LoadBits(mask CPUEMR3) CPUEMR3 { return CPUEMR3(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUEMR3) StoreBits(mask, b CPUEMR3)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUEMR3) SetBits(mask CPUEMR3)          { r.U32.SetBits(uint32(mask)) }
func (r *RCPUEMR3) ClearBits(mask CPUEMR3)        { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUEMR3) Load() CPUEMR3                 { return CPUEMR3(r.U32.Load()) }
func (r *RCPUEMR3) Store(b CPUEMR3)               { r.U32.Store(uint32(b)) }

type RMCPUEMR3 struct{ mmio.UM32 }

func (rm RMCPUEMR3) Load() CPUEMR3   { return CPUEMR3(rm.UM32.Load()) }
func (rm RMCPUEMR3) Store(b CPUEMR3) { rm.UM32.Store(uint32(b)) }

type CPUPR3 uint32

type RCPUPR3 struct{ mmio.U32 }

func (r *RCPUPR3) LoadBits(mask CPUPR3) CPUPR3 { return CPUPR3(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUPR3) StoreBits(mask, b CPUPR3)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUPR3) SetBits(mask CPUPR3)         { r.U32.SetBits(uint32(mask)) }
func (r *RCPUPR3) ClearBits(mask CPUPR3)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUPR3) Load() CPUPR3                { return CPUPR3(r.U32.Load()) }
func (r *RCPUPR3) Store(b CPUPR3)              { r.U32.Store(uint32(b)) }

type RMCPUPR3 struct{ mmio.UM32 }

func (rm RMCPUPR3) Load() CPUPR3   { return CPUPR3(rm.UM32.Load()) }
func (rm RMCPUPR3) Store(b CPUPR3) { rm.UM32.Store(uint32(b)) }
