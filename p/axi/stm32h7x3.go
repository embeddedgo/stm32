// DO NOT EDIT THIS FILE. GENERATED BY svdxgen.

//go:build stm32h7x3

// Package axi provides access to the registers of the AXI peripheral.
//
// Instances:
//  AXI  AXI_BASE  -  -  AXI interconnect registers
// Registers:
//  0x1FD0  32  AXI_PERIPH_ID_4          AXI interconnect - peripheral ID4 register
//  0x1FE0  32  AXI_PERIPH_ID_0          AXI interconnect - peripheral ID0 register
//  0x1FE4  32  AXI_PERIPH_ID_1          AXI interconnect - peripheral ID1 register
//  0x1FE8  32  AXI_PERIPH_ID_2          AXI interconnect - peripheral ID2 register
//  0x1FEC  32  AXI_PERIPH_ID_3          AXI interconnect - peripheral ID3 register
//  0x1FF0  32  AXI_COMP_ID_0            AXI interconnect - component ID0 register
//  0x1FF4  32  AXI_COMP_ID_1            AXI interconnect - component ID1 register
//  0x1FF8  32  AXI_COMP_ID_2            AXI interconnect - component ID2 register
//  0x1FFC  32  AXI_COMP_ID_3            AXI interconnect - component ID3 register
//  0x2008  32  AXI_TARG1_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x2024  32  AXI_TARG1_FN_MOD2        AXI interconnect - TARG x bus matrix functionality 2 register
//  0x202C  32  AXI_TARG1_FN_MOD_LB      AXI interconnect - TARG x long burst functionality modification
//  0x2108  32  AXI_TARG1_FN_MOD         AXI interconnect - TARG x long burst functionality modification
//  0x3008  32  AXI_TARG2_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x3024  32  AXI_TARG2_FN_MOD2        AXI interconnect - TARG x bus matrix functionality 2 register
//  0x302C  32  AXI_TARG2_FN_MOD_LB      AXI interconnect - TARG x long burst functionality modification
//  0x3108  32  AXI_TARG2_FN_MOD         AXI interconnect - TARG x long burst functionality modification
//  0x4008  32  AXI_TARG3_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x5008  32  AXI_TARG4_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x6008  32  AXI_TARG5_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x7008  32  AXI_TARG6_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x800C  32  AXI_TARG7_FN_MOD_ISS_BM  AXI interconnect - TARG x bus matrix issuing functionality register
//  0x8024  32  AXI_TARG7_FN_MOD2        AXI interconnect - TARG x bus matrix functionality 2 register
//  0x8108  32  AXI_TARG7_FN_MOD         AXI interconnect - TARG x long burst functionality modification
//  0x42024 32  AXI_INI1_FN_MOD2         AXI interconnect - INI x functionality modification 2 register
//  0x42028 32  AXI_INI1_FN_MOD_AHB      AXI interconnect - INI x AHB functionality modification register
//  0x42100 32  AXI_INI1_READ_QOS        AXI interconnect - INI x read QoS register
//  0x42104 32  AXI_INI1_WRITE_QOS       AXI interconnect - INI x write QoS register
//  0x42108 32  AXI_INI1_FN_MOD          AXI interconnect - INI x issuing functionality modification register
//  0x43100 32  AXI_INI2_READ_QOS        AXI interconnect - INI x read QoS register
//  0x43104 32  AXI_INI2_WRITE_QOS       AXI interconnect - INI x write QoS register
//  0x43108 32  AXI_INI2_FN_MOD          AXI interconnect - INI x issuing functionality modification register
//  0x44024 32  AXI_INI3_FN_MOD2         AXI interconnect - INI x functionality modification 2 register
//  0x44028 32  AXI_INI3_FN_MOD_AHB      AXI interconnect - INI x AHB functionality modification register
//  0x44100 32  AXI_INI3_READ_QOS        AXI interconnect - INI x read QoS register
//  0x44104 32  AXI_INI3_WRITE_QOS       AXI interconnect - INI x write QoS register
//  0x44108 32  AXI_INI3_FN_MOD          AXI interconnect - INI x issuing functionality modification register
//  0x45100 32  AXI_INI4_READ_QOS        AXI interconnect - INI x read QoS register
//  0x45104 32  AXI_INI4_WRITE_QOS       AXI interconnect - INI x write QoS register
//  0x45108 32  AXI_INI4_FN_MOD          AXI interconnect - INI x issuing functionality modification register
//  0x46100 32  AXI_INI5_READ_QOS        AXI interconnect - INI x read QoS register
//  0x46104 32  AXI_INI5_WRITE_QOS       AXI interconnect - INI x write QoS register
//  0x46108 32  AXI_INI5_FN_MOD          AXI interconnect - INI x issuing functionality modification register
//  0x47100 32  AXI_INI6_READ_QOS        AXI interconnect - INI x read QoS register
//  0x47104 32  AXI_INI6_WRITE_QOS       AXI interconnect - INI x write QoS register
//  0x47108 32  AXI_INI6_FN_MOD          AXI interconnect - INI x issuing functionality modification register
// Import:
//  github.com/embeddedgo/stm32/p/mmap
package axi

const (
	JEP106CON AXI_PERIPH_ID_4 = 0x0F << 0 //+ JEP106 continuation code
	KCOUNT4   AXI_PERIPH_ID_4 = 0x0F << 4 //+ Register file size
)

const (
	JEP106CONn = 0
	KCOUNT4n   = 4
)

const (
	PARTNUM AXI_PERIPH_ID_0 = 0xFF << 0 //+ Peripheral part number bits 0 to 7
)

const (
	PARTNUMn = 0
)

const (
	PARTNUM AXI_PERIPH_ID_1 = 0x0F << 0 //+ Peripheral part number bits 8 to 11
	JEP106I AXI_PERIPH_ID_1 = 0x0F << 4 //+ JEP106 identity bits 0 to 3
)

const (
	PARTNUMn = 0
	JEP106In = 4
)

const (
	JEP106ID AXI_PERIPH_ID_2 = 0x07 << 0 //+ JEP106 Identity bits 4 to 6
	JEDEC    AXI_PERIPH_ID_2 = 0x01 << 3 //+ JEP106 code flag
	REVISION AXI_PERIPH_ID_2 = 0x0F << 4 //+ Peripheral revision number
)

const (
	JEP106IDn = 0
	JEDECn    = 3
	REVISIONn = 4
)

const (
	CUST_MOD_NUM AXI_PERIPH_ID_3 = 0x0F << 0 //+ Customer modification
	REV_AND      AXI_PERIPH_ID_3 = 0x0F << 4 //+ Customer version
)

const (
	CUST_MOD_NUMn = 0
	REV_ANDn      = 4
)

const (
	PREAMBLE AXI_COMP_ID_0 = 0xFF << 0 //+ Preamble bits 0 to 7
)

const (
	PREAMBLEn = 0
)

const (
	PREAMBLE AXI_COMP_ID_1 = 0x0F << 0 //+ Preamble bits 8 to 11
	CLASS    AXI_COMP_ID_1 = 0x0F << 4 //+ Component class
)

const (
	PREAMBLEn = 0
	CLASSn    = 4
)

const (
	PREAMBLE AXI_COMP_ID_2 = 0xFF << 0 //+ Preamble bits 12 to 19
)

const (
	PREAMBLEn = 0
)

const (
	PREAMBLE AXI_COMP_ID_3 = 0xFF << 0 //+ Preamble bits 20 to 27
)

const (
	PREAMBLEn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_TARG1_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG1_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	BYPASS_MERGE AXI_TARG1_FN_MOD2 = 0x01 << 0 //+ Disable packing of beats to match the output data width
)

const (
	BYPASS_MERGEn = 0
)

const (
	FN_MOD_LB AXI_TARG1_FN_MOD_LB = 0x01 << 0 //+ Controls burst breaking of long bursts
)

const (
	FN_MOD_LBn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_TARG1_FN_MOD = 0x01 << 0 //+ Override AMIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_TARG1_FN_MOD = 0x01 << 1 //+ Override AMIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	READ_ISS_OVERRIDE  AXI_TARG2_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG2_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	BYPASS_MERGE AXI_TARG2_FN_MOD2 = 0x01 << 0 //+ Disable packing of beats to match the output data width
)

const (
	BYPASS_MERGEn = 0
)

const (
	FN_MOD_LB AXI_TARG2_FN_MOD_LB = 0x01 << 0 //+ Controls burst breaking of long bursts
)

const (
	FN_MOD_LBn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_TARG2_FN_MOD = 0x01 << 0 //+ Override AMIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_TARG2_FN_MOD = 0x01 << 1 //+ Override AMIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	READ_ISS_OVERRIDE  AXI_TARG3_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG3_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	READ_ISS_OVERRIDE  AXI_TARG4_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG4_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	READ_ISS_OVERRIDE  AXI_TARG5_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG5_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	READ_ISS_OVERRIDE  AXI_TARG6_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG6_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	READ_ISS_OVERRIDE  AXI_TARG7_FN_MOD_ISS_BM = 0x01 << 0 //+ READ_ISS_OVERRIDE
	WRITE_ISS_OVERRIDE AXI_TARG7_FN_MOD_ISS_BM = 0x01 << 1 //+ Switch matrix write issuing override for target
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	BYPASS_MERGE AXI_TARG7_FN_MOD2 = 0x01 << 0 //+ Disable packing of beats to match the output data width
)

const (
	BYPASS_MERGEn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_TARG7_FN_MOD = 0x01 << 0 //+ Override AMIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_TARG7_FN_MOD = 0x01 << 1 //+ Override AMIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	BYPASS_MERGE AXI_INI1_FN_MOD2 = 0x01 << 0 //+ Disables alteration of transactions by the up-sizer unless required by the protocol
)

const (
	BYPASS_MERGEn = 0
)

const (
	RD_INC_OVERRIDE AXI_INI1_FN_MOD_AHB = 0x01 << 0 //+ Converts all AHB-Lite write transactions to a series of single beat AXI
	WR_INC_OVERRIDE AXI_INI1_FN_MOD_AHB = 0x01 << 1 //+ Converts all AHB-Lite read transactions to a series of single beat AXI
)

const (
	RD_INC_OVERRIDEn = 0
	WR_INC_OVERRIDEn = 1
)

const (
	AR_QOS AXI_INI1_READ_QOS = 0x0F << 0 //+ Read channel QoS setting
)

const (
	AR_QOSn = 0
)

const (
	AW_QOS AXI_INI1_WRITE_QOS = 0x0F << 0 //+ Write channel QoS setting
)

const (
	AW_QOSn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_INI1_FN_MOD = 0x01 << 0 //+ Override ASIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_INI1_FN_MOD = 0x01 << 1 //+ Override ASIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	AR_QOS AXI_INI2_READ_QOS = 0x0F << 0 //+ Read channel QoS setting
)

const (
	AR_QOSn = 0
)

const (
	AW_QOS AXI_INI2_WRITE_QOS = 0x0F << 0 //+ Write channel QoS setting
)

const (
	AW_QOSn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_INI2_FN_MOD = 0x01 << 0 //+ Override ASIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_INI2_FN_MOD = 0x01 << 1 //+ Override ASIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	BYPASS_MERGE AXI_INI3_FN_MOD2 = 0x01 << 0 //+ Disables alteration of transactions by the up-sizer unless required by the protocol
)

const (
	BYPASS_MERGEn = 0
)

const (
	RD_INC_OVERRIDE AXI_INI3_FN_MOD_AHB = 0x01 << 0 //+ Converts all AHB-Lite write transactions to a series of single beat AXI
	WR_INC_OVERRIDE AXI_INI3_FN_MOD_AHB = 0x01 << 1 //+ Converts all AHB-Lite read transactions to a series of single beat AXI
)

const (
	RD_INC_OVERRIDEn = 0
	WR_INC_OVERRIDEn = 1
)

const (
	AR_QOS AXI_INI3_READ_QOS = 0x0F << 0 //+ Read channel QoS setting
)

const (
	AR_QOSn = 0
)

const (
	AW_QOS AXI_INI3_WRITE_QOS = 0x0F << 0 //+ Write channel QoS setting
)

const (
	AW_QOSn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_INI3_FN_MOD = 0x01 << 0 //+ Override ASIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_INI3_FN_MOD = 0x01 << 1 //+ Override ASIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	AR_QOS AXI_INI4_READ_QOS = 0x0F << 0 //+ Read channel QoS setting
)

const (
	AR_QOSn = 0
)

const (
	AW_QOS AXI_INI4_WRITE_QOS = 0x0F << 0 //+ Write channel QoS setting
)

const (
	AW_QOSn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_INI4_FN_MOD = 0x01 << 0 //+ Override ASIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_INI4_FN_MOD = 0x01 << 1 //+ Override ASIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	AR_QOS AXI_INI5_READ_QOS = 0x0F << 0 //+ Read channel QoS setting
)

const (
	AR_QOSn = 0
)

const (
	AW_QOS AXI_INI5_WRITE_QOS = 0x0F << 0 //+ Write channel QoS setting
)

const (
	AW_QOSn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_INI5_FN_MOD = 0x01 << 0 //+ Override ASIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_INI5_FN_MOD = 0x01 << 1 //+ Override ASIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)

const (
	AR_QOS AXI_INI6_READ_QOS = 0x0F << 0 //+ Read channel QoS setting
)

const (
	AR_QOSn = 0
)

const (
	AW_QOS AXI_INI6_WRITE_QOS = 0x0F << 0 //+ Write channel QoS setting
)

const (
	AW_QOSn = 0
)

const (
	READ_ISS_OVERRIDE  AXI_INI6_FN_MOD = 0x01 << 0 //+ Override ASIB read issuing capability
	WRITE_ISS_OVERRIDE AXI_INI6_FN_MOD = 0x01 << 1 //+ Override ASIB write issuing capability
)

const (
	READ_ISS_OVERRIDEn  = 0
	WRITE_ISS_OVERRIDEn = 1
)
