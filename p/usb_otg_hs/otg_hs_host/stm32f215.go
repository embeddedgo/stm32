// Code generated by svdxgen; DO NOT EDIT.

//go:build stm32f215

// Package otg_hs_host provides access to the registers of the OTG_HS_HOST peripheral.
//
// Instances:
//
//	OTG_HS_HOST  OTG_HS_HOST_BASE  -  -  USB on the go high speed
//
// Registers:
//
//	0x000 32  OTG_HS_HCFG        OTG_HS host configuration register
//	0x004 32  OTG_HS_HFIR        OTG_HS Host frame interval register
//	0x008 32  OTG_HS_HFNUM       OTG_HS host frame number/frame time remaining register
//	0x010 32  OTG_HS_HPTXSTS     OTG_HS_Host periodic transmit FIFO/queue status register
//	0x014 32  OTG_HS_HAINT       OTG_HS Host all channels interrupt register
//	0x018 32  OTG_HS_HAINTMSK    OTG_HS host all channels interrupt mask register
//	0x040 32  OTG_HS_HPRT        OTG_HS host port control and status register
//	0x100 32  OTG_HS_HCCHAR0     OTG_HS host channel-0 characteristics register
//	0x104 32  OTG_HS_HCSPLT0     OTG_HS host channel-0 split control register
//	0x108 32  OTG_HS_HCINT0      OTG_HS host channel-11 interrupt register
//	0x10C 32  OTG_HS_HCINTMSK0   OTG_HS host channel-11 interrupt mask register
//	0x110 32  OTG_HS_HCTSIZ0     OTG_HS host channel-11 transfer size register
//	0x114 32  OTG_HS_HCDMA0      OTG_HS host channel-0 DMA address register
//	0x120 32  OTG_HS_HCCHAR1     OTG_HS host channel-1 characteristics register
//	0x124 32  OTG_HS_HCSPLT1     OTG_HS host channel-1 split control register
//	0x128 32  OTG_HS_HCINT1      OTG_HS host channel-1 interrupt register
//	0x12C 32  OTG_HS_HCINTMSK1   OTG_HS host channel-1 interrupt mask register
//	0x130 32  OTG_HS_HCTSIZ1     OTG_HS host channel-1 transfer size register
//	0x134 32  OTG_HS_HCDMA1      OTG_HS host channel-1 DMA address register
//	0x140 32  OTG_HS_HCCHAR2     OTG_HS host channel-2 characteristics register
//	0x144 32  OTG_HS_HCSPLT2     OTG_HS host channel-2 split control register
//	0x148 32  OTG_HS_HCINT2      OTG_HS host channel-2 interrupt register
//	0x14C 32  OTG_HS_HCINTMSK2   OTG_HS host channel-2 interrupt mask register
//	0x150 32  OTG_HS_HCTSIZ2     OTG_HS host channel-2 transfer size register
//	0x154 32  OTG_HS_HCDMA2      OTG_HS host channel-2 DMA address register
//	0x160 32  OTG_HS_HCCHAR3     OTG_HS host channel-3 characteristics register
//	0x164 32  OTG_HS_HCSPLT3     OTG_HS host channel-3 split control register
//	0x168 32  OTG_HS_HCINT3      OTG_HS host channel-3 interrupt register
//	0x16C 32  OTG_HS_HCINTMSK3   OTG_HS host channel-3 interrupt mask register
//	0x170 32  OTG_HS_HCTSIZ3     OTG_HS host channel-3 transfer size register
//	0x174 32  OTG_HS_HCDMA3      OTG_HS host channel-3 DMA address register
//	0x180 32  OTG_HS_HCCHAR4     OTG_HS host channel-4 characteristics register
//	0x184 32  OTG_HS_HCSPLT4     OTG_HS host channel-4 split control register
//	0x188 32  OTG_HS_HCINT4      OTG_HS host channel-4 interrupt register
//	0x18C 32  OTG_HS_HCINTMSK4   OTG_HS host channel-4 interrupt mask register
//	0x190 32  OTG_HS_HCTSIZ4     OTG_HS host channel-4 transfer size register
//	0x194 32  OTG_HS_HCDMA4      OTG_HS host channel-4 DMA address register
//	0x1A0 32  OTG_HS_HCCHAR5     OTG_HS host channel-5 characteristics register
//	0x1A4 32  OTG_HS_HCSPLT5     OTG_HS host channel-5 split control register
//	0x1A8 32  OTG_HS_HCINT5      OTG_HS host channel-5 interrupt register
//	0x1AC 32  OTG_HS_HCINTMSK5   OTG_HS host channel-5 interrupt mask register
//	0x1B0 32  OTG_HS_HCTSIZ5     OTG_HS host channel-5 transfer size register
//	0x1B4 32  OTG_HS_HCDMA5      OTG_HS host channel-5 DMA address register
//	0x1C0 32  OTG_HS_HCCHAR6     OTG_HS host channel-6 characteristics register
//	0x1C4 32  OTG_HS_HCSPLT6     OTG_HS host channel-6 split control register
//	0x1C8 32  OTG_HS_HCINT6      OTG_HS host channel-6 interrupt register
//	0x1CC 32  OTG_HS_HCINTMSK6   OTG_HS host channel-6 interrupt mask register
//	0x1D0 32  OTG_HS_HCTSIZ6     OTG_HS host channel-6 transfer size register
//	0x1D4 32  OTG_HS_HCDMA6      OTG_HS host channel-6 DMA address register
//	0x1E0 32  OTG_HS_HCCHAR7     OTG_HS host channel-7 characteristics register
//	0x1E4 32  OTG_HS_HCSPLT7     OTG_HS host channel-7 split control register
//	0x1E8 32  OTG_HS_HCINT7      OTG_HS host channel-7 interrupt register
//	0x1EC 32  OTG_HS_HCINTMSK7   OTG_HS host channel-7 interrupt mask register
//	0x1F0 32  OTG_HS_HCTSIZ7     OTG_HS host channel-7 transfer size register
//	0x1F4 32  OTG_HS_HCDMA7      OTG_HS host channel-7 DMA address register
//	0x200 32  OTG_HS_HCCHAR8     OTG_HS host channel-8 characteristics register
//	0x204 32  OTG_HS_HCSPLT8     OTG_HS host channel-8 split control register
//	0x208 32  OTG_HS_HCINT8      OTG_HS host channel-8 interrupt register
//	0x20C 32  OTG_HS_HCINTMSK8   OTG_HS host channel-8 interrupt mask register
//	0x210 32  OTG_HS_HCTSIZ8     OTG_HS host channel-8 transfer size register
//	0x214 32  OTG_HS_HCDMA8      OTG_HS host channel-8 DMA address register
//	0x220 32  OTG_HS_HCCHAR9     OTG_HS host channel-9 characteristics register
//	0x224 32  OTG_HS_HCSPLT9     OTG_HS host channel-9 split control register
//	0x228 32  OTG_HS_HCINT9      OTG_HS host channel-9 interrupt register
//	0x22C 32  OTG_HS_HCINTMSK9   OTG_HS host channel-9 interrupt mask register
//	0x230 32  OTG_HS_HCTSIZ9     OTG_HS host channel-9 transfer size register
//	0x234 32  OTG_HS_HCDMA9      OTG_HS host channel-9 DMA address register
//	0x240 32  OTG_HS_HCCHAR10    OTG_HS host channel-10 characteristics register
//	0x244 32  OTG_HS_HCSPLT10    OTG_HS host channel-10 split control register
//	0x248 32  OTG_HS_HCINT10     OTG_HS host channel-10 interrupt register
//	0x24C 32  OTG_HS_HCINTMSK10  OTG_HS host channel-10 interrupt mask register
//	0x250 32  OTG_HS_HCTSIZ10    OTG_HS host channel-10 transfer size register
//	0x254 32  OTG_HS_HCDMA10     OTG_HS host channel-10 DMA address register
//	0x260 32  OTG_HS_HCCHAR11    OTG_HS host channel-11 characteristics register
//	0x264 32  OTG_HS_HCSPLT11    OTG_HS host channel-11 split control register
//	0x268 32  OTG_HS_HCINT11     OTG_HS host channel-11 interrupt register
//	0x26C 32  OTG_HS_HCINTMSK11  OTG_HS host channel-11 interrupt mask register
//	0x270 32  OTG_HS_HCTSIZ11    OTG_HS host channel-11 transfer size register
//	0x274 32  OTG_HS_HCDMA11     OTG_HS host channel-11 DMA address register
//
// Import:
//
//	github.com/embeddedgo/stm32/p/mmap
package otg_hs_host

const (
	FSLSPCS OTG_HS_HCFG = 0x03 << 0 //+ FS/LS PHY clock select
	FSLSS   OTG_HS_HCFG = 0x01 << 2 //+ FS- and LS-only support
)

const (
	FSLSPCSn = 0
	FSLSSn   = 2
)

const (
	FRIVL OTG_HS_HFIR = 0xFFFF << 0 //+ Frame interval
)

const (
	FRIVLn = 0
)

const (
	FRNUM OTG_HS_HFNUM = 0xFFFF << 0  //+ Frame number
	FTREM OTG_HS_HFNUM = 0xFFFF << 16 //+ Frame time remaining
)

const (
	FRNUMn = 0
	FTREMn = 16
)

const (
	PTXFSAVL OTG_HS_HPTXSTS = 0xFFFF << 0 //+ Periodic transmit data FIFO space available
	PTXQSAV  OTG_HS_HPTXSTS = 0xFF << 16  //+ Periodic transmit request queue space available
	PTXQTOP  OTG_HS_HPTXSTS = 0xFF << 24  //+ Top of the periodic transmit request queue
)

const (
	PTXFSAVLn = 0
	PTXQSAVn  = 16
	PTXQTOPn  = 24
)

const (
	HAINT OTG_HS_HAINT = 0xFFFF << 0 //+ Channel interrupts
)

const (
	HAINTn = 0
)

const (
	HAINTM OTG_HS_HAINTMSK = 0xFFFF << 0 //+ Channel interrupt mask
)

const (
	HAINTMn = 0
)

const (
	PCSTS   OTG_HS_HPRT = 0x01 << 0  //+ Port connect status
	PCDET   OTG_HS_HPRT = 0x01 << 1  //+ Port connect detected
	PENA    OTG_HS_HPRT = 0x01 << 2  //+ Port enable
	PENCHNG OTG_HS_HPRT = 0x01 << 3  //+ Port enable/disable change
	POCA    OTG_HS_HPRT = 0x01 << 4  //+ Port overcurrent active
	POCCHNG OTG_HS_HPRT = 0x01 << 5  //+ Port overcurrent change
	PRES    OTG_HS_HPRT = 0x01 << 6  //+ Port resume
	PSUSP   OTG_HS_HPRT = 0x01 << 7  //+ Port suspend
	PRST    OTG_HS_HPRT = 0x01 << 8  //+ Port reset
	PLSTS   OTG_HS_HPRT = 0x03 << 10 //+ Port line status
	PPWR    OTG_HS_HPRT = 0x01 << 12 //+ Port power
	PTCTL   OTG_HS_HPRT = 0x0F << 13 //+ Port test control
	PSPD    OTG_HS_HPRT = 0x03 << 17 //+ Port speed
)

const (
	PCSTSn   = 0
	PCDETn   = 1
	PENAn    = 2
	PENCHNGn = 3
	POCAn    = 4
	POCCHNGn = 5
	PRESn    = 6
	PSUSPn   = 7
	PRSTn    = 8
	PLSTSn   = 10
	PPWRn    = 12
	PTCTLn   = 13
	PSPDn    = 17
)

const (
	MPSIZ  OTG_HS_HCCHAR0 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR0 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR0 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR0 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR0 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR0 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR0 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR0 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR0 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR0 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT0 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT0 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT0 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT0 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT0 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT0 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT0 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT0 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT0 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT0 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT0 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT0 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT0 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT0 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT0 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT0 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK0 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK0 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK0 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK0 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK0 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK0 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK0 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK0 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK0 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK0 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK0 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ0 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ0 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ0 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA0 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR1 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR1 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR1 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR1 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR1 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR1 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR1 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR1 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR1 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR1 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT1 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT1 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT1 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT1 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT1 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT1 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT1 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT1 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT1 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT1 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT1 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT1 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT1 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT1 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT1 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT1 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK1 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK1 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK1 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK1 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK1 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK1 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK1 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK1 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK1 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK1 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK1 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ1 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ1 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ1 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA1 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR2 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR2 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR2 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR2 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR2 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR2 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR2 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR2 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR2 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR2 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT2 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT2 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT2 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT2 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT2 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT2 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT2 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT2 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT2 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT2 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT2 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT2 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT2 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT2 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT2 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT2 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK2 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK2 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK2 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK2 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK2 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK2 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK2 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK2 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK2 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK2 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK2 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ2 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ2 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ2 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA2 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR3 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR3 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR3 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR3 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR3 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR3 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR3 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR3 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR3 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR3 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT3 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT3 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT3 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT3 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT3 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT3 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT3 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT3 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT3 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT3 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT3 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT3 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT3 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT3 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT3 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT3 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK3 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK3 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK3 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK3 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK3 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK3 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK3 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK3 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK3 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK3 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK3 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ3 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ3 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ3 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA3 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR4 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR4 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR4 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR4 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR4 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR4 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR4 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR4 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR4 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR4 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT4 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT4 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT4 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT4 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT4 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT4 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT4 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT4 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT4 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT4 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT4 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT4 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT4 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT4 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT4 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT4 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK4 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK4 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK4 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK4 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK4 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK4 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK4 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK4 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK4 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK4 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK4 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ4 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ4 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ4 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA4 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR5 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR5 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR5 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR5 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR5 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR5 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR5 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR5 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR5 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR5 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT5 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT5 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT5 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT5 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT5 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT5 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT5 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT5 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT5 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT5 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT5 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT5 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT5 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT5 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT5 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT5 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK5 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK5 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK5 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK5 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK5 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK5 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK5 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK5 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK5 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK5 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK5 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ5 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ5 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ5 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA5 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR6 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR6 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR6 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR6 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR6 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR6 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR6 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR6 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR6 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR6 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT6 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT6 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT6 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT6 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT6 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT6 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT6 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT6 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT6 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT6 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT6 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT6 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT6 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT6 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT6 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT6 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK6 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK6 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK6 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK6 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK6 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK6 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK6 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK6 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK6 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK6 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK6 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ6 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ6 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ6 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA6 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR7 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR7 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR7 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR7 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR7 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR7 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR7 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR7 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR7 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR7 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT7 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT7 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT7 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT7 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT7 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT7 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT7 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT7 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT7 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT7 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT7 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT7 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT7 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT7 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT7 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT7 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK7 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK7 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK7 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK7 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK7 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK7 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK7 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK7 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK7 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK7 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK7 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ7 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ7 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ7 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA7 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR8 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR8 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR8 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR8 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR8 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR8 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR8 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR8 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR8 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR8 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT8 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT8 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT8 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT8 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT8 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT8 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT8 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT8 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT8 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT8 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT8 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT8 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT8 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT8 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT8 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT8 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK8 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK8 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK8 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK8 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK8 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK8 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK8 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK8 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK8 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK8 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK8 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ8 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ8 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ8 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA8 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR9 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR9 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR9 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR9 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR9 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR9 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR9 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR9 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR9 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR9 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT9 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT9 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT9 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT9 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT9 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT9 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT9 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT9 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT9 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT9 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT9 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT9 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT9 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT9 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT9 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT9 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK9 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK9 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK9 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK9 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK9 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK9 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK9 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK9 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK9 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK9 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK9 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ9 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ9 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ9 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA9 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR10 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR10 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR10 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR10 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR10 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR10 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR10 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR10 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR10 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR10 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT10 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT10 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT10 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT10 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT10 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT10 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT10 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT10 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT10 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT10 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT10 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT10 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT10 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT10 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT10 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT10 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK10 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK10 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK10 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK10 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK10 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK10 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK10 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK10 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK10 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK10 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK10 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ10 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ10 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ10 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA10 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)

const (
	MPSIZ  OTG_HS_HCCHAR11 = 0x7FF << 0 //+ Maximum packet size
	EPNUM  OTG_HS_HCCHAR11 = 0x0F << 11 //+ Endpoint number
	EPDIR  OTG_HS_HCCHAR11 = 0x01 << 15 //+ Endpoint direction
	LSDEV  OTG_HS_HCCHAR11 = 0x01 << 17 //+ Low-speed device
	EPTYP  OTG_HS_HCCHAR11 = 0x03 << 18 //+ Endpoint type
	MC     OTG_HS_HCCHAR11 = 0x03 << 20 //+ Multi Count (MC) / Error Count (EC)
	DAD    OTG_HS_HCCHAR11 = 0x7F << 22 //+ Device address
	ODDFRM OTG_HS_HCCHAR11 = 0x01 << 29 //+ Odd frame
	CHDIS  OTG_HS_HCCHAR11 = 0x01 << 30 //+ Channel disable
	CHENA  OTG_HS_HCCHAR11 = 0x01 << 31 //+ Channel enable
)

const (
	MPSIZn  = 0
	EPNUMn  = 11
	EPDIRn  = 15
	LSDEVn  = 17
	EPTYPn  = 18
	MCn     = 20
	DADn    = 22
	ODDFRMn = 29
	CHDISn  = 30
	CHENAn  = 31
)

const (
	PRTADDR   OTG_HS_HCSPLT11 = 0x7F << 0  //+ Port address
	HUBADDR   OTG_HS_HCSPLT11 = 0x7F << 7  //+ Hub address
	XACTPOS   OTG_HS_HCSPLT11 = 0x03 << 14 //+ XACTPOS
	COMPLSPLT OTG_HS_HCSPLT11 = 0x01 << 16 //+ Do complete split
	SPLITEN   OTG_HS_HCSPLT11 = 0x01 << 31 //+ Split enable
)

const (
	PRTADDRn   = 0
	HUBADDRn   = 7
	XACTPOSn   = 14
	COMPLSPLTn = 16
	SPLITENn   = 31
)

const (
	XFRC   OTG_HS_HCINT11 = 0x01 << 0  //+ Transfer completed
	CHH    OTG_HS_HCINT11 = 0x01 << 1  //+ Channel halted
	AHBERR OTG_HS_HCINT11 = 0x01 << 2  //+ AHB error
	STALL  OTG_HS_HCINT11 = 0x01 << 3  //+ STALL response received interrupt
	NAK    OTG_HS_HCINT11 = 0x01 << 4  //+ NAK response received interrupt
	ACK    OTG_HS_HCINT11 = 0x01 << 5  //+ ACK response received/transmitted interrupt
	NYET   OTG_HS_HCINT11 = 0x01 << 6  //+ Response received interrupt
	TXERR  OTG_HS_HCINT11 = 0x01 << 7  //+ Transaction error
	BBERR  OTG_HS_HCINT11 = 0x01 << 8  //+ Babble error
	FRMOR  OTG_HS_HCINT11 = 0x01 << 9  //+ Frame overrun
	DTERR  OTG_HS_HCINT11 = 0x01 << 10 //+ Data toggle error
)

const (
	XFRCn   = 0
	CHHn    = 1
	AHBERRn = 2
	STALLn  = 3
	NAKn    = 4
	ACKn    = 5
	NYETn   = 6
	TXERRn  = 7
	BBERRn  = 8
	FRMORn  = 9
	DTERRn  = 10
)

const (
	XFRCM  OTG_HS_HCINTMSK11 = 0x01 << 0  //+ Transfer completed mask
	CHHM   OTG_HS_HCINTMSK11 = 0x01 << 1  //+ Channel halted mask
	AHBERR OTG_HS_HCINTMSK11 = 0x01 << 2  //+ AHB error
	STALLM OTG_HS_HCINTMSK11 = 0x01 << 3  //+ STALL response received interrupt mask
	NAKM   OTG_HS_HCINTMSK11 = 0x01 << 4  //+ NAK response received interrupt mask
	ACKM   OTG_HS_HCINTMSK11 = 0x01 << 5  //+ ACK response received/transmitted interrupt mask
	NYET   OTG_HS_HCINTMSK11 = 0x01 << 6  //+ response received interrupt mask
	TXERRM OTG_HS_HCINTMSK11 = 0x01 << 7  //+ Transaction error mask
	BBERRM OTG_HS_HCINTMSK11 = 0x01 << 8  //+ Babble error mask
	FRMORM OTG_HS_HCINTMSK11 = 0x01 << 9  //+ Frame overrun mask
	DTERRM OTG_HS_HCINTMSK11 = 0x01 << 10 //+ Data toggle error mask
)

const (
	XFRCMn  = 0
	CHHMn   = 1
	AHBERRn = 2
	STALLMn = 3
	NAKMn   = 4
	ACKMn   = 5
	NYETn   = 6
	TXERRMn = 7
	BBERRMn = 8
	FRMORMn = 9
	DTERRMn = 10
)

const (
	XFRSIZ OTG_HS_HCTSIZ11 = 0x7FFFF << 0 //+ Transfer size
	PKTCNT OTG_HS_HCTSIZ11 = 0x3FF << 19  //+ Packet count
	DPID   OTG_HS_HCTSIZ11 = 0x03 << 29   //+ Data PID
)

const (
	XFRSIZn = 0
	PKTCNTn = 19
	DPIDn   = 29
)

const (
	DMAADDR OTG_HS_HCDMA11 = 0xFFFFFFFF << 0 //+ DMA address
)

const (
	DMAADDRn = 0
)
