// Code generated by xgen -g; DO NOT EDIT.

//go:build stm32l4x6

package tim

import (
	"embedded/mmio"
	"unsafe"

	"github.com/embeddedgo/stm32/p/bus"
	"github.com/embeddedgo/stm32/p/mmap"
)

type Periph struct {
	CR1   mmio.R32[CR1]
	CR2   mmio.R32[CR2]
	SMCR  mmio.R32[SMCR]
	DIER  mmio.R32[DIER]
	SR    mmio.R32[SR]
	EGR   mmio.R32[EGR]
	CCMR1 mmio.R32[CCMR1]
	CCMR2 mmio.R32[CCMR2]
	CCER  mmio.R32[CCER]
	CNT   mmio.R32[uint32]
	PSC   mmio.R32[uint32]
	ARR   mmio.R32[uint32]
	RCR   mmio.R32[uint32]
	CCR1  mmio.R32[uint32]
	CCR2  mmio.R32[uint32]
	CCR3  mmio.R32[uint32]
	CCR4  mmio.R32[uint32]
	BDTR  mmio.R32[BDTR]
	DCR   mmio.R32[DCR]
	DMAR  mmio.R32[uint32]
	OR1   mmio.R32[OR1]
	CCMR3 mmio.R32[CCMR3]
	CCR5  mmio.R32[uint32]
	CCR6  mmio.R32[uint32]
	OR2   mmio.R32[OR2]
	OR3   mmio.R32[OR3]
}

func TIM1() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM1_BASE))) }
func TIM2() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM2_BASE))) }
func TIM3() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM3_BASE))) }
func TIM4() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM4_BASE))) }
func TIM5() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM5_BASE))) }
func TIM6() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM6_BASE))) }
func TIM7() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM7_BASE))) }
func TIM8() *Periph  { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM8_BASE))) }
func TIM15() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM15_BASE))) }
func TIM16() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM16_BASE))) }
func TIM17() *Periph { return (*Periph)(unsafe.Pointer(uintptr(mmap.TIM17_BASE))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func (p *Periph) Bus() bus.Bus {
	switch p.BaseAddr() {
	default:
		return bus.APB1
	case mmap.TIM1_BASE, mmap.TIM8_BASE, mmap.TIM15_BASE, mmap.TIM16_BASE, mmap.TIM17_BASE:
		return bus.APB2
	}
}

type CR1 uint32

func CEN_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: CEN} }
func UDIS_(p *Periph) mmio.RM32[CR1] { return mmio.RM32[CR1]{R: &p.CR1, Mask: UDIS} }
func URS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: URS} }
func OPM_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: OPM} }
func DIR_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: DIR} }
func CMS_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: CMS} }
func ARPE_(p *Periph) mmio.RM32[CR1] { return mmio.RM32[CR1]{R: &p.CR1, Mask: ARPE} }
func CKD_(p *Periph) mmio.RM32[CR1]  { return mmio.RM32[CR1]{R: &p.CR1, Mask: CKD} }

type CR2 uint32

func CCPC_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: CCPC} }
func CCUS_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: CCUS} }
func CCDS_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: CCDS} }
func MMS_(p *Periph) mmio.RM32[CR2]   { return mmio.RM32[CR2]{R: &p.CR2, Mask: MMS} }
func TI1S_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: TI1S} }
func OIS1_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS1} }
func OIS1N_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS1N} }
func OIS2_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS2} }
func OIS2N_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS2N} }
func OIS3_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS3} }
func OIS3N_(p *Periph) mmio.RM32[CR2] { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS3N} }
func OIS4_(p *Periph) mmio.RM32[CR2]  { return mmio.RM32[CR2]{R: &p.CR2, Mask: OIS4} }

type SMCR uint32

func SMS_(p *Periph) mmio.RM32[SMCR]   { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: SMS} }
func OCCS_(p *Periph) mmio.RM32[SMCR]  { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: OCCS} }
func TS_(p *Periph) mmio.RM32[SMCR]    { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: TS} }
func MSM_(p *Periph) mmio.RM32[SMCR]   { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: MSM} }
func ETF_(p *Periph) mmio.RM32[SMCR]   { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: ETF} }
func ETPS_(p *Periph) mmio.RM32[SMCR]  { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: ETPS} }
func ECE_(p *Periph) mmio.RM32[SMCR]   { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: ECE} }
func ETP_(p *Periph) mmio.RM32[SMCR]   { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: ETP} }
func SMS_2_(p *Periph) mmio.RM32[SMCR] { return mmio.RM32[SMCR]{R: &p.SMCR, Mask: SMS_2} }

type DIER uint32

func UIE_(p *Periph) mmio.RM32[DIER]   { return mmio.RM32[DIER]{R: &p.DIER, Mask: UIE} }
func CC1IE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC1IE} }
func CC2IE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC2IE} }
func CC3IE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC3IE} }
func CC4IE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC4IE} }
func COMIE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: COMIE} }
func TIE_(p *Periph) mmio.RM32[DIER]   { return mmio.RM32[DIER]{R: &p.DIER, Mask: TIE} }
func BIE_(p *Periph) mmio.RM32[DIER]   { return mmio.RM32[DIER]{R: &p.DIER, Mask: BIE} }
func UDE_(p *Periph) mmio.RM32[DIER]   { return mmio.RM32[DIER]{R: &p.DIER, Mask: UDE} }
func CC1DE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC1DE} }
func CC2DE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC2DE} }
func CC3DE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC3DE} }
func CC4DE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: CC4DE} }
func COMDE_(p *Periph) mmio.RM32[DIER] { return mmio.RM32[DIER]{R: &p.DIER, Mask: COMDE} }
func TDE_(p *Periph) mmio.RM32[DIER]   { return mmio.RM32[DIER]{R: &p.DIER, Mask: TDE} }

type SR uint32

func UIF_(p *Periph) mmio.RM32[SR]   { return mmio.RM32[SR]{R: &p.SR, Mask: UIF} }
func CC1IF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC1IF} }
func CC2IF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC2IF} }
func CC3IF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC3IF} }
func CC4IF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC4IF} }
func COMIF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: COMIF} }
func TIF_(p *Periph) mmio.RM32[SR]   { return mmio.RM32[SR]{R: &p.SR, Mask: TIF} }
func BIF_(p *Periph) mmio.RM32[SR]   { return mmio.RM32[SR]{R: &p.SR, Mask: BIF} }
func CC1OF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC1OF} }
func CC2OF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC2OF} }
func CC3OF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC3OF} }
func CC4OF_(p *Periph) mmio.RM32[SR] { return mmio.RM32[SR]{R: &p.SR, Mask: CC4OF} }

type EGR uint32

func UG_(p *Periph) mmio.RM32[EGR]   { return mmio.RM32[EGR]{R: &p.EGR, Mask: UG} }
func CC1G_(p *Periph) mmio.RM32[EGR] { return mmio.RM32[EGR]{R: &p.EGR, Mask: CC1G} }
func CC2G_(p *Periph) mmio.RM32[EGR] { return mmio.RM32[EGR]{R: &p.EGR, Mask: CC2G} }
func CC3G_(p *Periph) mmio.RM32[EGR] { return mmio.RM32[EGR]{R: &p.EGR, Mask: CC3G} }
func CC4G_(p *Periph) mmio.RM32[EGR] { return mmio.RM32[EGR]{R: &p.EGR, Mask: CC4G} }
func COMG_(p *Periph) mmio.RM32[EGR] { return mmio.RM32[EGR]{R: &p.EGR, Mask: COMG} }
func TG_(p *Periph) mmio.RM32[EGR]   { return mmio.RM32[EGR]{R: &p.EGR, Mask: TG} }
func BG_(p *Periph) mmio.RM32[EGR]   { return mmio.RM32[EGR]{R: &p.EGR, Mask: BG} }

type CCMR1 uint32

func CC1S_(p *Periph) mmio.RM32[CCMR1]   { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: CC1S} }
func OC1FE_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC1FE} }
func OC1PE_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC1PE} }
func OC1M_(p *Periph) mmio.RM32[CCMR1]   { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC1M} }
func OC1CE_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC1CE} }
func CC2S_(p *Periph) mmio.RM32[CCMR1]   { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: CC2S} }
func OC2FE_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC2FE} }
func OC2PE_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC2PE} }
func OC2M_(p *Periph) mmio.RM32[CCMR1]   { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC2M} }
func OC2CE_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC2CE} }
func OC1M_2_(p *Periph) mmio.RM32[CCMR1] { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC1M_2} }
func OC2M_2_(p *Periph) mmio.RM32[CCMR1] { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: OC2M_2} }
func ICPCS_(p *Periph) mmio.RM32[CCMR1]  { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: ICPCS} }
func IC1F_(p *Periph) mmio.RM32[CCMR1]   { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: IC1F} }
func IC2PCS_(p *Periph) mmio.RM32[CCMR1] { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: IC2PCS} }
func IC2F_(p *Periph) mmio.RM32[CCMR1]   { return mmio.RM32[CCMR1]{R: &p.CCMR1, Mask: IC2F} }

type CCMR2 uint32

func CC3S_(p *Periph) mmio.RM32[CCMR2]   { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: CC3S} }
func OC3FE_(p *Periph) mmio.RM32[CCMR2]  { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC3FE} }
func OC3PE_(p *Periph) mmio.RM32[CCMR2]  { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC3PE} }
func OC3M_(p *Periph) mmio.RM32[CCMR2]   { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC3M} }
func OC3CE_(p *Periph) mmio.RM32[CCMR2]  { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC3CE} }
func CC4S_(p *Periph) mmio.RM32[CCMR2]   { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: CC4S} }
func OC4FE_(p *Periph) mmio.RM32[CCMR2]  { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC4FE} }
func OC4PE_(p *Periph) mmio.RM32[CCMR2]  { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC4PE} }
func OC4M_(p *Periph) mmio.RM32[CCMR2]   { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC4M} }
func OC4CE_(p *Periph) mmio.RM32[CCMR2]  { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC4CE} }
func OC3M_2_(p *Periph) mmio.RM32[CCMR2] { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC3M_2} }
func OC4M_2_(p *Periph) mmio.RM32[CCMR2] { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: OC4M_2} }
func IC3PSC_(p *Periph) mmio.RM32[CCMR2] { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: IC3PSC} }
func IC3F_(p *Periph) mmio.RM32[CCMR2]   { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: IC3F} }
func IC4PSC_(p *Periph) mmio.RM32[CCMR2] { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: IC4PSC} }
func IC4F_(p *Periph) mmio.RM32[CCMR2]   { return mmio.RM32[CCMR2]{R: &p.CCMR2, Mask: IC4F} }

type CCER uint32

func CC1E_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC1E} }
func CC1P_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC1P} }
func CC1NE_(p *Periph) mmio.RM32[CCER] { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC1NE} }
func CC1NP_(p *Periph) mmio.RM32[CCER] { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC1NP} }
func CC2E_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC2E} }
func CC2P_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC2P} }
func CC2NE_(p *Periph) mmio.RM32[CCER] { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC2NE} }
func CC2NP_(p *Periph) mmio.RM32[CCER] { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC2NP} }
func CC3E_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC3E} }
func CC3P_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC3P} }
func CC3NE_(p *Periph) mmio.RM32[CCER] { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC3NE} }
func CC3NP_(p *Periph) mmio.RM32[CCER] { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC3NP} }
func CC4E_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC4E} }
func CC4P_(p *Periph) mmio.RM32[CCER]  { return mmio.RM32[CCER]{R: &p.CCER, Mask: CC4P} }

type BDTR uint32

func DTG_(p *Periph) mmio.RM32[BDTR]  { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: DTG} }
func LOCK_(p *Periph) mmio.RM32[BDTR] { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: LOCK} }
func OSSI_(p *Periph) mmio.RM32[BDTR] { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: OSSI} }
func OSSR_(p *Periph) mmio.RM32[BDTR] { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: OSSR} }
func BKE_(p *Periph) mmio.RM32[BDTR]  { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: BKE} }
func BKP_(p *Periph) mmio.RM32[BDTR]  { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: BKP} }
func AOE_(p *Periph) mmio.RM32[BDTR]  { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: AOE} }
func MOE_(p *Periph) mmio.RM32[BDTR]  { return mmio.RM32[BDTR]{R: &p.BDTR, Mask: MOE} }

type DCR uint32

func DBA_(p *Periph) mmio.RM32[DCR] { return mmio.RM32[DCR]{R: &p.DCR, Mask: DBA} }
func DBL_(p *Periph) mmio.RM32[DCR] { return mmio.RM32[DCR]{R: &p.DCR, Mask: DBL} }

type OR1 uint32

func ETR_ADC1_RMP_(p *Periph) mmio.RM32[OR1] { return mmio.RM32[OR1]{R: &p.OR1, Mask: ETR_ADC1_RMP} }
func ETR_ADC3_RMP_(p *Periph) mmio.RM32[OR1] { return mmio.RM32[OR1]{R: &p.OR1, Mask: ETR_ADC3_RMP} }
func TI1_RMP_(p *Periph) mmio.RM32[OR1]      { return mmio.RM32[OR1]{R: &p.OR1, Mask: TI1_RMP} }

type CCMR3 uint32

func OC5FE_(p *Periph) mmio.RM32[CCMR3]     { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC5FE} }
func OC5PE_(p *Periph) mmio.RM32[CCMR3]     { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC5PE} }
func OC5M_(p *Periph) mmio.RM32[CCMR3]      { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC5M} }
func OC5CE_(p *Periph) mmio.RM32[CCMR3]     { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC5CE} }
func OC6FE_(p *Periph) mmio.RM32[CCMR3]     { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC6FE} }
func OC6PE_(p *Periph) mmio.RM32[CCMR3]     { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC6PE} }
func OC6M_(p *Periph) mmio.RM32[CCMR3]      { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC6M} }
func OC6CE_(p *Periph) mmio.RM32[CCMR3]     { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC6CE} }
func OC5M_bit3_(p *Periph) mmio.RM32[CCMR3] { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC5M_bit3} }
func OC6M_bit3_(p *Periph) mmio.RM32[CCMR3] { return mmio.RM32[CCMR3]{R: &p.CCMR3, Mask: OC6M_bit3} }

type OR2 uint32

func BKINE_(p *Periph) mmio.RM32[OR2]    { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKINE} }
func BKCMP1E_(p *Periph) mmio.RM32[OR2]  { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKCMP1E} }
func BKCMP2E_(p *Periph) mmio.RM32[OR2]  { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKCMP2E} }
func BKDFBK0E_(p *Periph) mmio.RM32[OR2] { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKDFBK0E} }
func BKINP_(p *Periph) mmio.RM32[OR2]    { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKINP} }
func BKCMP1P_(p *Periph) mmio.RM32[OR2]  { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKCMP1P} }
func BKCMP2P_(p *Periph) mmio.RM32[OR2]  { return mmio.RM32[OR2]{R: &p.OR2, Mask: BKCMP2P} }
func ETRSEL_(p *Periph) mmio.RM32[OR2]   { return mmio.RM32[OR2]{R: &p.OR2, Mask: ETRSEL} }

type OR3 uint32

func BK2INE_(p *Periph) mmio.RM32[OR3]    { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2INE} }
func BK2CMP1E_(p *Periph) mmio.RM32[OR3]  { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2CMP1E} }
func BK2CMP2E_(p *Periph) mmio.RM32[OR3]  { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2CMP2E} }
func BK2DFBK0E_(p *Periph) mmio.RM32[OR3] { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2DFBK0E} }
func BK2INP_(p *Periph) mmio.RM32[OR3]    { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2INP} }
func BK2CMP1P_(p *Periph) mmio.RM32[OR3]  { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2CMP1P} }
func BK2CMP2P_(p *Periph) mmio.RM32[OR3]  { return mmio.RM32[OR3]{R: &p.OR3, Mask: BK2CMP2P} }
